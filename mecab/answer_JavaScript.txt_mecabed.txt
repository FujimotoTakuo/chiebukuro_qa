ん ー と … まず 、 イベントハンドラ は head 内 の スクリプト で 設置 し て いる ので 、 on click 属性 は 必要 無い です よ ね 。 > data : { > // ここ に 何 か を 入れる > } ここ で 通信 先 に 送る データ を 指定 でき ます ので 、 data : { val : 2015 } この よう に key と value を 入れ て おけ ば 、 データ として 送ら れ ます 。 もし 、 例えば p 要素 が 複数 あっ て 、 click する p 要素 によって 送る データ を 変える の で あれ ば 、 < p data - val =" 2015 "> 2015 </ p > < p data - val =" 2016 "> 2016 </ p > < p data - val =" 2017 "> 2017 </ p > 例えば この よう に data -* 属性 を 使っ て 独自 の データ を 埋め込ん で おき 、 data : { val : $( this ). data (" val "); } 送る データ を click さ れ た p 要素 から 取り出す とか と か 。 
> for ( var i = 1 ; i <= school . length ; i ++) { > $('# gakkou '). append ('< option value ="' + i + '">' + d ata [ school [ i ]]+ '</ option >'); > } オブジェクト を 走査 する とき は for ... in を 使っ て ください 。 配列 と 違い 、 length を 得 られ ない から です 。 jQuery に は $. each が ある ので 、 これ を 使っ て も 構い ませ ん 。 $. each ( data [ school ], function ( i , v ) { $('# gakkou '). append ('< option value ="' + i + '">' + v + '</ option >'); }); とか 、 for ( var i in data [ school ]) { $('# gakkou '). append ('< option value ="' + i + '">' + d ata [ school ][ i ] + '</ option >'); } こんな ん で いかが でしょ う か 。 
こんにちは < form > で 囲む と < form > の ネーム と < select > や < input > の ネーム を 組み合わせ て value を 取得 し ます 。 取得 した値 と セレクト ボックス で 選択 した値 を if 文 や スイッチ 文 など で 比較 し ます 。 比較 し て 合っ て いれ ば インプット ボックス の 値 を 代入 し ます 。 <! DOCTYPE html > < html > < head > < title > select name =" omosa "</ title > </ head > < body > < form name =" selbox "> < select name =" omosa " on change =" ch ()"> < option label =" 選択 し て ください " value =""> 選択 し て ください </ option > < option label =" 10kg 以下 " value =" 103 "> 10kg 以下 </ option > < option label =" 25kg 以下 " value =" 102 "> 25kg 以下 </ option > < option label =" 50kg 以下 " value =" 101 "> 50kg 以下 </ option > < option label =" 75kg 以下 " value =" 100 "> 75kg 以下 </ option > < option label =" 100kg 以下 " value =" 99 "> 100kg 以下 </ option > < option label =" 125kg 以下 " value =" 98 "> 125kg 以下 </ option > < option label =" 150kg 以下 " value =" 97 "> 150kg 以下 </ option > < option label =" 175kg 以下 " value =" 96 "> 175kg 以下 </ option > < option label =" 200kg 以下 " value =" 95 "> 200kg 以下 </ option > < option label =" 225kg 以下 " value =" 94 "> 225kg 以下 </ option > < option label =" 250kg 以下 " value =" 93 "> 250kg 以下 </ option > < option label =" 275kg 以下 " value =" 92 "> 275kg 以下 </ option > < option label =" 300kg 以下 " value =" 91 "> 300kg 以下 </ option > </ select > < p > この セレクト 内容 で 91 を 選択 し た とき は </ p > < p > この セレクト 内容 で 92 を 選択 し た とき は </ p > < input type =" hidden " name =" product _ id " value =""> < input type =" hidden " name =" category _ id 1 " value =""> </ form > < script type =" text / javascript "> function ch () { // セレクト ボックス の 値 を 取得 var sentaku = document .s elbox . omosa . value ; // 比較 し て input type =" hidden " に 値 を 代入 switch ( sentaku ) { case " 91 ": document .s elbox . product _ id . value = " 27 /"; document .s elbox . category _ id 1 . value = " 102 "; break ; case " 92 ": document .s elbox . product _ id . value = " 26 /"; document .s elbox . category _ id 1 . value = " 103 "; } // alert で input の value を 確認 alert ( document .s elbox . product _ id . value ); alert ( document .s elbox . category _ id 1 . value ); } </ script > </ body > </ html > 
> oshieteyo 649 さん 2016 / 8 / 613 : 20 : 03 > Movable Type Pro version 4 . 27 - ja で 行間 を 狭く する 方法 を 教え て ください 。 これ だけ しか 開示 でき ない 場合 は 、 フォント サイズ を 小さく する 事 くらい だ と 思い ます 。 
お はこん ばん に ち ゎ o (＾－＾＊ ■ ■ ■ リアルタイム で 監視 ■ ■ ■ 監視 し たい 変数 が 、 どういう 使わ れ 方 を し て いる の に より ます が 、 大抵 の 場合 は 、 その 変数 が 変更 さ れる コード が 書か れ て いる 位置 で 監視 でき ます 。 まず 、 変数 の 値 を 表示 する ため の ブロック を 、 HTML で 適当 な 位置 に 用意 し ます 。 style 属性 で 「 position : fixed 」 を 使え ば 、 変数 の 表示 を 左上 に 固定 でき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < div id =" variable _ view " style =" position : fixed ; left : 0 px ; top : 0 px ; z - index : 9999 ;" ></ div > ─ ─ ─ ─ ─ ─ ─ ─ / あと は 、 Java script の コード で 、 変数 が 変更 さ れる コード が 書か れ た 場所 で 、 / ─ ─ ─ ─ ─ ─ ─ ─ document . getElementById (" varialbe _ view "). innerHTML = 変数 ; ─ ─ ─ ─ ─ ─ ─ ─ / これ で 、 リアルタイム で 変数 の 変化 が 監視 でき ます 。 ■ ■ ■ 確認 し たい とき だけ 監視 ■ ■ ■ リアルタイム で 監視 する 必要 が ない の で あれ ば 、 Google Chrome や FireFox の 開発者 ツール で も 、 変数 の 値 を 確認 でき ます 。 Google Chrome で あれ ば 、 [ F1 2 ] キー で 開発者 ツール を 開い た あと 、 いちばん 上 の メニュー で 「 source 」 の タブ を 開け ば 、 「 Watch 」 っていう 欄 が 見つかる ので 、 その 「 Watch 」 の タブ を 開き ます 。 そこ に は 、 ページ で 使わ れ て いる 変数 の 一覧 が 、 階層 ツリー 状 に 表示 さ れ て いる ので 、 監視 し たい 変数 を 探し ましょ う 。 監視 し たい 変数 が そこ に ない 場合 は 、 「 Watch 」 欄 の 上側 に ある 「+（ add expression ） 」 の ボタン から 、 監視 し たい 変数 を 追加 し ましょ う 。 「 Watch 」 欄 に 表示 さ れ て いる 変数 は 、 リアルタイム で 値 の 更新 は さ れ ませ ん 。 欄 の 上側 に ある 更新 ボタン を 押し た とき だけ 、 その 表示 値 が 更新 さ れ ます 。 
コード の 初歩 的 な 間違い が たくさん あり ます 。 html , JavaScript の 勉強 を し て 修正 し て ください 。 
無償 という こと なら IDE （ 統合開発環境 ） ・ Visual Studio 2015 Community ・ netBeans ・ Eclipse Editor ・ vi ・ Emacs ・ Atom ・ SAKURA Editor ・ EmEditor Free 好き 好き も ある ので 気に入っ た もの で いい と 思い ます 。 自分 的 に は Windows の 「 メモ帳 （ Notepad ） 」 は あまり おすすめ し ませ ん 。 HTML の 文字コード は 「 UTF-8 」 が 基本 に なっ て き て ます が 、 「 メモ帳 」 で 「 UTF-8 」 で 保存 する と 必ず BOM （ Byte Order Mark 」 という もの が 先頭 に つき 、 これ を オプション で 解除 でき ませ ん 。 「 UTF-8 」 自体 BOM は 不要 な 仕様 で 誤動作 の 原因 に なる 場合 が あり ます 。 http:// www .s olidpanda . com / book / article / 944 / あと 、 エディタ として も 「 メモ帳 」 の 機能 は 貧弱 です 。 「 正規表現 」 で 検索 ・ 置換 も でき ない 。 行番号 の 表示 も ジャンプ も でき ない 。 無償 で 使える エディタ が ある のに 、 あえて 「 メモ帳 」 を 使う 理由 は ない と 思い ます 。 
表示 し て ソース を 確認 し た 際 の この 部分 と は 、 < script >～</ div > の 部分 が すべて ソース 内 に 存在 し ない 状況 な の でしょ う か 。 そう なる と 、 ここ の コード が 悪い の では なく 、 $ arrRet . category _ image に 値 が 設定 さ れ なく なっ て いる こと が 原因 に なり ます ので 、 その 原因 を 特定 し なく て は いけ なく なり ます 。 
消す こと だけ を 考える の でし たら tr . append ('< td >' + '< label class =" hiduke '+ v +'">'+$("# tekisuto "). val ()+'</ label >' + '< input type =" button " id =" sakujo " value =" 削除 " class =" sakujo '+ v +'"></ td >'); 上 の よう に ↑ 書か れ て いらっしゃる 部分 を 次 の よう に ↓ 書き換えれ ば 良い だけ の よう です よ 。 tr . append ('< td >' + '< label class =" hiduke '+ v +'">'+$("# tekisuto "). val ()+'</ label >' + '< input type =" button " id =" sakujo " value =" 削除 " class =" sakujo '+ v +'" onclick ="$( this . parentNode . parentNode ). remove ()"></ td >'); ただ ， class 名 ( 連 番 の 部分 ) は ， その後 どう する の か 知り ませ ん が 。 。 。 
> study _ cat 39 さん 2016 / 8 / 1322 : 28 : 48 > jQuery は ライブラリ の 一 種 です か ？ はい 。 
ダブルクオーテーション 内 は 、 ドット じゃなくて カンマ な ん です よ ね ？ （ 少数 扱い する なら 、 CSV の 時点 で ドット に する べき だ と 思う ん だ けど ...） で 、 カンマ で ある 前提 です が 、 match を 使い 、 正規表現 で " 数値 , 数値 " を 抽出 し 、 それ を 、 数値 . 数値 に 置き換え て 作成 し 、 さらに 元 の 文字列 から 、 抽出 し た 文字列 と 、 作成 し た 文字列 を 置き換え て い ます 。 で 、 １ 行 中 に 複数 存在 する 可能性 も ある ので 、 ループ で match し なく なる まで 処理 し ます 。 var str = の 文字列 が CSV で 読み込ま れ た 文字列 の 想定 。 var str = " 10 , 12 , 30 ,\" 40 , 1235 \", 10 , 11 ,\" 1 , 234 \""; while ( 1 ){ var match _ str = str . match (/"[ 0 - 9 ]+,[ 0 - 9 ]+"/) + ""; if ( match _ str == " null ") break ; var replace _ str = match _ str . replace (/\"/ g , ""). replace (",", "."); str = str . replace ( match _ str , replace _ str ); } 
body に対して touch リスナー を セット し て いる から $$() を 使っ て いる ので quo . js を インクルード し て いる の で は ? で あれ ば touch リスナー の セットアップ そのもの も 不要 な はず HTML と セット で ない と やり たい こと が みえ ない ので この 質問 内容 で は これ が 精一杯 
年中 祭日 祝日 ノ 休暇 日 ヲ 定 ム - Wikipedia https :// ja . wikipedia . org / wiki /% E 5 % B 9 % B4 % E 4 % B 8 % AD % E 7 % A5 % AD % E 6 % 97 % A5 %... 休日ニ関スル件 - Wikipedia https :// ja . wikipedia . org / wiki /% E 4 % BC % 91 % E 6 % 97 % A5 % E3 % 83 % 8 B % E 9 % 96 % A 2 % ... 国民の祝日に関する法律 - Wikipedia https :// ja . wikipedia . org / wiki /% E 5 % 9 B % BD % E 6 % B 0 % 91 % E3 % 81 % AE % E 7 % A5 % 9 D %... 振替休日 - Wikipedia https :// ja . wikipedia . org / wiki /% E 6 % 8 C % AF % E 6 % 9 B % BF % E 4 % BC % 91 % E 6 % 97 % A5 国民の休日 - Wikipedia https :// ja . wikipedia . org / wiki /% E 5 % 9 B % BD % E 6 % B 0 % 91 % E3 % 81 % AE % E 4 % BC % 91 % ... 
for ... in で オブジェクト を 回し た 際 に 「 出 て き て しまう 」 という こと です 。 -------------------- Object . prototype . test = " test "; var myObj = { hoge : " hoge ", fuga : " fuga " }; for ( var i in myObj ) { console.log ( i + ": " + myObj [ i ]); // hoge : hoge // fuga : fuga // test : test ← } -------------------- こう なっ て 嬉しい ケース より 、 戸惑う ケース の ほう が 多い よう に 思い ます 。 Object . prototype は あらゆる オブジェクト の prototype です から 、 同じ こと が すべて の オブジェクト で 起こり 得 ます ので 、 危険 性 が 高い 拡張 です 。 もちろん 、 こうした 状況 下 で あっ て も 、 ( 1 ) 自身 の プロパティ か どう か を チェック for ( var i in myObj ) { if ( myObj . hasOwnProperty ( i )) { console.log ( i + ": " + myObj [ i ]); } } ( 2 ) Object . keys を 使用 for ( var i = 0 , k = Object . keys ( myObj ); i < k. length ; i ++) { console.log ( k [ i ] + ": " + myObj [ k [ i ]]); } など など 、 プロトタイプ チェーン を 無視 する よう に すれ ば test は 列挙 さ れ ませ ん が 、 危険 な 橋 を 渡っ て いる こと に 変わり は 無い と 思い ます ので 、 私 個人 も Object . prototype の 拡張 は 避ける べき という 立場 でし た 。 ただし 、 現在 で は 、 オブジェクト に プロパティ を 定義 する 際 、 for ... in など で 列挙 さ れる か どう か を 含め て 設定 する こと が でき ます ので 、 上手 に 使え ば 危険 性 は 和らぎ ます 。 -------------------- Object . defineProperty ( Object . prototype , " test ", { value : " test ", enumerable : false }); var myObj = { hoge : " hoge ", fuga : " fuga " }; for ( var i in myObj ) { console.log ( i + ": " + myObj [ i ]); // hoge : hoge // fuga : fuga } -------------------- この あたり を 理解 し て 使う 分 に は 、 まぁ いい の か な と 思い ます 。 もちろん 、 自分 以外 が 開発 に 携わる よう な 場合 に は 、 注意 が 必要 でしょ う 。 
cwin は グローバル変数 で 間違い あり ませ ん 。 そのうえで 、 function ( cwin ){ } の cwin を 変数 名 を 変え て み て ください 。 グローバル変数 の 名称 と 、 ローカル 変数 の 名称 （ function の 引数 ） が 同じ 名称 に なっ て い ます ので 、 予期 せ ぬ 動作 を し て いる 可能性 が あり ます 。 
> ikaros 2016 さん 2016 / 8 / 421 : 02 : 07 > 何 か お 心 あたり あり まし たら ご 協力 し て いただき たい です 。 自分 で 作る の なら 画像 が 何 枚 増えよ う と 料金 は 変わら ない ので 、 何 か 勘違い し て いる と 思い ます 。 
目的 と し て いる もの が できる か どう か 、 わかり ませ ん が 、 フリーソフト 9 VAe （ きゅう べ え ） を 使え ば 以下 の こと が でき ます 。 １ ． イラストレータ で 作成 し た SVG グラフ を 読み込め ます 。 ２ ． 自由自在 に 動かす こと が でき ます 。 単純 な マスク だけ で なく 、 線 が 伸び て いく とか 、 線 の 太 さ や 色 が 変わる とか 自由自在 に 動かせ ます 。 ３ ． 作成 し た アニメ を 、 HTML5 の 規格 で ある SVG アニメーション 出力 する こと が でき 直接 ブラウザ で 再生 でき ます 。 Windows 版 （ 9 va - win ） 、 Mac 版 （ 9 va - mac ） 、 ラズベリーパイ 版 （ 9 va - pi ） が あり ます 。 ■ ソフト の 入手 と 使用 法 は こちら 無料 ソフト で アニメ を 作っ て みよ う （ 9 VAe きゅう べ え ） http:// qiita . com / danjiro / items / 253 e 5 a 33 a 38599098274 イラスト を 読み込ん で アニメ を 作っ た 例 が こちら 「 9 VAe きゅう べ え 」 で 絵 を 描か ず に 作れる GIFアニメ http:// qiita . com / danjiro / items / 7 fa 584 a 4336 cda 9 c 0 a 05 
{ keyword :" カレー ", application Id :"", imageFlag :" 1 "}, を { keyword : keyword , application Id :"", imageFlag :" 1 "}, で 行け そう です が 。 もし 、 うまく 動作 し ない よう でし たら 、 {" keyword ": keyword ," application Id ":""," imageFlag ":" 1 "}, として み て ください 。 
今 の ソース を 書い て ください 。 この 情報 だけ で は わかり にくい どころか 意味 が 全く 分かり ませ ん 。 
ルート n の 整数 部分 を 返す プログラム です ね 。 オーダー は 十分 に 大きい データ が 入力 さ れ た 時 の こと を いい ます から 、 オーダー は 「 n - ルート n 」 に なり ます 。 項 が 一番 大きく なる n を 使っ て 「 O ( n )」 と 表し ます 。 
> karaage 617 さん 2016 / 8 / 415 : 07 : 57 > JS について 無知 な ため 、 詳しい かた いらっしゃい まし たら 教え て ください 。 無知 で 学習 する と 言う 選択 を し ない 場合 は 、 外注 する しか 有り ませ ん 。 
サイ 本 （ 第 5 版 ） だ と 9. 3 項 で クラス の 説明 が 出 て い まし た が 、 -------------------- var Par = function ( x , y ) { // インスタンス プロパティ // インスタンス を 生成 し た 際 に コンストラクタ によって 初期化 // 各 インスタンス が 自身 の プロパティ として 持つ this . x = x ; this . y = y ; } // クラス プロパティ // コンストラクタ そのもの が 持っ て いる プロパティ Par . MAX = 5 ; Par . MIN = 0 ; // インスタンス 生成 var chi 1 = new Par ( 2 , 3 ); var chi 2 = new Par ( 1 , 2 ); // 同じ 名前 の プロパティ で も 結果 が 異なる // インスタンス ごと に プロパティ を 持っ て いる ため console.log ( chi 1 . y ); // 3 console.log ( chi 2 . y ); // 2 // インスタンス 自身 も MAX という プロパティ は 持っ て ない 、 // プロトタイプ チェーン を 辿っ て も 見つから ない console.log ( chi 1 . MAX ); // undefined // 値 が 必要 な とき は コンストラクタ から アクセス する console.log ( Par . MAX ); // 5 -------------------- 区別 として は こういう こと な の か な と 思い ます 。 
getEx 関数 を 見る 限り 、 > aaa () > . then ( bbb ()) > . then ( getEx ()) > . then ( ccc ()) ↓ aaa () . then ( bbb ) . then ( getEx ) . then ( ccc ) では ない の でしょ う か ？. then に 渡す の は 関数オブジェクト です ので 。 もし bbb や ccc が 関数オブジェクト を return する の で あれ ば 話 は 別 です が 、 少なく て も getEx について は 、 promise を return し て いる ので 、 . then に 渡す 前 に 実行 し て は いけ ない か と 思い ます 。 
< script type =" text / javascript " src ="../ js / jquery . min . js "></ script > < script type =" text / javascript " src ="../ js / js _ main . js "></ script > こんな 感じ に なっ て いる か と 思い ます が 、 実際 に どの よう に 書い て いる か と 、 できれ ば 、 html の フォルダ の 場所 、 js ファイル の 場所 を 記載 し て いただけれ ば 、 なお わかり やすい です 。 
お はこん ばん に ち ゎ ♪ 質問 の コード を まるまる コピー し て 、 以下 の コード で 実験 し まし た 。 ▼ ─ ─ ─ ─ ─ ─ ─ ─ < input type =" date " id =" ex " onChange =" ex ()"> < script type =" text / javascript "> function ex (){ alert (" 日付 が 変更 さ れ まし た ")} </ script > ─ ─ ─ ─ ─ ─ ─ ─ ▲ その 結果 、 以下 の ブラウザ すべて で 、 日付 を 変える と アラート が 表示 さ れ まし た ヽ ( ・ ω ・ ＊ ▼ ─ ─ ─ ─ ─ ─ ─ ─ ・ IE11 ・ IE8 ～ 10 （ IE11 の エミュレーション ） ・ Chrome ・ Opera ・ FireFox ・ Comodo IceDragon ・ Windows Safari （ 開発 終了 の ため 旧 バージョン ） ─ ─ ─ ─ ─ ─ ─ ─ ▲ コード を 見 た 感じ で も 、 まったく 問題 は 見つかり ませ ん 。 Java script の 「 ;」 は 、 １つ １つ の 命令 を 区切る ため の もの な ので 、 実行 する コード が alert () のみ の 関数 内 で 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ function ex (){ alert ("～") } ─ ─ ─ ─ ─ ─ ─ ─ ▲ の よう に 「 ;」 を つけ て い なく て も 、 まったく 問題 なし です 。 HTML の onChange について も 、 「 on change 」 と 小文字 で 書く の が 好ましい です が 、 「 onChange 」 で も 間違い で は ない し … < script > タグ の 「 script 」 で スペル ミス とか し て ない です か ？ 終了 タグ の 「 /」 を わすれ て ▼ ─ ─ ─ ─ ─ ─ ─ ─ < script > ～ < script > ─ ─ ─ ─ ─ ─ ─ ─ ▲ って なっ て いる とか … ； ・ ω ・ ) それ 以外 だ と 、 「 ex 」 っていう 識別子 を 他 で 重複 し て 使っ て いる と か は 無い でしょ う か 。 単純 に ▼ ─ ─ ─ ─ ─ ─ ─ ─ < input type =" date " id =" ex " onChange =" ex ()"> < script type =" text / javascript "> function ex (){ alert (" 日付 が 変更 さ れ まし た ")} </ script > ─ ─ ─ ─ ─ ─ ─ ─ ▲ の コード だけ なら 正常 に 動い て いる ので 、 ほか の 部分 の コード に 問題 が あっ て 阻害 さ れ て いる 可能性 が あり ます 。 正常 に 動作 し ない コード 全体 か 、 実際 の URL を 教え て もらえ たら 、 もう すこし 具体 的 な 原因 が 探れる と 思う の だ けど … 
お はこん ばん に ち ゎ （＾－＾＊ Java script の エラー は 、 ページ を プレビュー する Web ブラウザ で そのまま チェック でき ます よ ♪ コーディング し た ページ を IE または Chrome で プレビュー すれ ば 、 キーボード の F1 2 キー で 開発者 ツール が 開き ます 。 開発者 ツール を 開い て いる 間 は 、 Java script に スペル ミス や 括弧 の 閉じ 忘れ など の エラー が ある と 、 赤い 文字 で エラー コンソール が 表示 さ れ て スクリプト の 実行 が 停止 し ます 。 エラーメッセージ は 、 Chrome は 英語表記 な ので 、 日本語 で エラー の 内容 が 表示 さ れる IE の 方 が 分かり やすい です ね 。 ブラウザ の 開発者 ツール は 、 スクリプト の 処理 を 好き な ところ で 停止 さ せ て 、 変数 の 値 を チェック 出来 たり 、 メモリ の 消費 状況 を チェック し たり も できる ので 、 エラー や 動作 の チェック に は かなり 使え ます 。 エラー チェック だけ なら ほんと 簡単 で 、 F1 2 で 開発者 ツール を 開く だけ で 、 エラー が あれ ば 赤く [ x ] マーク が 表示 さ れ て エラー コンソール が でる ので 、 すぐ 分かり ます よ ＊ ゜ ▽＾) b ' ■ ■ ■ エラー の サンプル ■ ■ ■ エラー の サンプル として 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ function myFunc ( value ){ if ( ! value ){ alert ( " 値 が 指定 さ れ て い ませ ん " ); } ─ ─ ─ ─ ─ ─ ─ ─ ▲ の よう に 、 わざと if () の 括弧 を 閉じ 忘れ て いる コード を 記述 し た とき 、 ブラウザ の 開発者 ツール で 表示 さ れる エラー を 提示 し ます ♪ [ Chrome の 場合 ] Uncaught SyntaxError : Unexpected end of input ------ ○. html : 行 数 
サーバ 側 に ある データ でし たら 、 ajax を 使用 し て 読み込み 、 配列 化 し ます 。 [ JavaScript ] /** * CSV 読み込み 処理 */ function loadCsv (){ // 変数 を 初期化 csv = []; // Ajax で 読み込み var httpObj = new XMLHttpRequest (); httpObj . open (" GET ", " data / 1 . csv ", true ); httpObj . onreadystatechange = function (){ if ( httpObj . ready State == 4 ) { // 読み込み 成功 var csv = make ArrayList ( httpObj . response Text ); // csv が 読み込ん だ CSV データ の 二 次元 配列 に なっ て いる ので 、 この あと に 必要 な 処理 を 記述 する console.log ( csv ); } } httpObj .s end ( null ); } /** * CSV から 配列 生成 */ function make ArrayList ( data ){ // 配列 var result = []; // 文字列 → 行 単位 に 変換 var list = data .s plit ("\ r \ n "); // １ 行 を 配列 に 変換 for ( var i = 0 ; i < list . length ; i ++){ result . push ( list [ i ]. split (",")); } return result ; } [ html ] <! DOCTYPE html > < html lang =" ja "> < head > < meta charset =" UTF-8 "> < script type =" text / javascript " src =" javascript / script . js "></ script > </ head > <!-- とりあえず 、 ページ 表示 時 に CSV を 読み込ん で みる --> <!-- ボタン を 押し た とき に とか の 時 は 、 onclick =" loadCsv ();" とか に する --> < body onload =" loadCsv ();"> </ body > </ html > 
event オブジェクト に は 「 どの ボタン を 押し た か 」 という 情報 が 無い ので 、 どこ か外 に その 情報 を 持っ て おく こと に なる か と 思い ます 。 グローバル変数 で も 何 でも いい の です が 、 > var recognition ja = new webkitSpeechRecognition ();// 音声 機能 ↓ var recognition ja = new webkitSpeechRecognition ();// 音声 機能 recognition ja . tButton = null ; ちょうど 使え そう な オブジェクト が ある ので 、 押さ れ た ボタン を 参照 する ため の プロパティ を 用意 し て おき 、 > < button value =" 音声 入力 " class =" record _ btn " onClick =" record ()" type =" button "> 音声 入力 </ button > ↓ < button value =" 音声 入力 " class =" record _ btn " onClick =" record ( this )" type =" button "> 音声 入力 </ button > ボタン を 押し た とき に 押し た ボタン が イベントハンドラ に 渡る よう に し て 、 > function record () { > recognition ja .s tart (); > } ↓ function record ( button ) { recognition ja . tButton = button ; recognition ja .s tart (); } 録音 開始 前 に 押さ れ た ボタン を その プロパティ に 入れ て おき 、 > $(". voice _ text "). val ( text ); ↓ $( recognition ja . tButton ). prev (). find (" input "). val ( text ); その プロパティ から ボタン を 特定 、 目的 の input 要素 に 書き込む という 処理 で 試し て み て は いかが でしょ う か 。 
> ivry 1994 さん 2016 / 8 / 1613 : 00 : 01 > 方法 を 教え て いただける 方 のみ お答え いただける と 助かり ます 良い ですよ。 詳しく 書い て リクエスト で も あれ ば 、 そちら に 回答 を 付け ます 。 
sample : auto - scroll in an element - JSFiddle https :// jsfiddle .net / sii _ side / d6 1 nqoLc / HTML要素 に は scrollTop という プロパティ が あり 、 ここ から スクロール 量 を 設定 する こと が でき ます 。 
プロパティ の 追加 は Object . defineProperty を 使い ます 。 複数 追加 する とき に 使える Object . defineProperties も あり ます 。 例えば 、 o オブジェクト に foo プロパティ を 追加 する 場合 は 、 -------------------- var o = Object . create ( Object . prototype , { name : { value : " aaa ", enumerable : true }, bar : { value : function () { return this . name }, enumerable : true } }); Object . defineProperty ( o , " foo ", { value : " foooo ", enumerable : true }); console . dir (o) ; -------------------- 一 例 として この よう な 処理 と なり ます 。 なお 、 console.log や console . dir 、 あるいは for ... in で 列挙 し た 際 に プロパティ が 表示 さ れる よう 、 enumerable を true に し て い ます 。 継承 は 最初 の 生成 と 同じ で Object . create です 。 第 1 引数 が 、 生成 さ れる オブジェクト の プロトタイプ オブジェクト に なり ます ので 、 -------------------- var p = Object . create ( o , { hoge : { value : " hogehoge ", enumerable : true }, fuga : { value : " fugafuga ", enumerable : true } }); -------------------- この よう な 処理 を 加える と 、 o が p の prototype と なり ます から 、 console.log ( p . bar ()); // aaa console.log ( p . foo ); // foooo p 自身 の プロパティ で は ない bar や foo を 、 プロトタイプ チェーン により 参照 する こと が できる よう に なり ます 。 
◎ 対処 法 １ ( 対処 法 と 言う か ピリオド の 有無 に 関わら ず 本 来こう 書く べき ) < script > var a = document . forms [" fm "]. elements [" hoge . moge "]. value ; alert (' The text you inputted is ' + a ); </ script > ◎ 対処 法 ２ < script > var a = document . fm [" hoge . moge "]. value ; alert (' The text you inputted is ' + a ); </ script > 
リクエスト 感謝 （ ＊ ＾ 人 ＾ ＊ ） kuro _ neko _ g _ san さん 、 いつも 回答 楽しく 拝見 し て ます よぅ ♪ ▼ ─ ─ ─ ─ ─ ─ ─ ─ ^ で 集合体 の 否定 と なっ て 、 スペース 、 タブ 、 全角 スペース 以外 が 存在 し たら マッチ する という 認識 で よろしい でしょ う か 。 ─ ─ ─ ─ ─ ─ ─ ─ ▲ です です ♪ その 通り っ ' d (＾ ー ＾ ＊ ▼ ─ ─ ─ ─ ─ ─ ─ ─ var ok = value . match (/[^\ s \ t ]/); ─ ─ ─ ─ ─ ─ ─ ─ ▲ って やれ ば 、 value に \ s , \ t , 全角 スペース 以外 の 文字 が １ 文字 で も ある と 、 フラグ の ok が true に なり ます 。 な ので 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ if ( ! ok ){ ～ } ─ ─ ─ ─ ─ ─ ─ ─ ▲ は 、 ok じゃ ない とき に 実行 さ れ ます 。 
私 は そういう 統計学 的 な 関数 の 中身 など 知り ませ ん が JavaScript で 実装 し たい の でし たら とりあえず の 例 に なる か と ↓ 。 「 Compute the quantile function for the normal distribution . - like Excel NORMINV · GitHub 」 https :// gist . github . com / kmpm / 1211922 / ↑ ただ ， ， ， この スクリプト は いくつ か 間違っ て い ます 。 まず 127 行 目     127 // normInv ( 0 . 2 , 3 . 5 , 0 , 707106781 ); この 関数 名 と 引数 の 数 が 違っ て い ます 。 例えば // normInv ( 0 . 2 , 3 . 5 , 0 , 707106781 ); ↓ 変更 例 ↓ normsInv ( 0 . 997862568 , 30 , 1 . 4 ); ↓ その 検証 例 ↓ alert ( normsInv ( 0 . 997862568 , 30 , 1 . 4 )); の よう に 変更 し た 上 で さらに 81 行 目     81          r = Math .S qrt (- Math . log ( r )); この Math .S qrt は Math .s qrt に 修正 す べき です 。 上 の よう に 変更 すれ ば Excel と " 近い 値 " が 出る こと が 確認 できる と 思い ます 。 ※ 少し 違う 値 に なる の は なぜ か わかり ませ ん 。 
複数 の 空白 や タブ を 考慮 し た 場合 、 入力 さ れ た 文字 から 、 空白 、 全角 空白 、 タブ を 削除 し た 時 の 長さ が 0 の 場合 に エラー と する 処理 に する と 、 いい か と 思い ます 。 // 入力 文字列 を 取得 var str = document .fr m . txt Name. value ; // チェック の ため に 、 タブ (\ t )、 スペース (\ s )、 全角 スペース （ ） を 削除 var check _ str = str . replace (/[\ t \ s ]/ g , ''); if ( str == ""){ // 名前 未 入力 } else if ( check _ str . length == 0 ){ // チェック の 文字 が 長さ 0 な ので 、 スペース 系 のみ だっ た と 判断 。 alert (" match !"); } 
おそらく 、 var stop = document . getElementById (" stop "); が 、 window .s top () var reset = document . getElementById (" reset "); が 、 form . reset あたり と 混同 さ れ て しまっ て いる 可能性 が あり ます 。 var o _ stop var o _ reset として 実行 し た ところ 、 動作 し まし た 。 （ IE11 ） 変数 名 は 予約語 や window オブジェクト の メソッド や プロパティ 、 document オブジェクト の メソッド 、 プロパティ と 同一 の 名前 は やめ て おい た 方 が 吉 です 。 
お はこん ばん に ち ゎ （＾－＾＊ target 要素 の style 属性 に 指定 さ れ て いる 枠 線 で あれ ば 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ Event . target . style. border Color ─ ─ ─ ─ ─ ─ ─ ─ ▲ で 取得 でき ます 。 CSS など で 設定 さ れ た 枠 線 を 含める の で あれ ば 、 getComputedStyle () を 使い ます 。 getComputedStyle () は 、 ブラウザ によって 実装 が 異なっ て いる ので 、 注意 が 必要 です 。 ▼ ─ ─ ─ ─ ─ ─ ─ ─ [ Chrome , Opera など の モダン ブラウザ ] window . getComputedStyle ( 要素 , "" ). border Color または document . defaultView . getComputedStyle ( 要素 , "" ). border Color [ Safari 系 ] document . defaultView . getComputedStyle ( 要素 , "" ). border Color [ IE ] 要素 . current Style. border Color ─ ─ ─ ─ ─ ─ ─ ─ ▲ これら に 注意 し て 以下 の よう に コード を つくる と 、 一般 的 な ブラウザ の ほぼ すべて で 、 変数 border Color に 取得 する こと が でき ます ' d ( ・ ω ・ ＊ ▼ ─ ─ ─ ─ ─ ─ ─ ─ var style = Event . target . current Style || document . defaultView . getComputedStyle ( Event . target , "" ); var border Color = style. border Color ; ─ ─ ─ ─ ─ ─ ─ ─ ▲ 以下 、 実際 的 な ソースコード の 実施 例 です ＊＾－＾) ﾉ ⌒★ ▼ ─ ─ ─ ─ ─ ─ ─ ─ <!-- ─ ─ スタイルシート ─ ─ --> < style type =" text / css "> div { border : solid 1 px # fe2 ; } </ style > <!-- ─ ─ 枠 線 ブロック ─ ─ --> < div onclick =" alertColor ( event )"> テスト </ div > <!-- ─ ─ スクリプト ： 枠 線 を 取得 ─ ─ --> < script type =" text / javascript "> function alertColor ( evt ){ var target = evt . target || evt .s rcElement ; var style = target . current Style || document . defaultView . getComputedStyle ( target , "" ); var border Color = style. border Color ; alert ( border Color ); } </ script > ─ ─ ─ ─ ─ ─ ─ ─ ▲ 
え えと 、 質問 の 内容 通り に でき て いる 気 が する の です が ... < script > var test = document . getElementById (" test "); window . onload = function (){ tes t.i nnerHTML =" after "; </ script > test は グローバル変数 です 。 tes t.i nnerHTML =" after "; で 、 ローカル 関数 内 で 、 グローバル変数 test を 参照 し て ます 。 なにか 問題 ある ん でしょ う か ？ 
奇数 for i in ` find - name '*. jpg ' | sed ' s @./@@' | sort - r `; do mv ` printf "$ i % 03 d .jpg \ n " $(( ${ i % .jpg } * 2 - 1 ))`; done 偶数 for i in ` find - name '*. jpg ' | sed ' s @./@@' | sort - r `; do mv ` printf "$ i % 03 d .jpg \ n " $(( ${ i % .jpg } * 2 ))`; done 
タブ の 作り が どう なっ て いる か は わかり ませ ん が 、 form を ２つ に 分け て 、 hideden フィールド に 識別 を 入れ て み て は どうでしょう か 。 [ HTML ] 便宜上 、 div を タブ として 、 < div class =" tab 1 "> < form name =" fr m1 " action =" se arc h. php " method =" POST "> < input type =" hidden " name =" type " value =" 1 "/> < input type =" select " name =" sle "> < option value =" 1 "> ほげ </ option > ・ ・ ・ </ select > < input type =" submit " value =" 検索 "/> </ form > </ div > < div class =" ta b2 "> < form name =" frm 2 " action =" se arc h. php " method =" POST "> < input type =" hidden " name =" type " value =" 2 "/> < input type =" select " name =" sle "> < option value =" 1 "> ほげ </ option > ・ ・ ・ </ select > < input type =" submit " value =" 検索 "/> </ form > </ div > [ PHP ] if ( isset ($_ POST [' type ')){ if ($_ POST [' type '] == " 1 "){ /* 検索 し て 、 １ タブ の 方 に データ 反映 */ } else { /* 検索 し て 、 ２ タブ の 方 に データ 反映 */ } } 
タブ の 作り が どう なっ て いる か は わかり ませ ん が 、 form を ２つ に 分け て 、 hideden フィールド に 識別 を 入れ て み て は どうでしょう か 。 [ HTML ] 便宜上 、 div を タブ として 、 < div class =" tab 1 "> < form name =" fr m1 " action =" se arc h. php " method =" POST "> < input type =" hidden " name =" type " value =" 1 "/> < input type =" select " name =" sle "> < option value =" 1 "> ほげ </ option > ・ ・ ・ </ select > < input type =" submit " value =" 検索 "/> </ form > </ div > < div class =" ta b2 "> < form name =" frm 2 " action =" se arc h. php " method =" POST "> < input type =" hidden " name =" type " value =" 2 "/> < input type =" select " name =" sle "> < option value =" 1 "> ほげ </ option > ・ ・ ・ </ select > < input type =" submit " value =" 検索 "/> </ form > </ div > [ PHP ] if ( isset ($_ POST [' type ')){ if ($_ POST [' type '] == " 1 "){ /* 検索 し て 、 １ タブ の 方 に データ 反映 */ } else { /* 検索 し て 、 ２ タブ の 方 に データ 反映 */ } } 
http:// query 700 . hatena blog . com / entry / 2016 / 04 / 12 / 214826 adobe Flash Player の 設定 を 確認 し て ください 。 
単純 な 例 ( いかに 単純 化 する か の コツ 例 ) を 。 ◎ 「 ga me. html 」 ↓ <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > じゃんけん </ title > < script type =" text / javascript " src =" ga me. js "></ script > </ head > < body > じゃんけん < br > < input type =" button " value =" グー " onclick =" janken ( 0 )"> < input type =" button " value =" チョキ " onclick =" janken ( 1 )"> < input type =" button " value =" パー " onclick =" janken ( 2 )"> </ body > </ html > ◎ 「 ga me. js 」 ↓ var hands = [" グー "," チョキ "," パー "," グー "]; function janken ( n ){      alert (" あなた … " + hands [ n ] + "\ n "          + " PC … " + hands [ n + 1 ] + "\ n \ n "          + " あなた の 勝ち です ！"); } 
table を どの よう に 追加 し て いる の か に も よる けど document . writh で html に 書き出し て いる なら class 部分 を 任意 の 文字列 変数 に し て class 名 を 代入 すれ ば いい の で は どう やっ て 表示 さ せ たい の か 解ら ない の これ が 精一杯 
お はこん ばん に ち ゎ o (＾ ー ＾ ＊ ▼ ─ ─ ─ ─ ─ ─ ─ ─ document .new 02 _ 1 . isbn . style. background Color = " peachpuff "; alert (" ISBN を 入力 し て 下さい 。 "); ─ ─ ─ ─ ─ ─ ─ ─ ▲ の よう に 処理 を 実行 し た とき 、 処理 の 順序 として は 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ [ 背景色 の 指定 値 を 変更 ] . . ↓ [ アラート 表示 ] ─ ─ ─ ─ ─ ─ ─ ─ ▲ っていう 順番 で 行わ れ ます が 、 「 背景色 の 指定 を 変更 」～「 アラート 表示 」 まで は 、 タイムラグ が ほとんど なく 、 ほぼ 同時 です 。 いっぽう 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ document .new 02 _ 1 . isbn . style. background Color = " peachpuff "; ─ ─ ─ ─ ─ ─ ─ ─ ▲ の 時点 で 背景色 の 「 指定 値 」 は 変更 さ れ ます が 、 指定 値 が 変更 さ れ た あと 、 その 指定 値 に従って 「 描画 （ レンダリング ） 」 の 処理 を 行う ので 、 背景色 の 指定 値 が 変更 さ れ て から 、 指定 さ れ た 背景色 が 実際 に 表示 に 反映 さ れる まで に は 、 わずか に タイムラグ が あり ます 。 その ため 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ [ 背景色 の 指定 値 を 変更 ] . . │ . . . . . . ↓ . ( 描画 ) . . [ アラート 表示 ] . . ↓ [ 背景色 の 指定 値 が 反映 さ れる ] ─ ─ ─ ─ ─ ─ ─ ─ ▲ っていう 順番 で それぞれ の 動作 が 完了 する ので 、 背景色 が 変わる 前 に アラート が 表示 さ れ て い ます ' d ( ・ ω ・ ＊ 背景色 が 画面 に 反映 さ れ た こと を 検知 し て 、 アラート を 出せれ ば いい の だ けど 、 画面 へ の 描画 完了 を 検知 する 方法 は 今 の ところ あり ませ ん 。 背景色 が かわっ て から アラート を 出す 、 いちばん 簡単 な 方法 は 、 setTimeout () で アラート を 遅らせる 方法 です 。 どれ くらい で 描画 が 完了 する か は ブラウザ や 閲覧 環境 の 描画 能力 に 依存 する ので 特定 は でき ませ ん が 、 < input > の 背景色 の 変更 なら 、 どの ブラウザ で も ほんの 一瞬 だ と 思い ます 。 0 . 1 秒 も 遅らせれ ば 充分 すぎる と おもい ます ♪ ▼ ─ ─ ─ ─ ─ ─ ─ ─ document .new 02 _ 1 . isbn . style. background Color = " peachpuff "; setTimeout ( function (){ alert ("～") }, 100 ); ─ ─ ─ ─ ─ ─ ─ ─ ▲ 
IE11 で 確認 し て み まし た 。 コメント 行 （<!-- -->） について 、 コメント し て 認識 は し て いる よう です 。 開発者 ツール で も エラー と は なっ て い ませ ん でし た 。 （ 他 の ブラウザ に つて は 未 確認 ） です が 、 自分 の 場合 は 、 外部 ファイル で は 、 JS コメント と し て い ます （/* */,//） 理由 として は 、 ・ JavaScript のみ 記載 の ファイル な ので 。 ・ コメント か どう か 、 ファイル 単位 で 見 た 時 に 、 混乱 し ない よう に っていう よう な 理由 です 。 HTML ファイル 内 に 記述 する 場合 でも 、 <!-- script タグ の 外 なら HTML の コメント --> < script type =" text / javascript "> /* 中 なら 、 JavaScript の コメント */ </ script > と 明確 に 分け て 使っ て い ます 。 こちら は 特に 、 コメント を 混ぜ ちゃう と 見づらく なる ので 。 
お はこん ばん に ち ゎ （＾－＾＊ appendChild () で 追加 する とき って 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ 要素 . appendChild ( document . createTextNode ( "～" ) ); ─ ─ ─ ─ ─ ─ ─ ─ ▲ みたい に し て い ます か ？ document . createTextNode () は 、 その メソッド 名 の 通り 、 引数 に 指定 し た 文字列 は 「 HTML コード 」 で は なく 、 「 テキスト 」 として そのまま 表示 できる よう に コード を 生成 し ます 。 な ので 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ document . createTextNode (" 果物 & gt ; リンゴ ") ─ ─ ─ ─ ─ ─ ─ ─ ▲ って やっ て しまう と 、 「 果物 & gt ; リンゴ 」 が そのまま 表示 さ れ ます 。 内部 的 に は 、 「 果物 & amp ; gt ; リンゴ 」 っていう HTML コード が 生成 さ れ て い ます ね 。 appendChild () で テキスト ノード を 追加 する とき は 、 HTML コード に 変換 せ ず に 、 そのまま の テキスト を 指定 し ましょ う ' d ( ゜ ▽ ＾ ＊ ▼ ─ ─ ─ ─ ─ ─ ─ ─ 要素 . appendChild ( document . createTextNode ( " 果物 > リンゴ " ) ); ─ ─ ─ ─ ─ ─ ─ ─ ▲ 
> liquorice 66 さん > 他 に 似 た よう な エディタ を 実装 する に は どう いっ た 方法 が ある の でしょ う か 。 JavaScript 、 Flash 、 Flex 、 ColdFusion 、 Java 、 AcriveX 等 目的 、 予算 、 納期 、 精度 、 要件 によって 使い分け ます 。 > こう いっ た エディタ は プログラマー など 専門 の 人 に 依頼 し ない 限り 実装 は 難しい でしょ う か 。 一般的 に は プログラマー で は なく 「 専門 業者 or コンサルタント 」 が 依頼 先 です 。 自身 で 探し て も 見つけ られ ない と 思い ます 。 自作 方向 で 行く の なら 、 要件 だ し ＆ 勉強法 を 習い 素質 、 期間 が 有る 事 が 必須 に なり ます 。 > 取り急ぎ フリー や 低価格 で 入手 出来る プログラム や API の 類 が ある と 大変 ありがたい 状況 です 。 仕事 として 「 作っ て くれ or 要件 出し 」 し て くれ と 言う の なら 可能 です が 、 フルスクラッチ で 作る よう な もの な ので 探し て 出 て くる よう な もの で は あり ませ ん 。 > 呼び方 （ 通称 ） が あれ ば 教え て ください 。 ASP 
スライドショー を 具体 化 する と 、 画像 の 管理 ・ スライド アニメーション ・ 時間 が 必要 な 要素 に なり ます 。 正直 JavaScript の コード は どう でも よく て 、 メソッド 自体 は 検索 すれ ば 幾ら で も 出 て き ます 。 重要 な の は アルゴリズム ( 目的 を 達成 する まで 手順 ) で これ を いかに 上手く 組む 事 が 出来る か が 重要 です 。 ・ 画像 の 管理 2 通り の 方法 で 画像 は 管理 出来 ます 。 1 . 配列 に 画像 パス を 入れ 管理 する 2 . HTML要素 に 直接 画像 要素 を 入れ 管理 する JavaScript から 見る と どちら も 配列 を 扱う 形式 で 管理 出来 ます 。 [ 1 .] の 方法 の 場合 は 、 動的 に HTML要素 の 生成 が 必須 と なり ます 。 アルゴリズム 自体 は 多少 複雑 に なり ます が 、 経験 として とても いい と 思い ます ね 。 [ 2 .] の 方法 は 単純 に 親 要素 内 で 画像 を 整列 し て 、 スライド する だけ です 。 css である 程度 の 初期 設定 が 必要 です が 難易度 は 低い です し 、 こっち の 方 が 一般的 と 言える でしょ う 。 ・ スライド アニメーション スライドショー と 言え ば 画像 が 切り替わる 時 の スライド です ね 。 これ を 行う に も主 に 2つ の 方法 が あり ます 。 1 . CSS プロパティ を 小刻み に 切り替え て 行く 2 . CSS3 アニメーション を 利用 する 基本的 に は [ 1 .] が 一般的 です 。 ただ 対象 ブラウザ を 絞れ ば [ 2 .] の CSS3 の アニメーション を 使っ て より シンプル に する 事 が 出来 ます 。 [ 1 .] の 主 な 方法 として は タイマー で 一定 時間 経つ と 特定 の 関数 の 処理 を 繰り返さ せる 方法 で 、 その 関数 内 で は 画像 の 位置 ( top , left ) 等 の 数値 を 徐々に 変え て 行く だけ で スライド アニメーション の 完成 です 。 [ 2 .] では CSS3 の アニメーション です ので 、 画像 要素 に アニメーション の スイッチ を 組み込む だけ で 簡単 に 実装 出来 ます 。 例えば img 要素 に type =" on " と なっ て いる 場合 css で は img [ type =" on "]{〜} の プロパティ が 使わ れ ます 。 これ を 利用 し て 、 img [ type =" on "]{〜} img [ type =" off "]{〜} の 様に アニメーション する 場合 と し ない 場合 の スタイル を 定義 し て おき 、 後 は JavaScript で 要素 の type 要素 の 中身 を 切り替える だけ で アニメーション し たり 、 アニメーション し なかっ たり で 簡単 です 。 
普通 は < script type =" text / javascript "> です ね 。 ブラウザ が かしこく 解釈 し て くれる と 、 ” ” でも 大丈夫 です が 、 W3C （ HTML 、 CSS の 規格 ） でも ” text / javascript " の よう に 、 １つ で 記載 さ れ て い ます ので 、 １つ の 方 が いい か と 思い ます 。 
サーバー から の レスポンス が 多く なれ ば それなり に 遅く なり ます 。 また こう いっ た 物 は サーバー を 動かす 限り 、 サーバー の 能力 により 速度 が 変わり ます 。 PHP で も サーバー スペック が 原因 で スムーズ に 動作 し なかっ たり 等 あり ます ね 。 
おは こばん に ち ゎ ＊＾－＾) o ■ ■ ■ 現状 の コード ■ ■ ■ 現状 の コード は 、 / ─ ─ ─ ─ ─ ─ ─ ─ var hogehoge = fun c1 (); console.log ( hogehoge ); ─ ─ ─ ─ ─ ─ ─ ─ / の よう に なっ て い ます ね ' d ( ・ ω ・ ＊ fun c1 () の 中身 は / ─ ─ ─ ─ ─ ─ ─ ─ fun c1 (){ var count = 0 ; var waitfunc = setInterval ( ★, 100 ); ← 変数 waitfunc に タイマー ID を 代入 } ─ ─ ─ ─ ─ ─ ─ ─ / っていう 処理 内容 に なっ て い て 、 戻り値 として 何 も return さ れ て い ませ ん 。 な ので 、 戻り値 は 常に undefined です 。 これ を 踏まえ て 、 処理 の 流れ を 見 て みる と 、 まず 、 変数 hogehoge に fun c1 () 、 つまり undefined が 代入 さ れ ます 。 この とき 呼び出さ れ た fun c1 () の 中 で は 、 0 . 1 秒 （ 100 ミリ 秒 ） 後 に 実行 する 処理 ★ が タイマー 予約 さ れ ます 。 次に 、 console.log () によって 変数 hogehoge の 内容 undefined が ログ に 出力 さ れ ます 。 そして 、 0 . 1 秒 が 経過 し た とき に 、 タイマー 予約 さ れ て い た 処理 ★ の １ 回 目 が 実行 さ れ ます 。 この 処理 は 、 その後 も 0 . 1 秒 ごと に 計 ５ 回 実行 さ れ ます ね 。 処理 ★ で は 、 0 . 5 秒 が 経過 する と 、 ログ に " return !!" という 文字列 を 出力 し た あと 、 「 12345 」 という 数値 を 戻り として 返し ます が 、 この 戻り値 は 、 どこ に も 代入 さ れ て い ない ので 、 ただ 無名関数 function (){} の 戻り値 として 返さ れ た だけ で 、 処理 の 上 で は 存在 し て い ない の と 同じ です 。 現状 の 処理 の 流れ は 以下 の 通り です 。 / ─ ─ ─ ─ ─ ─ ─ ─ [ fun c1 () を 実行 ⇒ 戻り値 undefined ] . . ↓ [ 変数 hogehoge に fun c1 () の 戻り値 を 代入 ] . . ↓ [ 変数 hogehoge の 値 を ログ ] . . │ . 0 . 1 秒 . . ↓ [ count + 1 ] . . │ . 0 . 1 秒 . . ↓ [ count + 1 ] . . │ . ・ ・ ・ . . ↓ [ " return !!" を ログ ] ─ ─ ─ ─ ─ ─ ─ ─ / 以上 の 流れ で 、 / ─ ─ ─ ─ ─ ─ ─ ─ ログ : undefined ログ : return !! （ 0 . 5 秒 後 ） ─ ─ ─ ─ ─ ─ ─ ─ / っていう 処理 結果 に なっ て い ます 。 ■ ■ ■ wait は 不可能 ■ ■ ■ Java script の 中 で は 、 他 の 一般 的 な プログラミング で 実装 さ れる よう な 、 「 処理 を 途中 で 止め て 待機 する 」 という 手段 は いっさい 与え られ て い ませ ん 。 質問 で は 、 / ─ ─ ─ ─ ─ ─ ─ ─ var hogehoge = fun c1 (); ← ここ で 0 . 5 秒間 だけ 処理 を 停止 し て 待機 console.log ( hogehoge ) ─ ─ ─ ─ ─ ─ ─ ─ / っていう 処理 を し たい という 事 です が 、 これ は Java script で は 、 どんな コード を 組も う と 不可能 な 処理 です 。 Java script で は 、 いちど 走り出し た 処理 は 、 一連 の 処理 を すべて 完了 する まで 止まる こと は 有り ませ ん ＊ ・ ω ・ ) b ' ■ ■ ■ じゃぁ 、 どう する ？ ■ ■ ■ Java script で は 、 処理 を 止め て 待機 する こと は 不可能 な ので 、 setTimeout () を 使っ て 、 「 処理 が 走り 始める 時点 を 遅らせる 」 という 選択肢 以外 は あり ませ ん 。 今回 実行 し たい 処理 の フロー は 、 / ─ ─ ─ ─ ─ ─ ─ ─ [ 変数 hogehoge を 登場 さ せる ] . . │ ( 0 . 5 秒 後 ) . . ↓ [ " return !!" を ログ ] . . ↓ [ 変数 hogehoge に fun c1 () の 戻り値 を 代入 ] . . ↓ [ 変数 hogehoge の 値 を ログ ] ─ ─ ─ ─ ─ ─ ─ ─ / っていう 流れ な ので 、 / ─ ─ ─ ─ ─ ─ ─ ─ [ " return " を ログ ] . . ↓ [ 変数 hogehoge に fun c1 () の 戻り値 を 代入 ] . . ↓ [ 変数 hogehoge の 値 を ログ ] ─ ─ ─ ─ ─ ─ ─ ─ / の 部分 を すべて setTimeout () で タイマー 予約 する こと に なり ます 。 実際 の コード は 以下 の よう な 感じ です ヽ ( ・ ω ・ ＊ / ─ ─ ─ ─ ─ ─ ─ ─ var hogehoge ; setTimeout ( function (){ console.log ( " return !!" ); hogehoge = fun c1 (); console.log ( hogehoge ); }, 500 ); function fun c1 (){ return 12345 ; } ─ ─ ─ ─ ─ ─ ─ ─ / これ で 、 実行 結果 が 以下 の よう に なり ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ ( 0 . 5 秒 ) ログ : return !! ログ : 12345 ─ ─ ─ ─ ─ ─ ─ ─ / 
お はこん ばん ち ゎっ ♪ どんな ソースコード で 実行 し て い ます か ？ 以下 の コード で 試し て み まし た が 、 IE8 ～ 11 で 問題 なく 動く の が 確認 でき て い ます （ ・ ω ・ ＊ （ ただし IE8 ～ IE10 は IE11 の エミュレーション ） / ─ ─ ─ ─ ─ ─ ─ ─ ■ ■ ■ index . html ■ ■ ■ <! DOCTYPE html PUBLIC "-// W3C // DTD HTML 4 . 01 Frameset // EN "> < html > < head > < title ></ title > </ head > < frameset cols =" 20 % , 80 % "> < frame src =" page 1 . html "> < frame src =" pa g e2 . html "> </ frameset > </ html > ■ ■ ■ page 1 . html ■ ■ ■ <! DOCTYPE html > < html > < head > < title ></ title > </ head > < body > ページ １ < br > < form name =" setting " action =" javascript : setFrame ()"> < input type =" submit " value =" 設定 "> </ form > < script type =" text / javascript "> function setFrame (){ var frameset = t op. document . getElementsByTagName (" frameset ")[ 0 ]; frameset . cols = " 50% , 50% "; } </ script > </ body > </ html > ■ ■ ■ pa g e2 . html ■ ■ ■ <! DOCTYPE html > < html > < head > < title ></ title > </ head > < body > ページ ２ </ body > </ html > ─ ─ ─ ─ ─ ─ ─ ─ / ちなみに 、 HTML5 が 主流 に なっ て もう 結構 な 期間 が 経っ て い ます 。 HTML5 で は 、 < frameset > は 完全 に 廃止 さ れ て しまっ た ので 、 今後 は < frameset > で の サイト 構築 は 避け た 方 が いい と 思い ます ' d ( ・ ω ・ ＊ < iframe > は HTML5 で も 元気 バリバリ で 採用 さ れ て いる ので 、 < frameset > では なく < iframe > で 組ん だ 方 が いい か と 思い ます ♪ 
var の 変数 宣言 や 、 function 文 の 関数 宣言 は 、 コード の 実行 に 先立っ て 評価 さ れ ます 。 いわゆる 変数 の 「 巻き上げ 」 です 。 > ( function (){ > console.log ( a1 ); > var a1 = 3 ;// 関数 内 変数 として 定義 > })(); a1 は 関数 内 において var で 宣言 さ れ て い ます ので 、 関数 の 実行 の 前 に 、 一旦 ローカル 変数 として 成立 し ます 。 ただし 、 代入 は先 に 処理 さ れ ませ ん ので 、 console.log の 時点 で は a1 は ローカル 変数 として 存在 する だけ です 。 結果 、 console.log で 出力 さ れる 値 は undefined と なり ます 。 
前 の 質問 で 回答 し た かも しれ ませ ん が 、 Change イベント の 強制 発生 で 何とか なる の で は ない でしょ う か 。 ブラウザ の 場合 は 選ん だ 時点 で 発生 し ます が 、 マクロ による 選択 の 場合 は 発生 し ませ ん 。 方法 について は 、 「 Set ev ～ dispatch ( ev )」 で 行なっ て いる 処理 で 行 なえる はず です 。 発生 対象 タグ オブジェクト を 変数 に 代入 し て おか ない と 使え ませ ん ので 、 セレクト ボックス 選択 の 部分 を 2 行 に 分け て ください 。 Set mapnow = ie . document . getElementByID (" mapnow _ button ") mapnow .s electedindex = 2 ' ここ 以降 で 、 「 mapnow 」 を 対象 に イベント 強制 発生 もう 片方 の セレクト ボックス 選択 について は 、 最後 で イベント を 発生 さ せ て いる よう です が 、 再度 、 対象 タグ を 取得 し て 、 直接 メソッド を 発行 し て い ます ね 。 これ だ と 汎用性 に 乏しい です し 、 エラー 時 に 対応 が し づらく なり ます ので 、 その 前 の 行 で きちんと 変数 に 入れ て 、 そちら を 利用 する よう に し た 方 が 良い と 思い ます 。 
オブジェクト の プロパティ に は 内部 的 な 属性 が いくつ か あり 、 その 中 の 1つ に DontDelete が あり ます 。 他 に は ReadOnly 、 DontEnum など 。 DontDelete は 読ん で 字 の ごとく です が 、 その プロパティ が 削除 可能 か どう か を 設定 する ため の もの です 。 ある プロパティ が DontDelete で ある 場合 、 delete 演算子 で その プロパティ を 削除 する こと は でき ませ ん 。 今回 も その ケース に 該当 し ます 。 実際 に 、 console.log ( delete x ); // false この よう に し て delete 演算子 の 返り 値 を 確認 し て みる と 、 false が 得 られる はず です 。 これ は 、 「 対象 が DontDelete な プロパティ で あっ た ため 、 削除 に 失敗 し た 」 という 意味 です 。 です ので 、 結果 として x は 削除 さ れ ず 、 そのまま x の 値 で ある 1 が return さ れ ます 。 今回 の よう な 関数 の 引数 も そう です し 、 var で 宣言 し た 変数 や 関数 宣言 時 の 関数 名 も DontDelete な プロパティ です ので 、 これら は delete 演算子 で は 削除 でき ませ ん 。 
おかしい な ？？？ 「 おかしい 」 って 打てる のに 、 「 新しい 」 「 しかし 」 は 打て ない ん です か ？？？ キーボード じゃなくて 、 頭 が おかしい ん だろ ？？？ 
＞ tedfoanbjlsbvhlifw さん ＞ これ は かなり 高度 な javascript の スキル に なり ます か ？ いいえ 陳腐 な スキル です 。 
文字列 中 の ” の 書き方 が わから ない って 話 なら 普通 の 文字列 なら \" @" で 始める 形式 なら "" https :// msdn . microsoft . com / ja - jp / library / 362314 fe . aspx ＞@ と 二 重 引用符 で 囲ま れ た 文字列 中 に 二 重 引用符 を 含める に は 、 二 重 引用符 を 二 重 に し ます 。 
node.js が 出 て き て から 急 に 進化 が 凄く なり まし た ね 。 今 で は node.js + HTML5 を 使い 、 各 プラットフォーム に 対応 し た デスクトップアプリケーション も 作れる 様 に なっ て い ます 。 " Electron " と 検索 すれ ば 詳細 は 分かり ます 。 将来 的 に は Electron とか で 、 iOS / Androidアプリ も 作れる かも しれ ない と 噂 に なっ て い ます ね 。 また 現状 HTML5 から Audio や Video ・ Canvas が 追加 さ れ た 以外 に も 、 JavaScript で GPS 情報 や 音声 の 生成 ・ 認識 ・ ジャイロセンサー 取得 ・ ゲームコントローラー の 認識 も 出来る 様 に なっ て もう 大体 の 事 が 行える 様 に なっ て い ます 。 
おはよう ござい ます 。 これ DOM を 利用 する と 簡単 です が だめ でしょ う か ？ <! DOCTYPE html > < html > < head > < title > 年齢 計算 サンプル </ title > < script type =" text / javascript "> var _ by ;// 年 var _ bm ;// 月 var _ bd ;// 日 function selectchy () { _ by = document . getElementById (" y "). value ; document . getElementById (" txt "). value = calculateAge (_ by , _ bm , _ bd ); } function select chm () { _ bm = document . getElementById (" m "). value ; document . getElementById (" txt "). value = calculateAge (_ by , _ bm , _ bd ); } function selectchd () { _ bd = document . getElementById (" d "). value ; document . getElementById (" txt "). value = calculateAge (_ by , _ bm , _ bd ); } function calculateAge ( by , bm , bd ) { // 文字列 型 に 明示 変換 後 に parseInt var _ birth = parseInt ("" + by + bm + bd ); var today = new Date (); // 文字列 型 に 明示 変換 後 に parseInt var _ today = parseInt ("" + today . getFullYear () + affixZero ( today . getMonth () + 1 ) + affixZero ( today . getDate ())); return parseInt ((_ today - _ birth ) / 10000 ); } function affixZero ( int ) { if ( int < 10 ) int = " 0 " + int ; return "" + int ; } </ script > </ head > < body > < dl class =" cf "> < dt class =" title "> 生年月日 </ dt > < dd class =" data "> < select id =" y " class ="" name =" birthday : y " on change =" selectchy ()"> < option value =""> 年 </ option > < option value =" 1996 "> 1996年 </ option > < option value =" 1995 "> 1995年 </ option > < option value =" 1994 "> 1994年 </ option > < option value =" 1993 "> 1993年 </ option > < option value =" 1992 "> 1992年 </ option > < option value =" 1991 "> 1991年 </ option > <!-- 以下 省略 --> </ select > < select id =" m " class ="" name =" birthday : m " on change =" select chm ()"> < option value =" 00 "> 月 </ option > < option value =" 01 "> 1月 </ option > < option value =" 02 "> 2月 </ option > < option value =" 03 "> 3月 </ option > <!-- 以下 省略 --> </ select > < select id =" d " class ="" name =" birthday : d " on change =" selectchd ()"> < option value =" 00 "> 日 </ option > < option value =" 01 "> 1日 </ option > < option value =" 02 "> 2日 </ option > < option value =" 03 "> 3日 </ option > <!-- 以下 省略 --> </ select > </ dd > </ dl > < dl class =" cf "> < dt class =" title "> 年齢 </ dt > < dd class =" data integer "> < input id =" txt " class =" input " type =" text " name =" ages " value ="" maxlength =" 10 " style =" text - align : right ;"> </ dd > </ dl > </ body > </ html > value =" 1 "→ value =" 01 " の よう に 変更 し て あり ます 。 
お はこん ばん に ち ゎ o (＾－＾＊ document . write () で は 、 実行 さ れ た 場所 に 書き出さ れ て しまう ので 、 書き だす 場所 を 指定 する こと は でき ませ ん ' d ( ・ ω ・ ＊ それ を やる ため に は 、 関数 nya () の 内容 を 改造 し ない と ダメ です ね 。 document . write () の よう に コード を 書き出す の で は なく 、 document . createTextNode () または document . createElement () で 、 「 にゃん 」 と 書か れ た テキスト ノード または 要素 を 生成 し 、 その 要素 を 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ 親 要素 . insertBefore ( 「 にゃん 」 要素 , ボタン 要素 . next Sibling ); ─ ─ ─ ─ ─ ─ ─ ─ ▲ っていう 感じ で 挿入 し ます 。 insertBefore ( A , B ) は 、 B の 直前 に A を 挿入 する メソッド で 、 B . next Sibling は B の 直後 の ノード です 。 な ので 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ 親 要素 . insertBefore ( A , B . next Sibling ); ─ ─ ─ ─ ─ ─ ─ ─ ▲ って やる と 、 B の 直後 の ノード の 直前 、 つまり 、 B の 直後 に A が 挿入 さ れる っていう 手筈 です ＊ ゜ ▽＾) b ' これ を 使っ て コード を 記述 する と 、 以下 の よう に なり ます 。 ▼ ─ ─ ─ ─ ─ ─ ─ ─ <!-- ─ ─ スクリプト ─ ─ --> < script type =" text / javascript "> function nya ( elem ){ var nyan = document . createTextNode (" にゃん "); var parent = elem . parentNode ; pa ren t.i nsertBefore ( nyan , elem . next Sibling ); } </ script > <!-- ─ ─ ボタン ─ ─ --> < input type =" button " value =" 判定 " onclick =" nya ( this );"> ─ ─ ─ ─ ─ ─ ─ ─ ▲ ただし 、 これ だ と 、 ボタン の あと に 改行 が 入ら ない ので 、 ボタン の 横 に 「 にゃん 」 と 出 ます ね 。 この 場合 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ function nya ( elem ){ var nyan = document . createTextNode (" にゃん "); var br = document . createElement ( " br " ); var parent = elem . parentNode ; pa ren t.i nsertBefore ( nyan , elem . next Sibling ); pa ren t.i nsertBefore ( br , nyan ); } ─ ─ ─ ─ ─ ─ ─ ─ ▲ の よう に 、 < br > も 生成 し て 「 にゃん 」 の 直前 に 入れれ ば 、 「 にゃん 」 が ボタン の 下 に 来 ます 。 あるいは 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ function nya ( elem ){ var parent = elem . parentNode ; var div = document . createElement ( " div " ); di v.i nnerHTML = " にゃん "; pa ren t.i nsertBefore ( div , elem . next Sibling ); return ; } ─ ─ ─ ─ ─ ─ ─ ─ ▲ の よう に 、 < div > など の ブロック に 「 にゃん 」 を 入れ て 挿入 する と 、 ブロック 要素 な ので 、 < br > が なく て も ボタン の 下 に 来 ます ね ♪ 
＞ ジョブショップスケジューリング 問題 の ガントチャート を 作り たい 「 jquery Gantt chart 」 など と 検索 する と 実物 が 大量 に 出 て き ます あと は 、 それ を 読ん で 、 真似 ます テック ノート – 【 jQuery 】 手軽 に ガントチャート が 作れる プラグイン ( jQuery.Gantt ) http:// javatechnology .net / jquery / gantt / GitHub - taitems / jQuery.Gantt : jQuery Gantt Chart https :// github . com / taitems / jQuery.Gantt To Do を ガントチャート で 表示 する – cybozu . com developer network https :// cybozudev . zen des k. com / hc / ja / articles / 202640940 - To - Do -% E3 % 82 ... 
http:// dimsemenov . com / plugins / magnific - popup / 上記 プラグイン の サイト の 中 に 、 Dialog with CSS an imation という 項目 が あり ます 。 そこ を クリック する と 、 アニメーション 表示 する とき の パラメータ の 設定 の 仕方 が で て ます ので 、 そちら を 見 て ください 。 
HTML 側 に そのよう な 仕組み は 用意 さ れ て い ない みたい な ので 、 sample : set today as default value to input type = date - JSFiddle https :// jsfiddle .net / sii _ side / 2 w3 hxqg 6 / この よう に 読み込み 後 に JavaScript から 設定 し たり 、 PHP 等 で value 属性 に 埋め込む といった 方法 に なる よう です 。 
おは こばん に ち ゎ o ( ・ ω ・ ＊ 相対パス で 記述 すれ ば イイ だけ な ので 、 index . html と 同じ フォルダ 内 なら 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ < script type =" text / javascript " src =" rgbcolor . js "></ script > または < script type =" text / javascript " src ="./ rgbcolor . js "></ script > ─ ─ ─ ─ ─ ─ ─ ─ ▲ です 。 
① JFrame f = new JFrame ();// フレーム 作成 JPanel panel = new JPanel ();// パネル を 作成 JObject object = new JObject ();// こんな の は ない けど 、 仮 の オブジェクト として p . add ( object );// パネル に オブジェクト を 追加 Container contentPane = fra me. getContentPane (); contentPane . add ( panel );// フレーム に パネル を 追加 frame .s etVisible ( true );// フレーム を 表示 こんな 感じ の コード に なる と 思い ます 。 ④ 背景色 の 指定 object .s etBackground ( Color . BLACK );// 直接 色 の 指定 object .s etBackground ( new Color ( 150 , 150 , 150 ));// RGB の 指定 前景色 の 指定 object .s etForeground ( Color . BLACK ); ③ イベント リスナー という もの を 使い ます 。 エンター に対して 、 クリック に対して 、 キーボード 入力 に対して 、 など の 細かい 違い が ある ので 、 載せ きれ ませ ん 。 調べ て ください 。 //... 呼び出し 側 ... object . addActionListener ( this );// イベント の 登録 //... 処理 側 ( メソッド )... public void actionPerformed ( ActionEvent e ) // object の イベント で 実行 { // 独立 し た メソッド な ので object を メンバ 変数 に す べき int R = object . getBackground (). getRed ();// オブジェクト RGB を 取得 int G = object . getBackground (). getGreen (); ing B = object . getBackground (). getBlue (); object .s etBackground ( new Color ( R , G , B ));// オブジェクト 色 を 変える } 細かい ニュアンス が それぞれ 目的 に 応じ て 変わっ て くる ので 、 調べ た 結果 と 照らし 合わせ て 何とか し ましょ う 。 
質問 制限 文字数 を 超え まし た か ？ 手前味噌 です が 「 「 Yahoo! 知恵袋 」 添付 元 画像 ( iraw ) を 開く ブックマークレット ( PC 版 ) - Yahoo!知恵袋 」 http:// note . chiebukuro . yahoo . co.jp / detail / n3 90248 に 書い た ブックマークレット を 使っ て 画像 を 拝見 いたし まし た 。 上 の ブックマークレット を 使っ て 求める と 大きな 画像 の URL は http:// ks . c . yimg .jp / res / chie - qu e-1 2162 / 12 / 162 / 248 / 542 / iraw です ね 。 . 細かい 部分 は 色々 あり ます が ， ご 質問 本題 として は 「 最後 の if 文 」 に 最大 の 問題 が ある の で は ない か と 思い ます 。 この 部分 です ね ↓ 。      if ( flg == false ){          if ( name ==" s "){              if ( jyu ==""){                  alert (" 全て の 項目 を 入力 し て ください 。 ");              }          }      } これ だ と      ラジオボタン や チェックボックス に チェック 無し の 場合 で ，          なおかつ 「 学生 番号 」 が 「 s 」 だけ の 場合 で ，              なおかつ 「 氏名 」 が 未 入力 の 場合 に ，                  全 項目 を 入力 を 促す メッセージ 出す 。 という 意味 に なり ます よ 。 違う でしょ う ？ ご 質問 文 から 推測 すれ ば ，      ラジオボタン や チェックボックス に チェック 無し の 場合 ，          または 「 学生 番号 」 が 「 s 」 だけ の 場合 ，              または 「 氏名 」 が 未 入力 の 場合 に ，                  全 項目 を 入力 を 促す メッセージ 出す 。 の よう に し たい の で は ない でしょ う か ？？？ つまり AND + AND + AND ( なおかつ + なおかつ + なおかつ ) では なく ， OR + OR + OR ( または + または + または ) だ と 思い ます 。 ※ 参考 【 添付 図 】 ↓ したがって 次 の よう に 変更 す べき か と 思い ます ↓ 。      if (! flg || name ==" s " || jyu ==""){          alert (" 全て の 項目 を 入力 し て ください 。 ");      } とりあえず 上 の if 文 だけ 変更 し て 動作 検証 し て み て ください 。 ※ 下 に 書く 他 の 箇所 も 一気に 変える と ，     どこ か 別 の 場所 で 不具合 が 発生 する 可能性 が ある ため 。 === === === === === === === 上 に 引き続き ， 他 の 変 な 箇所 について です 。 ( 上 の 件 と は 切り離し て 考え て ください 。 ) 現状 で も 動作 する か も しれ ませ ん が とりあえず これ ↓ は 変 でしょ う 。 < input type =" button " value =" 送信 " onclick = check ()> 次 の よう に 変更 す べき でしょ う ね ↓ 。 < input type =" button " value =" 送信 " onclick =" check ()"> それと これ ↓ も 変 です 。 < textarea name =" kaizen " row =" 10 " cils =" 100 "></ textarea > おそらく 次 の よう に 変更 でしょ う ね ↓ 。 < textarea name =" kaizen " rows =" 10 " cols =" 100 "></ textarea > あと HTML に 本来 入れる べき スペース が たくさん 抜け て い ます 。 例えば < form action ="" method =" post "> や < input type =" radio " name =" reason " value =" 1 "> 先端 経営 学科 < input type =" radio " name =" reason " value =" 2 "> システム情報 学科 < input type =" radio " name =" reason " value =" 3 "> 医療 情報学 科 など など ( 他 も 多数 )… 例えば < form action ="" method =" post "> では なく て < form action ="" method =" post "> の よう に す べき でしょ う ("" の 後 に 半角 スペース が 必要 )。 JavaScript の 話 に 戻り ます が ， name という 変数 名 ↓ を 使う の も いかが な もの か と ...。 var name = document . getElementById (" 1 "). value ; そもそも name は HTML 上 でも name という 意味 が ある 言葉 ( 属性 ) です し JavaScript において も window オブジェクト に name という 既存 の プロパティ が あり ます 。 「 window . name - Web API インターフェイス MDN 」 https :// developer . mozilla.org / ja / docs / Web / API / Win do w/ name これ と ぶつかる ので あまり ( 全然 ) 良く ない 変数 名 だ と 思い ます 。 
FocusTab って ( ・ ω ・ ; )？ と 思っ て しまう の です が 、 FocusTab と は そもそも 何 を 指し て いる ん です か ？ FocusTab という 関数 なり 、 オブジェクト なり 、 HTM の タグ なり は 存在 し ませ ん ので 、 プラグイン で 追加 し て いる 機能 だ と は おもう ん です が 。 その へん も ちょっと 説明 し て いただける と 助かり ます 。 で 、 できれ ば 、 この 辺 で 色 変え てる から 、 画像 も かえ れ なか なぁ～っ て ところ まで 情報 が あれ ば ｗ 
どこ から 説明 すれ ば 良い の か 良く わかり ませ ん し ， 深く ツッコ まれ て も 私 も 良く わから ない 部分 が 出 て くる の です が 。 まず ( function (){ return typeof arguments ; })(); の よう に () で 括ら れ て いる function は 他 の 方 も 書か れ て いらっしゃる よう に 匿名 関数 ( 無名関数 ) で その後 の 後 に 続く () が ， 「 その 匿名 関数 ( 無名関数 ) を 実行 せよ 。 」 という 意味 の () です 。 . ◎ 匿名 関数 ( 無名関数 ) の 即 実行 について 匿名 関数 を 用意 し て 即 実行 する 最大 の メリット は 「 グローバル 汚染 の 回避 」 で ある と 私 は 思っ て い ます 。 ご 質問 の 場合 は 「 問題 ( クイズ 上 )」 の スクリプト で あっ て あまり 意味 は ない の です が ， ページ に 色々 な JS とか 読み込ん だり する と どの グローバルな 変数 名 が 使わ れ て い て どの グローバルな 変数 名 は 使わ れ て い ない か ？ など が わから なく なっ て くる の です 。 また 関数 名 に関して も 同じく 。 すで に 定義 さ れ て いる 関数 な の か そう で ない の か が わから なく なる 場合 も あり ます 。 関数 の 中 に ローカル 変数 を 用意 する 場合 は グローバル 領域 を 汚染 する こと は ない ので 安心 です 。 また 関数 に も 名前 を 付け なけれ ば 他 の 関数 が 上書き さ れ たり する 心配 も なくなり ます 。 そこで 匿名 関数 を 作っ て その 匿名 関数 を 即 実行 さ せる という よう な 手法 が 用い られる 場合 が 出 て き ます 。 手前味噌 です が 例えば 先日 私 が ココ ( 知恵袋 ) の 画像 閲覧 の ため に 作っ た ブックマークレット ( お気に入り に 登録 する 一行 JavaScript ) が あり ます 。 「 「 Yahoo! 知恵袋 」 添付 元 画像 ( iraw ) を 開く ブックマークレット ( PC 版 )」 http:// note . chiebukuro . yahoo . co.jp / detail / n3 90248 上 の ブックマークレット 内 に も var v や var b や var s など が 出 て き ます が これら を もし グローバル に 使う と ， 「 Yahoo! 知恵袋 」 ページ 内 の JavaScript の 変数 など と 干渉 を 起こす 危険 性 が 出 て くる わけ です 。 ( ブックマークレット は どの ページ で 使わ れる か など 私 は 知り ませ ん から ね 。 ) そこで ブックマークレット 全体 を 匿名 関数 に し て 即 実行 さ せる よう に し て ある の です 。 匿名 関数 の 中 の var v や var b や var s など は ローカル 変数 です から ね 。 Google など で 「 ブックマークレット 」 とか 検索 する と ， 他 にも 沢山 の ブックマークレット が 出 て くる と 思い ます が その 多く は 匿名 関数 で 括っ て ある と 思い ます 。 なお 匿名 関数 を () で 括る 必要性 に関して です が これ は function を 文頭 に 書く と 関数 定義 の 文 だ と 判断 さ れ て しまい , JavaScript の 文法 上 ， 関数 宣言 の 後ろ に カッコ を 書く こと が でき なく なり エラー に なる ため です 。 逆 に 言え ば function が 文頭 に 来 なけれ ば 良い わけ で ， 別に () で 括る 必要 は ない 場合 が 多い です 。 戻り値 が ない 場合 は + function (){}(); とか ! function (){}(); とかいう 書き方 を し て も 良い です 。 ( 戻り値 が ある 場合 は ， その 戻り値 が 数値 化 さ れ たり ， ブール 値 的 に 逆転 し たり し ます 。 ) . ◎ ご 質問 の 問題 ( クイズ ) の 戻り値 について arguments は 関数 に 渡っ て 来 た 引数 の リスト オブジェクト です 。 「 arguments - JavaScript MDN 」 https :// developer . mozilla.org / ja / docs / Web / JavaScript / Reference / Func ... ～ 引用 ～ > arguments は 、 関数 へ 渡さ れ た 引数 に 対応 する > Array の よう な オブジェクト です 。 です から 「 Object 」 が 返さ れ ます 。 「 Object 」 が 返さ れる か どう か を 調べる に は < script type =" text / javascript "> alert (( function (){ return typeof arguments })()); </ script > とか すれ ば 戻り値 が 確認 でき ます よ 。 < script type =" text / javascript "> alert (( function (){ return arguments [ 0 ]})(" あ ")); </ script > とか すれ ば さらに 理解 が 深まる か と 思い ます 。 上 の よう に alert () で return 値 を 使っ た 場合 その return 値 は alert () 内 で 消化 さ れ ます が alert () し なかっ た 場合 は 一旦 window オブジェクト に 返る の だ けれども その 結果 ， 参照 を 持つ もの が どこ に も 存在 し ない ため ， その オブジェクト は 自動的 に 消去 さ れる でしょ う 。 実際 ， 戻り値 を 持つ 既存 の メソッド は たくさん 用意 さ れ て い ます が 戻り値 を 使わ ない こと も 多い です 。 配列 を 操作 する メソッド とか を 使用 する 際 に そういう 戻り値 を 受け取ら ない ケース に 遭遇 する こと が 多い です 。 使わ ない なら 使わ ない で ， 自動 消去 さ れる ので 特に 問題 は あり ませ ん 。 
URL から ファイル 名 で 判定 する か 、 writeNav () に 引数 で 渡す 、 という の は どうでしょう 。 nav . html は ↓ の よう に id を 付け て おい て 、 < ul > < li >< a href ="#" id =" page 01 "> 1 </ a ></ li > < li >< a href ="#" id =" page 02 "> 2 </ a ></ li > < li >< a href ="#" id =" page 03 "> 3 </ a ></ li > </ ul > ・ ファイル 名 で 判定 ● js / common . js var url = window . location . href ; var id = url . match (".+/(.+?)\.[ a - z ]+([\?#;].*)?$")[ 1 ]; function writeNav ( rootDir ){ $. ajax ({ url : rootDir + " nav . html ", cache : false , async : false , success : function ( html ){ html = $( html . replace (/\{\$ root \}/ g , rootDir )); html . find ("#"+ id ). addClass (' active '); $(" section "). append ( html ); } }); } ・ 引数 で id を 指定 ● sub / page 02 . html < section > < h1 > 01 です </ h1 > < script type =" text / javascript "> writeNav ("../"," page 02 "); // nav 読み込み </ script > </ section > ● js / common . js function writeNav ( rootDir , id ){ $. ajax ({ url : rootDir + " nav . html ", cache : false , async : false , success : function ( html ){ html = $( html . replace (/\{\$ root \}/ g , rootDir )); html . find ("#"+ id ). addClass (' active '); $(" section "). append ( html ); } }); } 
http:// yokano - jp . blogspot .jp / 2014 / 05 / jquery - if ra me. html < iframe id =" ifrn " src ="" name =" hid - blank "></ iframe > として 、 $("# ifrm "). on (" load ", function (){ $("*****"). show (); }); 
$(" h2 "). each ( function () { $( this ). nextUntil (" h2 "). add ( this ). wrapAll ("< section ></ section >"); }); 
php に しろ 、 JavaScript に しろ 、 null 値 を html に 表示 する という の は 、 文字列 型 データ に 変換 する という 作業 が 必要 で 、 自動 で は 空文字列 に 変換 さ れ ます 。 ' NULL ' という 文字列 を 表示 し たい なら 、 その よう な 変換 作業 を 自前 で 記述 する 必要 が あり ます 。 php なら if ( is _ null ($ data ) ) $ data = ' NULL '; といった 構文 , JavaScript に も 似 た よう な 関数 は ある だろ う 。 普段 使っ て ない ので 割愛 。 
> trance _ mission jp さん 2016 / 7 / 2819 : 09 : 46 > HTML で あれ ば 表示 さ れる の です が 、 HTA で は 埋め込め ない の でしょ う か ？ 埋め込む の 意味合い によって は 可能 です 。 
お はこん ばん に ち ゎ o (＾▽＾＊ 少し 前 に 、 この 質問 の ケース と 同じ よう な 機能 について 回答 し まし た ♪ たぶん 、 それ と 同じ 方法 で 実装 できる と 思う ので 、 よけれ ば 読ん で み て ください なっ m(__)m [ 参考 : スクロール に 合わせ て 画像 が 左右 する に は ] http:// detail . chiebukuro . yahoo . co.jp / qa / question _ detail / q 1216195473 ... 
IE11 は ローカル ファイル に対する $. ajax が でき ない よう に なっ て い ます 。 ローカル で jQuery の Ajax を 動作 さ せ たい が IE11 で 動か ない 時 に こう する - Corredor http:// neos 21 . hatena blog . com / entry / 2016 / 06 / 22 / 000748 ただし 、 上記 ページ に 記載 さ れ て いる IE10 モード で の 動作 を さ せる に は 、 jQuery を ver 1系 に 落とす 必要 が あり ます 。 Chrome も 同様 です が 、 Chrome は -- allow - file - access - from - files の オプション を 付け て 起動 する という 方法 が あり ます 。 Google Chrome で ローカル ファイル の Ajax 読み込み が でき ない 件 : 永遠 ログ http:// eien . seesaa .net / article / 302127165 . html こちら は 、 v er2 系 の まま でも 問題 あり ませ ん 。 
else if ( cnt <= 7 ) myMess =" 危険 "; ここ で 、 cnt が 7 以下 に なっ て いる ので 、 全て 危険 に なっ ちゃっ てる と 思い ます 。 ( cnt >= 7 ) で ７ 以上 が 想定 し て いる 判定 に なる か と 。 
$. css で 値 を 取得 する 際 、 複数 の 要素 が あっ た として も 、 値 を 得 られる の は 最初 の 1つ だけ です ので 、 1回 で まとめ て 判定 する こと は でき ませ ん 。 sample : check red color elements with jQuery - JSFiddle https :// jsfiddle .net / sii _ side / bum 5 of 56 / 1つ 1つ の 要素 を チェック し て 、 1つ で も 該当 が あれ ば フラグ を true に する という 処理 を し 、 最後 に フラグ で 分岐 さ せる という 形 に なる か と 思い ます 。 
お はこん ばん に ち ゎ o (＾－＾＊ element . classList は 「 DOMTokenList 」 という タイプ の オブジェクト で 、 この タイプ の オブジェクト は 、 IE9 以下 で は 対応 し て い ない ので 、 これ と まったく 同じ もの を 扱う こと は 出来 ませ ん 。 ただ 、 element . classList は 、 element に 指定 さ れ て いる クラス 名 の リスト な ので 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ element . class Name. split (" "); ─ ─ ─ ─ ─ ─ ─ ─ ▲ で 代用 し て 、 「 配列 （ Array オブジェクト )」 として 取得 でき ます 。 「 classList 」 の 「 DOMTokenList 」 と 、 「 class Name. split (" ")」 の 「 配列 」 で は 、 使える プロパティ や メソッド など が 違っ て いる こと に 注意 が 必要 です 。 また 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ element . classList . add (" test "); ─ ─ ─ ─ ─ ─ ─ ─ ▲ について は 、 element に クラス 名 「 test 」 を 追加 する 処理 な ので 、 単純 に 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ element . className += " "+" test "; ─ ─ ─ ─ ─ ─ ─ ─ ▲ っていう ふう に 実現 でき ます が 、 追加 しよ う と し て いる クラス 名 を すでに element が もっ て いる 場合 は その クラス を 追加 し ない よう に し ない と いけ ませ ん ね 。 その チェック を いれる と 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ element . className += ( element . class Name. match (/(\ s |^) test (\ s |$)/) ) ? "" : " "+" test " ; ─ ─ ─ ─ ─ ─ ─ ─ ▲ っていう 感じ に なり ます ヽ ( ゜ ▽ ＾ ＊ 
div の CSS に display : inline - block ; を 指定 し て ください 。 
sample : css transition with jQuery addClass - JSFiddle https :// jsfiddle .net / sii _ side / Lu 2 huarq / 色 の 無い 状態 と 色 の ある 状態 の 、 2つ の 画像 を ぴったり 重ね あわ せ 、 手前 に 来る 色 の ある 状態 の 画像 を 、 透明度 0 （ 全く 見え ない ） → 1 （ 完全 に 見える ） と アニメーション さ せ て い ます 。 中核 と なる アニメーション の 処理 に は jQuery を 使っ て おら ず 、 CSS の transition で 行っ て い ます 。 葉 の 画像 は 1 枚 ごと に 独立 し て おり 、 葉 ごと に アニメーション の 開始 を 少し ずつ ずらす こと で 、 連続 し た アニメーション に 見せ て い ます 。 jQuery は アニメーション を 自動的 に 開始 さ せる ため 、 class を 付与 し て いる だけ だ と 思わ れ ます 。 
引数 （ ここ で いう abe とか の こと な ） が 同じ なら 当然 上書き さ れる ん よ (´・ω・`) $ a [ 0 ] = 1 ; $ a [ 0 ] = 5 ; って 書い たら とうぜん $ a [ 0 ] に は 5 が 上書き さ れる の は 理解 できる か ね ？ あなた の やり たい こと の 意図 が ハッキリ せ ん の や が 、 もし 別々 の 値 を 入れ たい なら ば $ arr [ abe ] [ 0 ] => ichiro ; $ arr [ abe ] [ 1 ] => jiro ; みたい に 、 添字 そのもの を 変える しか ないや で ー 。 
1 . フォーム ad の 最後 の エレメント は 、 「 ボタン 」 だ から です 。 ボタン を 除く ため - 1 し て ます 。 2 . myMess は 、 単なる 「 変数 」 です 。 文字列 が 入っ て い ます 。 
CSS の position : absolute を 適用 し て SVG の 上 に video を 重ねる と 良い でしょ う 。 
ここ を 参考 に 、 効か ない か なぁ ・ ・ ・ http:// alphasis . info / 2011 / 07 / jquery - ui - sho w/ ※ この ページ の 下部 の 関連 記事 も 参考 に なる かも です 。 ※ 古い 記事 な ので そこ は ご 注意 ください 。 
sample : create img elements by for , while , and forEach - JSFiddle https :// jsfiddle .net / sii _ side / hs 9 vytf 7 / for で 可能 です 。 が 、 for で なけれ ば なら ない という わけ で も あり ませ ん 。 
サイト で は 見 た こと 無い 現象 です が 、 Yahoo! アプリ で たまに そんな 感じ に なっ てる 時 が あり ます ね 。 深刻 な ニュース の 見出し の 横 の 画像 が ベッキー に なっ て たり と か 。 キャッシュ じゃ なけれ ば 画像 が 大き 過ぎる と か は 無い です か ね 。 支給 さ れ た 画像 を ちゃんと 確認 せ ず に 使う と 、 実は 解像度 が 300 dpi とか でか なり 大きい サイズ だっ た という 事 も あっ たり し ます 。 解像度 が 問題 なけれ ば TinyPNG とか で 全て の 画像 の ファイルサイズ を 極力 小さく し て み て は どうでしょう 。 サーバー とか より も 端末 とか ブラウザ 側 の 問題 で は ある と 思い ます 。 
何 の 為 の JavaScript な の か 分かる か な ?? ページ URL や ページ ファイル 名 を if で 条件 分岐 し たら いい だけ の 話 で は ?? ① ページ URL を 取得 ② 取得 し た 文字列 を 正規表現 で ファイル 名 のみ を 取り出す ③ switch文 で ファイル 名 ごと に 処理 を 変える END 
ジャバスクリプト が あなた の ブラウザ で 使える か どう か 調べ て み ましょ う 。 Source is too large が 気 に なり ます が 。 なに か 大きい ファイル が ダウンロード さ れ て いる の かも 知れ ませ ん 。 
簡素 です が script タグ を 生成 し defer 属性 を 利用 し た サンプル です 。 http:// high . s1 . xrea . com / qa / q 14162150569 . html q 14162150569 . html を 呼び出し 元 として hoge 0 . js もしくは hoge 1 . js を 呼び出す ボタン を 生成 し ます 。 ボタン を クリック し た 場合 は 、 ページ は 切り替わら ず HTML を 動的 に 変更 し た うえ 、 配置 さ れ た back ボタン を 押す と q 14162150569 . html の 初期 状態 に 戻る といった 内容 です 。 参考 まで 。 メイン と なる ページ の HTML （ 上記 html )--- < script type = text / javascript ><!-- function init (){ document . getElementById (' o '). innerHTML =''; for ( var i = 0 , tmp ; i < 2 ; i ++){ var b = document . createElement (' input '); b .s etAttribute (' type ',' button '); b .s etAttribute (' value ',' goto hoge '+ i ); b .s etAttribute (' id ',' hoge '+ i ); window [' xhoge '+ i ] = new s ( i ); b . addEventListener (' click ', function (){ window [' x '+ event .s rcElement . id ]. r (); }); document . getElementById (' o '). appendChild ( b ); } } function s (){ this .s rc = './ hoge '+ arguments [ 0 ]+'. js '; this . r = function (){ var s = document . createElement (' script '); s .s etAttribute (' src ', this .s rc ); s .s etAttribute (' defer ',' defer '); s .s etAttribute (' type ',' text / javascript '); document . getElementById (' so '). appendChild ( s ); } } window . addEventListener (' load ', init ); //--></ script > < style type = text / css ><!-- . hoge 0 { background :# f 0 f 0 ff ;} . hoge 1 { background :# fff 0 f 0 ;} //--></ style > < div id = so ></ div > < div id = o ></ div > - - - - - - - ------------------------- hoge 0 . js / hoge 1 . js 同じ 記述 var b = document . createElement (' input '); b .s etAttribute (' type ',' button '); b .s etAttribute (' value ',' back '); document . getElementById (' o '). innerHTML =' page - hoge * < hr >< div class = hoge *> aaaaaaa </ div >' b . addEventListener (' click ', window [' init ']); document . getElementById (' o '). appendChild ( b ); document . getElementById (' so '). innerHTML =''; 
HTML の 使い方 として 間違っ て い ます 。 ul タグ の 直下 における の は li タグ のみ です 。 テキスト を 置く こと は 出来 ませ ん 。 
jQuery は 確か に 「 どの ブラウザ でも 正しく 表示 さ れる よう に する 」 ため に 作ら れ まし た が 、 もう それ から 何 年 も 経っ て おり 、 ブラウザ 間 の 差 は 極めて 少なく なっ て き て い ます 。 正直 この 手 の スタンス について は 長年 考え て い ます が ハッキリ 言える こと は 見つかっ て い ませ ん 。 です が 一つ 言える こと として 、 別 の 回答者 さん が おっしゃっ て いる こと を 踏まえ まし て も 、 「 なぜ そう し て そう なる の か 分から ない けれど 、 決まり だ から そう する 」 という こと は できるだけ 少ない 方 が いい と は 思い ます 。 まあ 、 質問者 さん が 「 Web サイト で 簡単 な 動的 な 動作 を とりあえず できる よう に なり たい 」 と 考え て いる の で あれ ば 、 「 jQuery を 覚える 」 ので いい でしょ う 。 しかし 「 プログラミング言語 を 覚え たい 」 という 気持ち が 少し で も ある の なら 最初 から 依存 する の は 避ける べき です 。 
お はこん ばん に ち ゎ ♪ URL を 文字列 として クォーテーション '' で 囲ん で い ない ので 、 「 B . html 」 や 「 A . html 」 を 変数 名 として 認識 し て しまっ て い ます 。 ▼ ─ ─ ─ ─ ─ ─ ─ ─ < button type =" submit " data - role =" none " onclick =" addItem (); location . href = B . html "> 決定 </ button > ─ ─ ─ ─ ─ ─ ─ ─ ▲ を 、 URL を '' で 囲ん で 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ < button type =" submit " data - role =" none " onclick =" addItem (); location . href =' B . html '"> 決定 </ button > ─ ─ ─ ─ ─ ─ ─ ─ ▲ に 直し ましょ う ヽ ( ・ ω ・ ＊ 
JavaScript で データ を 次 の ページ へ 持ち越す 方法 は 、 cookie を 使う 、 ローカル ストレージ を 使う 、 URL に パラメータ を 付ける の いずれ か が 簡単 な 方法 です 。 
display : none の テキストボックス を 使う なら 、 < input type =" hidden "/> で いい と 思い ます 。 （ わざわざ CSS 指定 し なく て も 、 未 表示 の 為 ） 
リファレンス を 読む と いい です 。 下記 ページ の " bSortable " のところ 。 http:// legacy . datatables .net / usage / columns datatables の リファレンス は サンプル コード が 多く 、 英語 苦手 でも わかり やすく なっ て いる と 思う ので 日本語 の 情報 探す より きちんと 読ん で みる と いい と 思い ます よ 。 
ほぼ 丸投げ 状態 の 質問 です ね 。 。 。 簡単 な ルール 説明 以外 書か ず ， ほとんど 0 の 状態 で ， HTML から 全て を 回答者 に 考え させる よう な 質問 を し て も その 回答 の 解析 に てこずる 上 ， 応用 でき ない の が 落ち です よ 。 他人 が 作っ た プログラム コード を 全て 理解 する の は その コード の 作者 以上 の 能力 が 必要 な の です から 。 。 。 なるべく コメント 行 を 入れ て わかり やすく し た 上 で 極力 ， 簡単 ( シンプル ) な 例 に し た つもり です が ↓ 。 <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > 10 個 の 数 の 足し算 </ title > < script type =" text / javascript "> // 指定 時間 ( ミリ 秒 ) を 代入 する 変数 var ms = 0 ; // 問題 を 代入 する 配列 を 作成 var arr = new Array (); // 指定 時間 ( ミリ 秒 ) を 代入 する 関数 function setMS ( num ){      ms = num ; } // 計算 を スタート さ せる 関数 startCalc の 定義 function startCalc (){      // 指定 時間 ( ミリ 秒 ) が 0 で あれ ば      if ( ms == 0 ){          // 秒 数 指定 を 促し この 関数 を 抜ける          alert (" 秒 数 を 選択 し て ください 。 ");          return ;      }      // スタートボタン を 非 活性 に する      document . my _ frm .s ta _ btn . disabled = true ;      // 問題 を 代入 する 配列 を 初期化      arr . length = 0 ;      // 関数 makeQuestion を 実行      makeQuestion (); } // 問題 を 作成 する 関数 makeQuestion の 定義 function makeQuestion (){      // 問題 を 代入 する 配列 の 要素 数 が 10 未満 で あれ ば      if ( arr . length < 10 ){          // 配列 の 要素 に 1 ～ 9 の ランダム な 整数 を 追加          arr . push ( Math . floor ( Math . random ()* 9 )+ 1 );          // 配列 の 最終 要素 を 「 足し算 する 数 」 の 欄 に 表示          document . my _ frm . qes _ txt . value = arr [ arr . length - 1 ];          // 指定 時間 ( ミリ 秒 ) に 関数 waitTime を 実行          setTimeout (" waitTime ()", ms );      } else {          // que _ ara を 非表示 に する          document . getElementById (" que _ ara "). style. display =" none ";          // ans _ ara を 表示 する          document . getElementById (" ans _ ara "). style. display =" block ";      } } // 関数 waitTime の 定義 function waitTime (){      //「 足し算 する 数 」 の 欄 を 空白 に する      document . my _ frm . qes _ txt . value = "";      // 200 ミリ 秒 後 に 関数 makeQuestion を 実行      setTimeout (" makeQuestion ()", 200 ); } // 関数 judgAnswer の 定義 function judgAnswer (){      // 回答 メッセージ の 作成      var msg = " あなた の 答え … ";      msg += document . my _ frm . ans _ txt . value + "\ n ";      msg += " 出題 と 解答 … ";      msg += arr . join ("+") + "=";      for ( var i = 0 , ans = 0 ; i < arr . length ; i ++){          ans += arr [ i ];      }      msg += ans + "\ n ";      if ( ans == parseInt ( document . my _ frm . ans _ txt . value )){          msg += "○： 正解 ！"      } else {          msg += " × ： 不正解 !!"      }      // 回答 メッセージ を 表示      alert ( msg );      //「 足し算 し た 結果 」 欄 の 初期化      document . my _ frm . ans _ txt . value = "";      // que _ ara を 表示 する      document . getElementById (" que _ ara "). style. display =" block ";      // ans _ ara を 非表示 に する      document . getElementById (" ans _ ara "). style. display =" none ";      // スタートボタン を 活性 状態 に する      document . my _ frm .s ta _ btn . disabled = false ; } </ script > </ head > < body > < h2 > 10 個 の 数 を 足し算 せよ 。</ h2 > < hr > < form name =" my _ frm "> < div id =" que _ ara " style =" display : block ;"> < label >< input type =" radio " name =" tim _ rdo " onclick =" setMS ( 2000 )"> 2 秒 </ label > < label >< input type =" radio " name =" tim _ rdo " onclick =" setMS ( 1000 )"> 1 秒 </ label > < label >< input type =" radio " name =" tim _ rdo " onclick =" setMS ( 500 )"> 0 . 5 秒 </ label > < br > < input type =" button " value =" スタート " name =" sta _ btn " onclick =" startCalc ()"> < br > 足し算 する 数 :< input size =" 4 " name =" qes _ txt " readOnly > </ div > < div id =" ans _ ara " style =" display : none "> 足し算 し た 結果 :< input size =" 4 " name =" ans _ txt "> < input type =" button " value =" OK " onclick =" judgAnswer ()"> </ div > < br > </ form > </ body > </ html > 
重複 投稿 の 規約違反 で 通報 し まし た 。 同じ 内容 で ３ 件 は 悪質 です 。 
バグ が ある と の こと です 。 jquery . aw - showcase . js の 227 行 目 に ある if ( myInterval ) { pause _ loop = true ; clearInterval ( myInterval ); } を if ( myInterval ) { if ( options .s toponclick ) { pause _ loop = true ; clearInterval ( myInterval ); }} と する こと で クリック し て も 停止 し ない よう に なり ます 。 参考 サイト http:// www . awkward group . com / sandbox / awkward - showcase - a - jquery - plugi ... 
この 辺 の ページ ↓ を ご 参考 に さ れれ ば 良い か と 。 。 。 「 円 ・ 円弧 を 描く － JavaScript 入門 （ HTML5 編 ） 」 http:// www . pori 2 .net / html5 / Canvas / 040 . html しか し ， -( 1 / 2 )≦ sin ≦ 1 と 書か れ て も 数学 の 座標 と HTML など PC 上 の 多く の ソフト で の 座標 と では 上下 が 逆 ( y 軸 が 逆 ) です から ね 。 。 。 PC で は モニタ 画面 の 左上 が ( 0 , 0 ) でしょ う ？ です から イラレ など 極 一部 の ソフト を 除い て 普通 は 上下 が 逆 な ん です 。 ◎ 数学 的 な 見た目 で は こんな 感じ ↓ でしょ う か ？ <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > Sample 1 </ title > </ head > < body > < canvas id =" cvs " width =" 400 " height =" 400 " style =" border : 1 px solid ;"></ canvas > < script > var cv = document . getElementById (" cvs "). getContext (" 2d "); cv. beginPath (); cv. arc ( 200 , 200 , 150 , - Math . PI / 2 , Math . PI / 6 , false ); //↓ 先頭 の 「 //」 を 削除 すれ ば 円弧 で は なく 扇 型 に なる // cv. lineTo ( 200 , 200 ); // cv. closePath (); cv. stroke (); </ script > </ body > </ html > ◎ PC の 画面 的 に 見れ ば こんな 感じ ↓ でしょ う か ？ <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > Sample 2 </ title > </ head > < body > < canvas id =" cvs " width =" 400 " height =" 400 " style =" border : 1 px solid ;"></ canvas > < script > var cv = document . getElementById (" cvs "). getContext (" 2d "); cv. beginPath (); cv. arc ( 200 , 200 , 150 , - Math . PI / 6 , Math . PI / 2 , false ); //↓ 先頭 の 「 //」 を 削除 すれ ば 円弧 で は なく 扇 型 に なる // cv. lineTo ( 200 , 200 ); // cv. closePath (); cv. stroke (); </ script > </ body > </ html > そもそも 根本 的 に 良く わかっ て い ない の です が 例えば sin が 1 / 2 という の は 1 ： 2 ：√ 3 の 三角形 が 描ける 1 / 12 回転 です よ ね ？ ？ つまり 2 π/ 12 = π/ 6 ラジアン ...？？？ 私 は 数学 を 離れ て 数 十 年 に なる ので この 辺 から し て 非常 に アヤ シイ です 。 その他 は この 回答 の 最初 に 書い た ページ で も 参考 に し て み て ください 。 
＞ potyomukin 300 さん ＞ JavaScript の 変更 の 仕方 が 分から なく て 困っ て い ます 。 テーマ とか 関係 なく 、 テーマ の 編集 で 必要 な 部分 を 修正 する 。 
お はこん ばん に ち ゎ o (＾－＾＊ スコープ 外 で ローカル 変数 に アクセス する 方法 として は 、 ｢ クロ ― ジャ ｣ を 利用 し た 方法 が まず 考え られ ます が 、 具体 的 に 、 どういう 処理 で スコープ 外 の 参照 を しよ う と し て い ます か ？ 「 クロージャ 」 を 使う 方法 で いちばん 簡単 な 例 は 、 まず 、 関数 myFunc () の 中 に 、 もう 一つ 関数 を 定義 し て その 関数 を return し ます 。 ▼ ─ ─ ─ ─ ─ ─ ─ ─ function myFunc (){ var a = 1 ; return localFunc ; function localFunc (){ return a ; } } ─ ─ ─ ─ ─ ─ ─ ─ ▲ この myFunc () を 実行 する と 、 myFunc () 内 で 定義 さ れ た 関数 localFunc が 返さ れ ます 。 ▼ ─ ─ ─ ─ ─ ─ ─ ─ var func = myFunc (); ─ ─ ─ ─ ─ ─ ─ ─ ▲ こう する と 、 グローバル変数 func に 、 myFunc () 内 で ローカル に 定義 し た 関数 localFunc () が 代入 さ れる ので 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ func (); ─ ─ ─ ─ ─ ─ ─ ─ ▲ の よう に する と 、 ローカル で 定義 さ れ た localFunc () を グローバル で 実行 でき ます 。 さらに 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ var value = func (); ─ ─ ─ ─ ─ ─ ─ ─ ▲ の よう に func () の 戻り値 を グローバル変数 value で 受け止めれ ば 、 func () は 、 myFunc () の なか で 定義 し た ローカル 変 数 a の 値 を return し て いる ので 、 グローバル変数 value で 、 myFunc () の ローカル 変 数 a の 値 を 参照 する こと が でき ます ' d ( ・ ω ・ ＊ ▼ ─ ─ ─ ─ ─ ─ ─ ─ function myFunc (){ var a = 1 ; return localFunc ; function localFunc (){ return a ; } } var func = myFunc (); var value = func (); alert ( value ); // ローカル 変 数 a の 値 ─ ─ ─ ─ ─ ─ ─ ─ ▲ こういう 仕組み を 、 その 場 その 場 に あっ た 形 に 変え て 組み込ん で いく と 、 スコープ 外 の 変数 へ の 参照 が でき ます 。 
$( セレクタ ). on (" load ", function (){ }); で 、 対象 の 要素 が 読み込み 完了 し た 時点 で 処理 が でき ます 。 が 、 $. ajax が 完了 し た 時点 で 要素 が でき て い ない って 方 に 問題 ある よう な 気 も する ん です が 。 読み込ん だ 結果 で 色 を つける ん だっ たら 、 $. ajax ({ }). done ( function (){ // ここ で 、 要素 を 生成 し つつ 色 つけ }); で いい 気 が する ん です けど 。 
width の スペル じゃ ない です か 
サーバ サイド で 日付 を 埋め込む しか ない ん じゃ ない か な ？ 
sample : loto 7 simulator - JSFiddle https :// jsfiddle .net / sii _ side / 2 evsw 833 / 
JavaScript だけ で は 難しい でしょ う 。 最低 で も JavaScript を 元 に する なら ば 、 HTML と CSS も 必要 です 。 
< script > addEventListener (" contextmenu ", function (e) { e . preventDefault (); }); </ script > これ だけ で オッケー です 。 質問 の コード は かなり 古い です 。 右クリック を 禁止 し て も 、 コピペ する 方法 は いくらでも あり ます 、 念 の ため 。 
404 な ので 、 対象 の URL が ない と 言わ れ て い ます 。 http:// 〜〜/ favicon . ico が 存在 し ない か URL が 間違っ て い ます 。 
とりあえず 、 コードコピペ し て 、 確認 し て み まし た が 、 当方 の IE11 で は アコーディオン が 正常 に 動作 し まし た 。 （ color box . css は 、 sample 1 から とっ た もの ） ブラウザ の 種類 による もの かも しれ ませ ん 。 （ 手元 に ブラウザ IE しか ない ので 、 確認 でき ず すいません ...） 
> tenshi 1406 さん > 何 か 良い 方法 を 教え て ください 。 会社 の 情報 や 使っ て いる もの も 開示 せ ず に ここ で 聞い て も 無理 な ので 良い 方法 は 会社 の かかりつけ の 業者 に 相談 する 事 に なり ます 。 
② のようなもの 、 は ・ ・ ・ 書か れ て いる 内容 、 理屈 は 間違っ て ない の です が 、 この まま だ と 結構 問題 で ます 。 という か 、 コレ 系 の スクリプト は 結構 大変 です 。 また 、 jquery も バージョン によって 書き方 が 違う （ 1系 で も ちょいちょい 違う ） ので 、 モノ によって は これ で は 動か ない と 思い ます 。 で 。 結果的 に は 、 スマホ 時 のみ 、 横 開き メニュー を 実現 し たい ワケ です よ ね 。 で あれ ば 、 jquery で （ だけ で ） 実現 しよ う と せ ず に 、 css 使う 方 が ラク です 。 css media max - width あたり で 検索 し て もらっ て 。 jquery と 似 た 感覚 で 、 「 モニター 幅 900 px 以下 の 時 だけ 効く css 」 を 設定 でき ます 。 あと は どうと でも できる はず 。 
リクエスト 感謝 （ ＊ ＾ 人 ＾ ＊ ） ■ ■ ■ name の 命名規則 について ■ ■ ■ まず 、 name 属性 の 付け方 が 不正 な ので 、 そこ から 説明 し ます ね ♪ name 属性 は 、 半角 アルファベット から 開始 し て 、 / ─ ─ ─ ─ ─ ─ ─ ─ ・ 半角 の 英数字 ・ ハイフン （-） ・ アンダースコア （_） ・ コロン (:) ・ ピリオド (.) ─ ─ ─ ─ ─ ─ ─ ─ / 以外 は 使っ て は いけ ない こと に なっ て いる ので 、 / ─ ─ ─ ─ ─ ─ ─ ─ name =" hoge [ 0 ]" ─ ─ ─ ─ ─ ─ ─ ─ / の よう な 命名 は ルール から 外れ て しまい ます 。 あと 、 管理 の し やす さ を 考える と 、 ひとかたまり の フォーム は < form > で 囲っ て おく方 が イイ でしょ う 。 この 回答 で は 、 以下 の HTML コード を 使っ て 回答 し て き ます ヽ (＾－＾＊ / ─ ─ ─ ─ ─ ─ ─ ─ < form name =" frmInputs "> < input type =" text " name =" hoge _ 0 "> < input type =" text " name =" hoge _ 1 "> < input type =" text " name =" hoge _ 2 "> < input type =" text " name =" hoge _ 3 "> < input type =" text " name =" hoge _ 4 "> < input type =" submit " name =" ok "> </ form > ─ ─ ─ ─ ─ ─ ─ ─ / ■ ■ ■ フォーム の コントロール ■ ■ ■ すべて の テキストボックス が 入力 さ れ て い て 、 入力 に 重複 が ない 場合 だけ 送信 ボタン を 表示 する 、 という 処理 な ので 、 各 テキストボックス の value の 重複 を チェック し て 、 その 結果 によって 送信 ボタン の type を 、 " hidden " と " submit " で 切り替える 、 っていう 形 に なる と 思い ます ' d ( ・ ω ・ ＊ アルゴリズム として 分かれる の は 、 「 重複チェック 」 の 部分 です が 、 何 を 理想 と する か によって 、 理想 の アルゴリズム は 変わり ます ね 。 あたし の 場合 は 、 / ─ ─ ─ ─ ─ ─ ─ ─ コーディング が 簡単 で 、 処理 内容 が 見 て 分かり やすい ─ ─ ─ ─ ─ ─ ─ ─ / っていう の を 理想 と すれ ば 、 各 テキストボックス を 、 その value を オブジェクト の キー に 追加 し ながら スキャン し て いき 、 / ─ ─ ─ ─ ─ ─ ─ ─ value in オブジェクト ─ ─ ─ ─ ─ ─ ─ ─ / が true だっ た 場合 に 「 重複 あり 」 として 判別 し ます ね 。 / ─ ─ ─ ─ ─ ─ ─ ─ var input = ( テキストボックス の リスト ); var keys = new Object (); for ( var i = 0 ; i < input ; i ++){ if ( input [ i ]. value in keys ){ alert (" 同一 の 情報 が 入力 さ れ て い ます "); } keys [ input [ i ]. value ] = true ; // value を keys の キー に 追加 } ─ ─ ─ ─ ─ ─ ─ ─ / 未 入力 が あっ たら 「 すべて 入力 し て ください 」 の アラート を 出す 処理 は 、 入力 の 段階 で 実行 し て しまう と 、 テキストボックス を １つ ずつ 順に 入力 し て いく とき に 、 最後 の テキストボックス に たどり着く まで 毎回 アラート が 出 て しまう ので 、 入力 の 段階 で は アラート し ない 方 が イイ です ね ヽ ( ・ ω ・ ＊ あと 、 入力 を チェック し て 条件 を 満たし た とき に 、 はじめて 送信 ボタン を 表示 する ので 、 < input name =" ok "> は デフォルト で 「 type =" hidden "」 に し て おき ます 。 する と 、 以下 の よう な コード に なり ます ＊＾－＾) o ⌒★ / ─ ─ ─ ─ ─ ─ ─ ─ <!-- ─ ─ 入力 フォーム ─ ─ --> < form name =" frmInputs "> < input type =" text " name =" hoge _ 0 "> < input type =" text " name =" hoge _ 1 "> < input type =" text " name =" hoge _ 2 "> < input type =" text " name =" hoge _ 3 "> < input type =" text " name =" hoge _ 4 "> < input type =" hidden " name =" ok "> </ form > <!-- ─ ─ スクリプト ─ ─ --> < script type =" text / javascript "> //----] テキストボックス の リスト var input = document . querySelectorAll (" form [ name = frmInputs ] input [ type = text ]"); //----] イベント セット for ( var i = 0 ; i < input . length ; i ++){ input [ i ]. on change = check } /*---- 関数 : 入力 チェック ----*/ function check (){ var ok = true ; var keys = new Object (); for ( var i = 0 ; i < input . length ; i ++){ if ( ! input [ i ]. value ){ ok = false ; continue ; } if ( input [ i ]. value in keys ) { alert (" 同一 の 情報 が 入力 さ れ て い ます "); ok = false ; break ; } keys [ input [ i ]. value ] = true ; } document .fr mInputs . ok . type = ok ? " submit " : " hidden "; } </ script > ─ ─ ─ ─ ─ ─ ─ ─ / jQuery を 使っ て 記述 し て も 、 処理 内容 が シンプル な だけ に そんなに 変わり ませ ん ね 。 / ─ ─ ─ ─ ─ ─ ─ ─ ～ 省略 ～ <!-- ─ ─ スクリプト ─ ─ --> < script type =" text / javascript "> //----] テキストボックス の リスト var input = $(" form [ name = frmInputs ] input [ type = text ]"); //----] イベント セット $( input ). on ( " change ", check ); /*---- 関数 : 入力 チェック ----*/ function check (){ var ok = true ; var keys = new Object (); $( input ). each ( function ( i , elem ){ if ( ! elem . value ){ ok = false ; return true ; } else if ( elem . value in keys ){ alert (" 同一 の 情報 が 入力 さ れ て い ます "); ok = false ; return false ; } keys [ elem . value ] = true ; } ); $( document .fr mInputs . ok ). attr ( " type ", ok ? " submit " : " hidden " ); } </ script > ─ ─ ─ ─ ─ ─ ─ ─ / 
http:// php javascript room . com /? t = html5 & p = tag _ embedded _ content video 、 embed あたり です か ね 。 JavaScript で は 、 jQuery 使え ば 簡単 で 、 $( function (){ $. ajax ({ url : " hogehoge . html ", /* その他 パラメータ いろいろ */ }). done ( function ( data ){ $("# frame "). append ( data ); }); }); < div id =" frame "></ div > みたい に （ ざっくり と です が ） やれ ば 、 ajax で 読み込ん で 、 div 要素 内 に 追加 でき ます 。 
if ( array . join (""). length > 0 ) { window . alert (' 存在 する '); } array の 中身 が 文字列 に 限定 さ れ て いる の で あれ ば 、 空文字 で 連結 し て 長さ が 0 より 大きい 場合 、 という 判定 が 可能 か と 思い ます 。 if ( array . to String (). match (/[ a - z ]/)) { window . alert (' 存在 する '); } to String で 文字列 化 し た 後 に 正規表現 に かける という 方法 も あり そう です 。 
> tomiyuna _ 0626 さん 2016 / 7 / 2223 : 47 : 21 > html で マリオ の 走る とき の はや さ 歩い て いる よう に 画像 を 切り替える 方法 を 教え て ください javascript も 得意 です HTML で は でき ない ので 、 javascript が 得意 なら javascript で やっ て みる と いい と 思い ます 。 
＞② Java script で 、 Excel や LibreOffice の スプレッドシート を 利用 し て 印刷 さ せ たり し て い ます 。 具体 的 に どういう プログラム を 組ん で いる の か 実例 を 載せ た 方 が 良い です 。 
http:// detail . chiebukuro . yahoo . co.jp / qa / question _ detail / q 1411219314 ... 変数 の 変更 なら 恐らく これ で 出来 ます が 、 「 関数 の 値 」 と は 何 でしょ う か ？ どこ が わから ない （ 難しい ） の か わから ない ので 、 そこ を 詳しく 説明 し て もらえる と 解説 し やすい です 。 
paiza ( パイザ ) 利用規約 第 ３ 章 第 １ １ 条 に 違反 し て い ます 
お はこん ばん に ち ゎ ♪ 詳細 の 返信 、 ありがと でし た （ ＾ ▽ ＾ ＊ やり たい 事 が 分かっ た 気 が する ので 、 回答 し ます ね 。 返信 で も いい と 思っ た けど 、 見づらく なり そう な ので 、 再 回答 し ます ♪ ■ ■ ■ リスト の 管理 について ■ ■ ■ まず 、 シャッフル する 画像 、 リンク 先 、 テキスト の リスト だ けど 、 いま の やり方 だ と 、 それぞれ の リスト が 別々 に 管理 さ れ て いる ので 、 あとあと 管理 が し にくい 気 が し ます 。 連想配列 を 使う と 、 リスト アイテム ごと に 、 画像 、 リンク 先 、 テキスト を セット に し て 管理 できる ので 、 メンテナンス が し やすく なる と 思い ます ょ ♪ 連想配列 と は 、 「 キー 」 と 「 値 」 を セット に し て を 保持 する 、 データ の セット の よう な もの です 。 例えば 、 名前 「 ひろし 」 、 年齢 「 37 」 、 趣味 「 独り 酒 」 という データ を " who " という 名前 の 連想配列 に 入れ て 管理 する と 、 / ─ ─ ─ ─ ─ ─ ─ ─ who = { " 名前 ": " ひろし ", " 年齢 ": 37 , " 趣味 ": " 独り 酒 " }; ─ ─ ─ ─ ─ ─ ─ ─ / っていう 感じ に なり ます 。 今回 かきだそ う と し て いる 、 画像 、 リンク 先 、 テキスト を 連想配列 に し て 、 それ を 、 配列 で 管理 する わけ です ね 。 配列 の 名前 を shuffleList と すれ ば 、 / ─ ─ ─ ─ ─ ─ ─ ─ var shuffleList = [ { " src ": " 画像 URL ( 1 )", " href ": " リンク 先 URL ( 1 )", " text ": " テキスト ( 1 )" }, { " src ": " 画像 URL ( 2 )", " href ": " リンク 先 URL ( 2 )", " text ": " テキスト ( 2 )" }, { " src ": " 画像 URL ( 3 )", " href ": " リンク 先 URL ( 3 )", " text ": " テキスト ( 3 )" }, … , { " src ": " 画像 URL ( N )", " href ": " リンク 先 URL ( N )", " text ": " テキスト ( N )" } ] ─ ─ ─ ─ ─ ─ ─ ─ / っていう 感じ に なり ます 。 リスト から 値 を 取り出す 時 は 、 例えば n 番目 の アイテム の 画像 URL で あれ ば 、 / ─ ─ ─ ─ ─ ─ ─ ─ shuffleList [ n ]. src または shuffleList [ n ][ " src " ] ─ ─ ─ ─ ─ ─ ─ ─ / の よう に アクセス し ます 。 ■ ■ ■ 要素 の 書き出し ■ ■ ■ さて 、 この リスト を 使っ て ランダム に 番号 を 選び 、 あと は 書き出す だけ な ので 、 以下 の よう に なり ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var n = Math . floor ( Math . random ()* shuffleList . length ); document . write ("< a href ='"+ shuffleList [ n ]. href +"' target ='_ blank '>"); document . write ("< img src ='"+ shuffleList [ n ]. src +"' style =' border : solid 1 px # 333 ;' width =' 300 ' >"); document . write ("< div class =' jstext '>"+ shuffleList [ n ]. text +"</ div >"); document . write ("</ a >"); ─ ─ ─ ─ ─ ─ ─ ─ / これ で 完了 です * ゜ ▽＾) b ' この 場合 は 、 / ─ ─ ─ ─ ─ ─ ─ ─ < a href ="～" target =" blank "> < img src ="～" style =" border : solid 1 px # 333 " width =" 300 "> < div class =" jstext ">～</ div > </ a > ─ ─ ─ ─ ─ ─ ─ ─ / って なり ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < a href ="～" target =" blank "> < img src ="～" style =" border : solid 1 px # 333 " width =" 300 "> </ a > < div class =" jstext ">～</ div > ─ ─ ─ ─ ─ ─ ─ ─ / に し たい 場合 は 、 / ─ ─ ─ ─ ─ ─ ─ ─ var n = Math . floor ( Math . random ()* shuffleList . length ); document . write ("< a href ='"+ shuffleList [ n ]. href +"' target ='_ blank '>"); document . write ("< img src ='"+ shuffleList [ n ]. src +"' style =' border : solid 1 px # 333 ;' width =' 300 ' >"); document . write ("</ a >"); document . write ("< div class =' jstext '>"+ shuffleList [ n ]. text +"</ div >"); ─ ─ ─ ─ ─ ─ ─ ─ / の よう に 入れ替えれ ば イイ だけ です ね ♪ ■ ■ ■ もう 一つ の やり方 ■ ■ ■ あと 、 document . write () で 書い て も いい の だ けど 、 DOM を 使っ て 要素 を 追加 し て いく 方法 も ある ので 、 紹介 し て おき ます ね ヽ (＾－＾＊ まず 、 コンテンツ を 書き出し た い場所 に < div > 要素 など を 置い て おき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < div id =" shuffle _ content "></ div > ─ ─ ─ ─ ─ ─ ─ ─ / そして 、 この 直後 に < script > タグ を 配置 し て 、 書き出す ため の Java script を 書い て いき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < div id =" shuffle _ content "></ div > < script type =" text / javascript "> </ script > ─ ─ ─ ─ ─ ─ ─ ─ / リスト の 作成 と 、 ランダム 番号 の 取得 まで は まったく 同じ です が 、 要素 を 書き出す ところ で document . write () を 使わ ず 、 document . createElement () で 要素 オブジェクト elem を 生成 し 、 それ を 親 要素 parent に 追加 する 、 っていう 方法 で 書き出し て いき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var elem = document . createElement (" 要素 名 "); parent . appendChild ( elem ); ─ ─ ─ ─ ─ ─ ─ ─ / この コード は 、 下記 の よう に １ 本 に まとめる こと も 出来 ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var elem = parent . appendChild ( document . createElement (" 要素 名 ") ); ─ ─ ─ ─ ─ ─ ─ ─ / この 方法 の 実施 例 が 、 以下 の よう に なり ます ＊ ゜ ▽ ゜ ) o ⌒☆ / ─ ─ ─ ─ ─ ─ ─ ─ < div id =" shuffle _ content "></ div > < script type =" text / javascript "> var shuffleList = [ { " src ": " 画像 URL ( 1 )", " href ": " リンク 先 URL ( 1 )", " text ": " テキスト ( 1 )" }, { " src ": " 画像 URL ( 2 )", " href ": " リンク 先 URL ( 2 )", " text ": " テキスト ( 2 )" }, { " src ": " 画像 URL ( 3 )", " href ": " リンク 先 URL ( 3 )", " text ": " テキスト ( 3 )" }, … , { " img ": " 画像 URL ( n )", " href ": " リンク 先 URL ( n )", " text ": " テキスト ( n )" } ]; var n = Math . floor ( Math . random ()* shuffleList . length ); //----> 親 要素 を 取得 var shuffle _ content = document . getElementById (" shuffle _ content "); //----> 親 ブロック に < a > を 追加 var a = shuffle _ content . appendChild ( document . createElement (" a ") ); a .s etAttribute ( " href ", shuffleList [ n ]. href ); a .s etAttribute ( " target ", "_ blank " ); //----> < a > に < img > を 追加 var img = a . appendChild ( document . createElement (" img ") ); img .s rc = shuffleList [ n ]. src ; img . width = 300 ; img . style. border = " solid 1 px # 333 "; //----> < a > に < div > を 追加 し て 、 テキスト を 書き入れる var jstext = a . appendChild ( document . createElement (" div ") ); jstext . className = " jstext "; jst ex t.i nnerHTML = shuffleList [ n ]. text ; </ script > ─ ─ ─ ─ ─ ─ ─ ─ / この 場合 は 、 / ─ ─ ─ ─ ─ ─ ─ ─ < div id =" shuffle _ content "> < a href ="～" target =" blank "> < img src ="～" style =" border : solid 1 px # 333 " width =" 300 "> < div class =" jstext ">～</ div > </ a > </ div > ─ ─ ─ ─ ─ ─ ─ ─ / っていう 構造 に なり ます 。 これ を / ─ ─ ─ ─ ─ ─ ─ ─ < div id =" shuffle _ content "> < a href ="～" target =" blank "> < img src ="～" style =" border : solid 1 px # 333 " width =" 300 "> </ a > < div class =" jstext ">～</ div > </ div > ─ ─ ─ ─ ─ ─ ─ ─ / の よう に し たい 場合 は 、 / ─ ─ ─ ─ ─ ─ ─ ─ var jstext = a . appendChild ( document . createElement (" div ") ); ─ ─ ─ ─ ─ ─ ─ ─ / を / ─ ─ ─ ─ ─ ─ ─ ─ var jstext = shuffle _ content . appendChild ( document . createElement (" div ") ); ─ ─ ─ ─ ─ ─ ─ ─ / に 変える だけ です 。 ■ ■ ■ どっち が いい の ？ ■ ■ ■ どっち の 方法 でも 大丈夫 です 。 document . write () の 方 が 簡単 な 場合 は document . write () で も いい し 、 document . createElement () で 追加 する 方 が 、 HTML の 構造 を 管理 し やすい 場合 は こっち を 使う と イイ と 思い ます （＾－＾＊ 
> 上記 サイト 様 の サンプル で は chrome で も カクカク し ない の です が 、 考え られる 原因 は 何 か あり ます か ？ Java script と CSS の 差異 が きちんと 処理 さ れ て い ない の が 原因 だ と 思わ れ ます 。 
要素 の 順序 から 対象 に 辿り 着く に は 、 まず . fa から . A まで 上り 、 次に . next で 隣 （ 弟 ） に 進む という 手順 に なり ます 。 . parent (). parent (). parent () と 1つ ずつ 上っ て いっ て も いい です し 、 . parents () で も いい です 。 ここ で は 、 祖先 要素 の うち 直近 の 要素 を 選択 する 、 $. closest を 使っ て み ます 。 sample : traversing node tree by jQuery . closest - JSFiddle https :// jsfiddle .net / sii _ side / ehqd 7 hx 3 / 【 参考 】 jQuery リファレンス ： closest http:// www . jquerystudy . info / reference / traversing / closest . html 
お はこん ばん に ち ゎ ＊＾－＾) ﾉ ■ ■ ■ しくみ ■ ■ ■ 質問 添付 の サイト で 、 中心 から 背景色 が 広がっ て いく 演出 は 、 以下 の よう な HTML の 構成 で 成り立っ て い ます ' d ( ・ ω ・ ＊ （ class 名 など は 実際 と 少し 変え て い ます ） / ─ ─ ─ ─ ─ ─ ─ ─ < div class =" box "> < div class =" inner "></ div > < div class =" inner - text "></ div > </ div > ─ ─ ─ ─ ─ ─ ─ ─ / この 状態 で 、 . box に は 背景 の 画像 を 設定 し 、 その 中 の . inner と . inner - text は 、 「 position : absolute 」 で 重ね合わ せ て い ます 。 . inner は 中心 から 広がる 背景色 の パーツ として 機能 し 、 . inner - text は 、 いちばん 前面 に / ─ ─ ─ ─ ─ ─ ─ ─ Airbnb ホスト の 皆様 ホスト 業務 は 面倒 で は あり ませ ん か ？ ─ ─ ─ ─ ─ ─ ─ ─ / の よう な テキスト を 「 背景 画像 」 として 表示 さ せ て い ます 。 さて 、 マウス を 乗せる と 背景 が 中心 から 広がる し くみ は 、 CSS の transition による もの です 。 まず 、 . inner を 、 サイズ を 小さく し て . box の 中央 に 表示 し ます 。 中央 に 表示 する 方法 として は 、 width , height を 適当 な 小さい 値 で 設定 し 、 100% から それら を 引い た 値 を left や top に 指定 し て 、 中央 に 表示 さ れる よう 座標 を 調整 し て い ます 。 あと は 、 「 opacity 」 を 「 0 」 に し て 透明 に し たり 、 「 border - radius : 50% 」 で 円形 に し たり と 、 細か な 表示 の 設定 です 。 / ─ ─ ─ ─ ─ ─ ─ ─ . inner { position : absolute ; left : 45 % ; top : 45 % ; width : 10 % ; height : 10 % ; border - radius : 50% ; background : # b 0 b 0 b 0 ; opacity : 0 ; } ─ ─ ─ ─ ─ ─ ─ ─ / そして 、 . box に マウス を 乗せ た とき の . inner に対して は 、 . box を 埋め つくす 程度 に 縦横 を 大きく し 、 不透明 度 を 設定 し て 見える よう に し ます 。 left , top も 、 . inner が 中央 に 来る よう に 大き さ に 合わせ て 調整 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ . box :hover . inner { left : - 50% ; top : - 50% ; width : 200 % ; height : 200 % ; opacity : 0 . 5 ; } ─ ─ ─ ─ ─ ─ ─ ─ / あと は 、 「. inner 」 と 「. box :hover . inner 」 の 間 を 、 「 transition 」 で アニメーション さ せ て いる だけ です ヽ ( ゜ ▽ ＾ ＊ / ─ ─ ─ ─ ─ ─ ─ ─ . inner { … transition : all 0 . 3s linear 0 s ; } ─ ─ ─ ─ ─ ─ ─ ─ / この ケース で は 、 背景色 用 に < div > 要素 を 使っ て い ます が 、 . box の : before 擬似 要素 を 使え ば 、 HTML 側 で < div > を 使う 必要 が 無くなり ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < div class =" box "> < img class =" inner - text " alt ="" src ="～"> </ div > < style type =" text / css "> . box { position : relative ; width : 240 px ; height : 320 px ; overflow : hidden ; background : url ("～ 背景 画像 URL ～"); } . box : before { position : absolute ; left : 45 % ; top : 45 % ; width : 10 % ; height : 10 % ; border - radius : 50% ; background : # f6 9 ; opacity : 0 ; transition : all 0 . 3s linear 0 s ; } . box :hover : before { left : - 50% ; top : - 50% ; width : 200 % ; height : 200 % ; opacity : 0 . 5 ; } . box . inner - text { position : absolute ; left : 0 px ; top : 0 px ; z - index : 20 ; width : 100% ; height : 100% ; } </ style > ─ ─ ─ ─ ─ ─ ─ ─ / ■ ■ ■ 開発者 ツール による 検証 ■ ■ ■ 閲覧 中 の ページ の 機能 が どう やっ て 動い て いる の か は 、 FireFox や Google Chrome 、 IE など の ブラウザ で F1 2 を 押す と 開く 開発者 ツール から 検証 する こと が でき ます ' d (＾－＾＊ まず 、 F1 2 を 押し て 開発者 ツール を 開い たら 、 この 回答 に 添付 の 画像 の よう な マーク が ある ので クリック し ます 。 この マーク を クリック し た あと に 、 ページ 上 の 調べ たい 要素 を クリック する と 、 開発者 ツール の 構造 ツリー の 中 から 、 クリック し た 要素 の タグ が 選択 さ れ ます 。 選択 さ れ た タグ は 、 構造 ツリー 上 に は style 属性 の スタイルシート が 表示 さ れ て い て 、 style が 書き換え られる と 、 その 変化 が リアルタイム で 反映 さ れる ので 、 スタイルシート の 変化 の 様子 を 目 で 見る こと が でき ます 。 Java script で style を 書き換え て いる よう な 機能 は 、 この style 属性 の 変化 を みれ ば 、 どういう 仕組み で 動い て いる の か 一目瞭然 です 。 Java script で 動かし て い ない アニメーション の 場合 は 、 CSS の 方 を チェック する と 仕組み が 分かり ます 。 前記 の よう に 、 開発者 ツール の 要素 選択 で 調べ たい 要素 を 選択 する と 、 構造 ツリー と 別枠 で 、 選択 中 の 要素 の CSS 指定 一覧 が 表示 さ れ ます 。 その 中 から 、 「 transition 」 など の アニメーション 設定 を 探せ ば 、 どんな 仕組み で 動い て いる か が 分かり ます 。 他 にも 、 Java script で class 名 を 切替え て いる よう な 機能 は 、 構造 ツリー 上 に class 名 の 変化 が リアルタイム で 反映 さ れる し 、 Java script で HTML 構造 を 変化 さ せる よう な 機能 で は 、 構造 ツリー に その 変化 も リアルタイム で 表示 さ れ ます 。 以上 の よう に 開発者 ツール で 調べ たい 要素 を 選択 し 、 構造 ツリー の リアルタイム な 変化 と 、 CSS 一覧 の 内容 を みくらべる こと で 、 いろいろ な 機能 の しくみ を 検証 する こと が でき ます * ゜ ▽＾) b ' 
① i が 宣言 さ れ て い ない var i = 0 ; 等 の 宣言 が ない に も 関わら ず 、 使用 し て いる ため 、 エラー が 出 て いる 。 ② while ループ が 無限ループ while ( 0 < tokyo . length ) で は 、 無限ループ です 。 ③ ② の 為 、 tokyo [ i ]. value ; で 、 存在 し ない 配列 を 参照 する 。 i = i + 1 で カウントアップ し て いき ます が 、 while が 無限ループ と なっ て いる ため 、 var tokyo = document . getElementsByName (' tokyo '); で 取得 し た tokyo の 配列 以上 の 添え 字 で 参照 しよ う として エラー と なり ます 。 ④ そもそも論 html と javascript を 使っ て 、 簡易 的 な ショッピング サイト を 作成 し て い ます 。 と あり ます が 、 ユーザー が 入力 した値 について 、 どの よう に サイト 管理者 は 把握 する つもり でしょ う か 。 HTML と JavaScript だけ で は 、 ブラウザ 上 で の 動作 だけ です ので 、 サイト 管理者 側 で は 、 ユーザー （ 客 ） 側 が 、 何 を 選ん だ か 、 何 個 選ん だ か を 把握 でき ませ ん よ 。 
お はこん ばん に ち ゎ ＊＾－＾) o 詳しく 解説 し たら 、 えっ らい 長く なり まし た … … σ (＿＿; σ … ﾊﾟﾀ 時間 の あるとき に 、 覚悟 し て 読ん で み て ください (＾－＾； ■ ■ ■ ホームページ を 公開 する ■ ■ ■ ホームページ の 本体 は 、 HTML ファイル （ HTML 形式 の テキストファイル ） で 出来 て い ます 。 この HTML ファイル は 、 ページ の 内容 を HTML の コード で 記述 し た 、 ただ の テキストファイル な ので 、 Windows パソコン に 標準 装備 さ れ て いる 「 メモ帳 」 とか でも 作れ ます 。 ページ に 画像 や 音声 を 載せる とき は 、 HTML ファイル の なか に 、 画像 ファイル や 音声 ファイル を 読み込む コード を 記述 する こと で 、 画像 ファイル を 表示 し たり 、 音声 ファイル を 再生 し たり し ます 。 こうして 作成 し た HTML ファイル と 、 HTML で 読み込む 画像 や 音声 など の ファイル 一式 を 、 インターネット 上 に 設置 さ れ た 「 Web サーバー 」 っていう コンピュータ に 送信 （ アップロード ） すれ ば 、 作成 し た ホームページ が インターネット 上 に 公開 さ れ ます 。 ファイル を アップロード する サーバー は 、 自分 で 用意 する の は 経済的 に も 技術 的 に も 大変 な こと な ので 、 通常 は 「 レンタルサーバー 」 を 利用 し ます 。 「 レンタルサーバー 」 の 運営 サイト に アクセス し て 、 そこで アカウント を 作成 する と 、 ファイル を アップロード する スペース を 提供 し て もらえ ます ヽ ( ・ ω ・ ＊ レンタルサーバー で アカウント を 作成 し たら 、 あと は 、 作成 し た ホームページ の ファイル 一式 を アップロード すれ ば 、 公開 完了 です ＊ ゜ ▽＾) b ' ■ ■ ■ 作成 ソフト を 用意 する ■ ■ ■ 「 メモ帳 」 の よう な 標準 の テキストエディタ で も 作れ ます が 、 HTML 編集 用 の 「 HTML エディタ 」 を 使う と 、 コード が 色分け さ れ て 見やすかっ たり 、 ページ の プレビュー が ワンタッチ で でき たり と 、 HTML の コーディング 作業 が し やすく なり ます 。 現状 、 使い やすく て オススメ な エディタ は / ─ ─ ─ ─ ─ ─ ─ ─ ・ StyleNote 5 [ http:// sn . lowedge . com / ] ・ HTML Project 2 [ http:// beginner s - hp . com / html _ project 2 _ about . html ] ・ ezHTML [ http:// www . w - frontier . com / software / ezhtml . html ] ─ ─ ─ ─ ─ ─ ─ ─ / あたり です 。 どれ も 無料 で 使え ます ♪ 使い やすさ から いう と 「 StyleNote 5 」 が ベスト な の だ けど 、 この ソフト は 最近 バージョンアップ し て から 、 ちょっと 致命 的 な バグ が 起き て い ます 。 [ HTML5 の 不具合 ] http:// support . lowedge . com / support / topic / ver - 5 - 20 -% E3 % 82 % AF % E3 % 83 % A ... 使い やす さ や 機能 性 が ずば抜け て 優秀 な ソフト な だけ に 残念 です 。 「 StyleNote 5 」 を 使う 場合 は 、 実行ファイル 「 sn 5 . exe 」 を あらかじめ 別 の 場所 に コピー し て おい て 、 バグ が 起き た とき は 、 「 タスク マネージャ 」 から ソフト を 強制終了 し て から 、 実行ファイル 「 sn 5 . exe 」 を 、 コピー し て おい た 「 sn 5 . exe 」 で 上書き する よう に し ましょ う 。 現状 は 「 HTML Project 2 」 が いちばん 無難 です 。 ■ ■ ■ 白紙 の ページ を つくる ■ ■ ■ ソフト を 用意 出来 たら 、 さっそく ページ を 作っ て み ましょ う 。 ここ で は 、 とりあえず の コード の 書き方 だけ を 説明 する ので 、 HTML 、 CSS 、 Java script の 基本 的 な 知識 について は 、 別途 、 各自 で 調べ て 身 に 着け て ください m(__)m HTML は 、 文書 の パーツ を タグ で 囲っ て 記述 する こと で 、 囲わ れ た 部分 に 文書 パーツ として の 役割 を 与え ます 。 例えば 、 大 見出し の タグ は < h1 > という タグ です 。 大 見出し に し たい 部分 を < h1 >～</ h1 > で 囲う と 、 文書 の 構成 の なか で 、 大 見出し として の 役割 を 持ち ます 。 タグ の 種類 は いろいろ あり ます が 、 / ─ ─ ─ ─ ─ ─ ─ ─ ・ 段落 ： < p > 文章 </ p > ・ ハイパーリンク : < a href =" リンク 先 URL "> リンク 文字 </ a > ・ 画像 : < img src =" 画像 ファイル の パス "> ・ 汎用 ブロック : < div > コンテンツ </ div > ─ ─ ─ ─ ─ ─ ─ ─ / など が 頻繁 に 使わ れる タグ です 。 HTML に は 、 最低限 必要 な コード や タグ が いくつ か あっ て 、 それら の タグ を 記述 し た 状態 が 、 HTML 文書 として の 「 白紙 の 状態 」 です 。 まずは 、 白紙 の ページ を 作り ましょ う 。 ソフト を 起動 し たら 、 「 新規作成 」 から 新規 ファイル を 開き ます 。 最初 に 「 文書型宣言 （ DOCTYPE 宣言 ） 」 を 書き ます 。 これ は 、 記述 する HTML の バージョン を 宣言 する コード で 、 インターネット ブラウザ で ページ を 表示 する とき 、 この 宣言 を もと に し て コード が ページ に 変換 さ れ ます 。 文書型宣言 は 、 以前 は すごく 長く て 面倒くさい コード でし た が 、 最新 の HTML5 に なっ て から 、 すっきり 簡単 に なり まし た 。 / ─ ─ ─ ─ ─ ─ ─ ─ <! DOCTYPE html > ─ ─ ─ ─ ─ ─ ─ ─ / これ だけ です 。 その あと に 、 HTML 文書 の 外 枠 と なる < html >～</ html > を 記述 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ <! DOCTYPE html > < html > </ html > ─ ─ ─ ─ ─ ─ ─ ─ / < html > タグ の 中身 を 、 ページ に は 表示 さ れ ない 設定 情報 など を 記述 する < head > 要素 と 、 ページ に 実際 に 表示 さ れる 本文 を 記述 する < body > 要素 に 分割 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ <! DOCTYPE html > < html > < head > </ head > < body > ～ コンテンツ 本文 ～ </ body > </ html > ─ ─ ─ ─ ─ ─ ─ ─ / 最後 に 、 < head >～</ head > の なか に 、 ページ の タイトル を 決める < title > タグ を 記述 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ <! DOCTYPE html > < html > < head > < title > ページ の タイトル </ title > </ head > < body > ～ コンテンツ 本文 ～ </ body > </ html > ─ ─ ─ ─ ─ ─ ─ ─ / はいっ ♪ これ で 「 白紙 の HTML 文書 」 が でき まし た 。 どの ページ を 作る とき も 、 この 状態 から ページ の 内容 を 作っ て いく こと に なり ます 。 「 ファイル 」 メニュー の 「 保存 」 から 、 この ファイル を 「 index . html 」 の 名前 で 保存 し ましょ う 。 なお 、 ホームページ で 使う ファイル 名 や フォルダ 名 は 、 半角 英数字 のみ に し て おき ましょ う 。 保存 し た ファイル を 、 閲覧 する ページ として 開く とき は 、 保存 し た ファイル の アイコン を ダブルクリック する こと で 、 インターネット ブラウザ が 起動 し て ページ が 表示 さ れ ます 。 編集 する とき は 、 今回 使っ た HTML エディタ で ファイル を 開き ます 。 HTML エディタ で 編集 中 は 、 ファイル の アイコン を いちいち ダブルクリック し なく て も 、 エディタ に は ワンタッチ の 「 プレビュー 」 機能 が 付い て いる ので 、 ワンタッチ で プレビュー が 可能 です 。 プレビュー の ボタン など は 、 エディタ によって 違う ので 、 各 エディタ の 操作 方法 を 参照 し て ください ♪ ■ ■ ■ 音声 ファイル を 再生 する ■ ■ ■ ページ で 音声 ファイル を 再生 する に は 、 HTML ファイル と 一緒に 、 音声 ファイル を 用意 し ない と いけ ませ ん 。 音声 ファイル の 形式 は 、 現状 で は mp3 ファイル を 用意 すれ ば 、 だいたい どの ブラウザ で も 対応 し て い て 再生 でき ます 。 HTML ファイル が 保存 さ れ て いる フォルダ に 、 音声 ファイル を 入れる フォルダ を 作っ て 、 その 中 に 音声 ファイル を 置い て おき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ [ ホームページ 用 の フォルダ ] . . ├ ─ [ audio ] . . │ . . . └ ─ sample . mp3 . . └ ─ index . html ─ ─ ─ ─ ─ ─ ─ ─ / この 状態 で 、 HTML ファイル [ index . html ] から 、 音声 ファイル [ sample . html ] を 参照 する ため の パス （ 経路 ） は 、 / ─ ─ ─ ─ ─ ─ ─ ─ ./ audio / sample . mp3 ─ ─ ─ ─ ─ ─ ─ ─ / っていう ふう に なり ます 。 「 ./」 は 「 同じ フォルダ 内 」 という 意味 で 、 「 audio 」 は [ audio ] フォルダ を 指し て い ます 。 「 /」 は 「 その フォルダ の 中 」 っていう 意味 な ので 、 / ─ ─ ─ ─ ─ ─ ─ ─ 同じ フォルダ 内 に ある [ audio ] フォルダ の 中 の [ sample . mp3 ] ─ ─ ─ ─ ─ ─ ─ ─ / って い 意味 です ね 。 HTML ファイル で は 、 ページ 内 で 再生 し たい 音声 ファイル を 、 パス を 指定 し て 読み込み ます 。 音声 ファイル を 読み込む タグ は < audio > タグ です 。 / ─ ─ ─ ─ ─ ─ ─ ─ < audio src ="./ audio / sample . mp3 "></ audio > ─ ─ ─ ─ ─ ─ ─ ─ / < audio > タグ も ページ の コンテンツ な ので 、 「 白紙 の ページ 」 の なか の < body >～</ body > の なか に 記述 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ <! DOCTYPE html > < html > < head > < title > ページ の タイトル </ title > </ head > < body > 音声 ファイル を 読み込む よっ ♪ < audio src ="./ audio / sample . mp3 "></ audio > </ body > </ html > ─ ─ ─ ─ ─ ─ ─ ─ / ただし 、 この < audio > タグ は 、 通常 は 音声 ファイル を 読み込む だけ で 、 ビジュアル として は ページ に は 表示 さ れ ませ ん 。 < audio > タグ に 「 controls 」 属性 を 指定 する と 、 オーディオ プレイヤー の 操作 パネル が 表示 さ れ ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < audio src ="～" controls ></ audio > ─ ─ ─ ─ ─ ─ ─ ─ / 読み込ん だ 音声 を 、 ページ を 開い た とき に 自動 再生 する 場合 は 、 < audio > タグ に 「 autoplay 」 属性 を 指定 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < audio src ="～" autoplay ></ audio > ─ ─ ─ ─ ─ ─ ─ ─ / ■ ■ ■ クリック し て 再生 ■ ■ ■ 読み込ん だ 音声 ファイル を 、 ボタン を クリック し て 再生 する に は 、 < audio > 要素 に対して 、 Java script を 使っ て 「 再生 」 の 指令 を だし ます 。 クリック し た とき に Java script の 処理 を 発動 さ せる に は 、 いろいろ な 方法 が あり ます が 、 ここ で は 、 ボタン 要素 < button > の onclick 属性 に 、 処理 を 指定 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < button onlick ="～ 再生 する ため の Java script コード ～"> 音声 を 再生 </ button > ─ ─ ─ ─ ─ ─ ─ ─ / Java script で < audio > 要素 の 音声 を 再生 する に は 、 / ─ ─ ─ ─ ─ ─ ─ ─ ( < audio > 要素 ). play (); ─ ─ ─ ─ ─ ─ ─ ─ / という コード を 書く の だ けど 、 ( < audio > 要素 ) っていう 部分 に 、 Java script で < audio > 要素 を オブジェクト として 取得 し た もの が 必要 です 。 < audio > 要素 を Java script で 指名 し て 取得 する ため に 、 < audio > タグ に 適当 な id 属性 を 付け て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ < audio id =" myAudio " src ="./ audio / sample . mp3 "></ audio > ─ ─ ─ ─ ─ ─ ─ ─ / 
イベント の 発生 源 と なっ た 最深 の 要素 は 、 event . target で 参照 する こと が でき ます 。 バブリング 、 または キャプチャ リング 中 の 、 現在 通過 中 の 要素 は event . currentTarget です 。 sample : detecting event target from event object - JSFiddle https :// jsfiddle .net / sii _ side / 9cm yqp 55 / です ので 、 event . target が a 要素 の 場合 と そう で ない 場合 、 という 分岐 が 可能 か と 思い ます 。 もちろん 、 逆 に event . target が div 要素 で ある 場合 、 という 分岐 の さ せ 方 も 可能 です 。 a 要素 だけ で なく p 要素 も 含め たく ない の で あれ ば 、 こちら を 選択 する こと と なる でしょ う 。 
子孫 要素 を 基準 に その 祖先 要素 を 選択 する 方法 は 、 Selectors Level 4 で 策定 中 です 。 現在 は まだ 各 ブラウザ とも 実装 さ れ て い ない よう です ので 、 CSS で は 不可能 という こと か と 思い ます 。 実装 が 進め ば 、 li : has (. aaa ) { display : none ; } こんな 感じ で 、 そのうち 書ける 日 が 来る の で は ない か と 思い ます （ ブラウザ で 実際 に 試せ ない ので 「 恐らく 」 です ） 。 その ため 、 今 やる なら Greasemonkey とか Tampermonkey から ユーザー スクリプト で 消す しか 無い の で は ない でしょ う か 。 
javax . script の jar ファイル を lib フォルダ に いれ まし た か ？ 
基本的 に 列 構造 は 一度 決め たら 変え ませ ん 。 id date hoge - - - - - - ------------------------- 1 2016 / 08 / 04 111111111 2 2016 / 08 / 04 222222222 3 2016 / 08 / 04 333333333 4 2016 / 08 / 05 000000000 5 2016 / 08 / 05 999999999 6 2016 / 08 / 05 888888888 みたい な 構造 に する 、 という 方法 は あり ます 。 
on click 等 の イベント で 、 デフォルト で の 動作 （ submit 等 ） を 発生 さ せ ない とき に return false ; を 指定 し ます 。 ( イベント 自体 を 無効 に する ） < input type =" submit " onClick =" func ();"/> function func (){ // aaa が 0 だっ たら 、 submit は し ない if ( aaa == 0 ){ return false ; } } という こと は 、 入れ ない と 、 イベント 発生 さ せ たく ない とき に も 、 イベント が 発生 し て 、 予定 外 の 処理 を する よう な こと に なっ て しまい ます 。 
お はこん ばん に ち ゎ o (＾－＾＊ ■ ■ ■ しくみ ■ ■ ■ やり たい こと を 一望 し て みる と 、 どうやら 「 あいさつ 」 と 「 野菜 」 の ペア が / ─ ─ ─ ─ ─ ─ ─ ─ ( 1 ) あいさつ = こんにちは , 野菜 = トマト ( 2 ) あいさつ = ありがとう , 野菜 = ピーマン ( 3 ) あいさつ = さようなら , 野菜 = ニンジン ─ ─ ─ ─ ─ ─ ─ ─ / … と ３ 通り あっ て 、 ボタン A を 押し た とき は ( 1 ) だけ 、 ボタン B を 押し た とき は ( 1 )+( 2 ) 、 ボタン C を 押し た とき は ( 1 )+( 2 )+( 3 )、 っていう ふう に 表示 を コントロール する っていう 内容 です ね 。 な ので 、 まずは 「 あいさつ 」 と 「 野菜 」 の 組み合わせ を 連想配列 に し て み ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ ( 1 ) { " greeting ": " こんにちは ", " vegetable ": " トマト " } ( 2 ) { " greeting ": " ありがとう ", " vegetable ": " ピーマン " } ( 3 ) { " greeting ": " さようなら ", " vegetable ": " ニンジン " } ─ ─ ─ ─ ─ ─ ─ ─ / この ３つ の 連想配列 を 、 配列 に いれ て データ の リスト として 作っ て おき ましょ う ＊ ・ ω ・ ) b ' / ─ ─ ─ ─ ─ ─ ─ ─ var DataList = [ { " greeting ": " こんにちは ", " vegetable ": " トマト " }, { " greeting ": " ありがとう ", " vegetable ": " ピーマン " }, { " greeting ": " さようなら ", " vegetable ": " ニンジン " } ]; ─ ─ ─ ─ ─ ─ ─ ─ / … っ はい ♪ これ で 準備 が 完了 し まし た ' d ( ゜ ▽ ＾ ＊ この データ を 使え ば 、 ボタン と 表示 を 簡単 に 連動 さ せ られ ます ね 。 ボタン A を 押し た とき は 、 配列 DataList の １ 番目 だけ を 表示 。 ボタン B を 押し た とき は 、 配列 DataList を ２ 番目 まで 表示 。 ボタン C を 押し た とき は 、 配列 DataList を ３ 番目 まで 表示 。 っていう 処理 を すれ ば いい です ね ♪ ■ ■ ■ コード の 作り方 ■ ■ ■ HTML で 各 要素 を 構成 し て いき ます 。 まず 、 A 、 B 、 C の ３つ の ボタン を 用意 し ます 。 ボタン は 適当 な ブロック で 囲っ て おく と 、 周囲 の コンテンツ と 分離 でき て 扱い やすい です 。 ここ で は < form > 要素 の なか に 入れ て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ < form name =" buttons "> < input type =" button " value =" A "> < input type =" button " value =" B "> < input type =" button " value =" C "> </ form > ─ ─ ─ ─ ─ ─ ─ ─ / その 下 に 、 「 あいさつ 」 と 「 野菜 」 の 見出し と 、 テキスト を 表示 する ため の ブロック を 用意 し ます 。 これ も 見出し ごと に ブロック で 区切っ て おく と 、 管理 し やすい です 。 テキスト を 表示 する ブロック に は 、 共通 の クラス 名 を つけ て おく と Java script で 操作 し やすい です 。 / ─ ─ ─ ─ ─ ─ ─ ─ < div id =" greeting "> < h1 > あいさつ </ h1 > < div class =" output "></ div > </ div > < div id =" vegetable "> < h1 > 野菜 </ h1 > < div class =" output "></ div > </ div > ─ ─ ─ ─ ─ ─ ─ ─ / 以上 で HTML は 出来上がり 。 Java script を 記述 する 為 の < script > タグ を 用意 し ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ < script type =" text / javascript "> ～ ここ に Java script の コード を 記述 し て いく </ script > ─ ─ ─ ─ ─ ─ ─ ─ / まず 、 先ほど 説明 し た 配列 DataList を 定義 し て おき ます ね 。 / ─ ─ ─ ─ ─ ─ ─ ─ var DataList = [ { " greeting ": " こんにちは ", " vegetable ": " トマト " }, { " greeting ": " ありがとう ", " vegetable ": " ピーマン " }, { " greeting ": " さようなら ", " vegetable ": " ニンジン " } ]; ─ ─ ─ ─ ─ ─ ─ ─ / あと は 、 各 ボタン を 押し た とき に 実行 する 処理 を 、 Java script の 関数 として 作っ て おき ます ヽ ( ・ ω ・ ＊ 各 ボタン を 押し た とき に 実行 する 処理 は 、 / ─ ─ ─ ─ ─ ─ ─ ─ 配列 DataList の 内容 を ○ 番目 まで 表示 する ─ ─ ─ ─ ─ ─ ─ ─ / っていう 内容 でし た ね 。 関数 名 を outputData () と でも し て おく と 、 / ─ ─ ─ ─ ─ ─ ─ ─ function outputData ( n ){ //----] テキスト の 出力 先 を 取得 var output = { " greeting ": document . querySelector ("# greeting . output "), " vegetable ": document . querySelector ("# vegetable . output ") }; //----] n 番目 まで の データ を 取り出す var data = { " greeting ": new Array (), " vegetable ": new Array () }; for ( var i = 0 ; i < n ; i ++){ data . greeting . push ( DataList [ i ]. greeting ); data . vegetable . push ( DataList [ i ]. greeting ); } //----] 取り出し た データ を 連結 し て 表示 output . greeting . innerHTML = data . greeting . join ("、"); output . vegetable . innerHTML = data . vegetable . join ("、"); } ─ ─ ─ ─ ─ ─ ─ ─ / これ で 関数 は 完成 です 。 あと は 、 この 関数 を 、 各 ボタン の onclick に 仕込む だけ ♪ / ─ ─ ─ ─ ─ ─ ─ ─ < form name =" buttons "> < input type =" button " value =" A " onclick =" outputData ( 1 )"> < input type =" button " value =" B " onclick =" outputData ( 2 )"> < input type =" button " value =" C " onclick =" outputData ( 3 )"> </ form > ─ ─ ─ ─ ─ ─ ─ ─ / 以上 で 完成 です o (＊＾▽＾＊) o ■ ■ ■ 実施 例 ■ ■ ■ 以上 を まとめ て 、 全体 の ソース の 実施 例 を 示し ます ＊ ・ ω ・ ) o ⌒★ / ─ ─ ─ ─ ─ ─ ─ ─ <! DOCTYPE html > < html > < head > < title > ページ タイトル </ title > </ head > < body > <!-- ─ ─ ボタン ─ ─ --> < form name =" buttons "> < input type =" button " value =" A " onclick =" outputData ( 1 )"> < input type =" button " value =" B " onclick =" outputData ( 2 )"> < input type =" button " value =" C " onclick =" outputData ( 3 )"> </ form > <!-- ─ ─ 出力 先 ─ ─ --> < div id =" greeting "> < h1 > あいさつ </ h1 > < div class =" output "></ div > </ div > < div id =" vegetable "> < h1 > 野菜 </ h1 > < div class =" output "></ div > </ div > <!-- ─ ─ スクリプト : データ 表示 ─ ─ --> < script type =" text / javascript "> /*---- データ リスト ----*/ var DataList = [ { " greeting ": " こんにちは ", " vegetable ": " トマト " }, { " greeting ": " ありがとう ", " vegetable ": " ピーマン " }, { " greeting ": " さようなら ", " vegetable ": " ニンジン " } ]; /*---- 関数 : n 番目 まで の データ を 出力 ----*/ function outputData ( n ){ var output = { " greeting ": document . querySelector ("# greeting . output "), " vegetable ": document . querySelector ("# vegetable . output ") }; var data = { " greeting ": new Array (), " vegetable ": new Array () }; for ( var i = 0 ; i < n ; i ++){ data . greeting . push ( DataList [ i ]. greeting ); data . vegetable . push ( DataList [ i ]. vegetable ); } output . greeting . innerHTML = data . greeting . join ("、"); output . vegetable . innerHTML = data . vegetable . join ("、"); } </ script > </ body > </ html > ─ ─ ─ ─ ─ ─ ─ ─ / 
文法 の 間違い が 多 すぎる と 言わ れ て い ます 。 考え られる の は ・ 根本 から 間違え て 理解 し て いる → はじめ から 勉強 し なおす ・ 前 の 方 の 間違い ( それ 自体 は 文法 上 正しい ) の せい で 後ろ の 文 が 多数 間違い と みなさ れ て しまっ て いる → プログラム を 最初 から 1 行 1 行 見直す 
> hana 0m eiboku さん 他 の JS が 干渉 し て いる と おもい ます 。 まずは 、 他 の プラグイン 等 を はずし て 試し て 原因 を 特定 し て みる と 良い と 思い ます ・ 
if ( x === undefined ){ } で 、 undefined 判定 でき ます 。 （ 否定 の 場合 は !==) 
> tenkuzitakeru _ ghost さん 2016 / 7 / 2009 : 00 : 01 > どういう プログラム に し たら いい です か わかる 方 至急 教え て ください 至急 必要 なら やっ た ものの 提示 くらい は 必要 です 。 それ 以外 で 至急 必要 な 場合 は 業者 に 頼む べき です 。 
一定 間隔 で 表示 する 方法 は 、 setInterval を 使用 し ます 。 また 、 ラジオボタン 選択 で の 切り替え は 、 ラジオボタン ごと に 、 setInterval で 指定 する 時間 を 変化 さ せ ます 。 合計 の 確認 部分 は ありません が 、 一定 間隔 表示 と 、 ラジオボタン 切り替え の 処理 を 作成 し て み まし た ので 、 ご 参考 ください 。 < html > < head > < meta charset =" UTF-8 "> < style type =" text / css "> div # disp { width : 100 px ; height : 100 px ; text - align : center ; vertical - align : middle ; display : table - cell ; border : 2 px solid black ; font - size : 40 px ; } </ style > < script type =" text / javascript "> /* 変数 */ var timer _ id = undefined ; var sum = 0 ; var count = 0 ; var MAX _ COUNT = 5 ; // 最大 表示回数 /* 文字 表示 開始 */ function showDisp ( timer ){ // 動作 中 の 場合 は 、 動作 を 止める if ( timer _ id !== undefined ){ clearInterval ( timer _ id ); count = 0 ; } // 一定 間隔 起動 timer _ id = setInterval ( function (){ // 最大 回数 に 達し たら 終了 if ( count == MAX _ COUNT ){ document . getElementById (" disp "). innerText = ""; count = 0 ; sum = 0 ; clearInterval ( timer _ id ); return ; } // 乱数 から 0 ～ 9 の 数字 を 生成 var rand = Math . floor ( Math . random () * 10 ) ; // 画面 に 表示 document . getElementById (" disp "). innerText = rand ; // 合計 を 計算 sum = su m + 1 ; // カウントアップ count = count + 1 ; }, timer ); } </ script > </ head > < body onLoad =" showDisp ( 1000 )"> <!-- 数字 表示 部分 --> < div id =" disp "></ div > <!-- 表示 速度 選択 --> < table border =" 0 "> < tr > < td >< input type =" radio " id =" srow " onClick =" showDisp ( 1000 );" checked > 低速 </ td > < td >< input type =" radio " id =" middle " onClick =" showDisp ( 500 );"> 中 速 </ td > < td >< input type =" radio " id =" fast " onClick =" showDisp ( 250 );"> 高速 </ td > < td >< input type =" radio " id =" veryfast " onClick =" showDisp ( 100 );"> 超 高速 </ td > </ tr > </ table > </ body > </ html > 
> supernova _ osafu さん > フォーム から 送信 さ れ た 画像 データ を $_ FILE で は なく 、 $_ POST で 受け取り 、 テキストファイル に 書き込む という こと など は 可能 でしょ う か ？ 可能 です ね 。 
HTML は javascipt で CSS の display を none ⇔ block に 切り替え て い ます 。 オッズ データ は http:// race . netkeiba.com / に 非同期 の POST 送信 で リクエスト を 投げ て い ます 。 送信 し て いる フォーム データ は 、 ブラウザ の 開発者 ツール ⇒ ネットワーク 、 で 確認 でき ます 。 
> kazuyan 774 さん > 設定 の 何 か が 間違っ て いる と は 思う の です が 、 いかんせん スキル が ない ・ 周り に も いない という こと で こちら に 質問 する こと と なり まし た 。 設定 で は あり ませ ん 。 プログラム に なり ます 。 
まず 、 jQuery UI 用 の CSS ファイル が 読み込ま れ て い ませ ん 。 CSS を 読み込ま ない と 、 想定 し た 画面 が 表示 さ れ ませ ん 。 以下 の 行 を 追加 し て ください 。 （ なお 、 css ファイル は ダウンロード し て 、 jss フォルダ に 入れ て ください ） < link rel =" stylesheet " href =" jss / jquery - ui . css "/> 上記 CSS を 導入 し て も 、 スライド バー が 表示 さ れ ない 場合 は 、 フォルダ の 構成 が あっ て い ない 可能性 が あり ます 。 （ JS ファイル 、 CSS ファイル が 読め て ない ） 
Wikipedia - JSON https :// ja . wikipedia . org / wiki / JavaScript _ Object _ Notation 「 JSON は JavaScript における オブジェクト 表記法 の サブ セット 」 サブ セット は この 場合 「 一部 制限 が 課さ れ た もの 」 という 意味 です が ， 具体 的 に 何 が 違う の か と いう と … ・ コメント を 書け ない ・ 文字列 リテラル は ' " の どちら か では なく ， " で 括る よう に 統一 し なけれ ば なら ない ・ オブジェクト の キー も 必ず " で 括ら なけれ ば なら ない ・ 最後 の 要素 の 後 に , を つけ て は なら ない など の 違い が あり ます ． 
２つ の 数値 間 の 総和 を 求める で いい の か な ？ （ 10 と 25 だっ たら 、 10 ～ 25 の 合計 ） function sums ( start , end ){ var sum = 0 ; for ( num = start ; num <= end ; mum ++) { sum += num ; } return sum ; } 
この タグ を html 中 に 入れる だけ の よう な 気 も し ます が ... 
公式 で は jQuery 1 . x 系 を 使っ てる よう です ので 、 そちら で 試し て み て は 。 jQuery は 、 新しけれ ば 良い という もの で は なく 、 1 . x 系 、 2 . x 系 、 3 . x 系 で 互換性 が ない 部分 も 多い です 。 
var Array = form . v 1 . value .s plit (","); Array は 、 配列 を 扱う オブジェクト し て 予約 さ れ て いる ので 、 使用 し て は いけ ませ ん 。 var arr = form . v 1 . value .s plit (","); あたり に 直し て ください 。 そのうえで 、 var s = 0 ; var arr = form . v 1 . value .s plit (","); for ( var i = 0 ; i < arr . length ; i ++) { // 配列 の 長さ 分 の 繰り返し s += Number ( arr [ i ]); // 文字列 を 数値 に 変換 } と すれ ば いい か と 。 split メソッド は あくまで 「 文字列 」 を 分割 し ます ので 、 分割 し て でき た 配列 の 値 は すべて 文字列 と なり ます 。 その 文字列 を += し て いく と 、 末尾 に 追加 さ れ て いる だけ と なる ので 、 数値 に 変換 し た うえ で 、 計算 し て いき ます 。 
Chrome エクステンション とか なら JavaScript で 余裕 で でき ます ね FetchAPI 使っ て も いい です が ， 従来 通り jQuery で も 全然 構い ませ ん 私 は Twitter の 公式 Web を エクステンション で 改造 し て 正規表現 ミュート 機能 つけ て ます ↓ http:// qiita . com / mpyw / items / ef 54 c 27 c 9 c5 4 fbb 360 bd 
お はこん ばん に ち ゎ （＾－＾＊ いま 、 テーブル が 以下 の よう な 状態 だっ た と し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < table id =" myTable "> < tr >< td > A1 </ td >< td > A 2 </ td >< td > A3 </ td >< td > A 4 </ td ></ tr > < tr >< td > B 1 </ td >< td > B2 </ td >< td > B 3 </ td >< td > B4 </ td ></ tr > < tr >< td > C1 </ td >< td > C 2 </ td >< td > C3 </ td >< td > C4 </ td ></ tr > < tr >< td > D1 </ td >< td > D2 </ td >< td > D3 </ td >< td > D4 </ td ></ tr > < tr >< td > E 1 </ td >< td > E2 </ td >< td > E3 </ td >< td > E 4 </ td ></ tr > < tr >< td > F1 </ td >< td > F2 </ td >< td > F3 </ td >< td > F4 </ td ></ tr > < tr >< td > G1 </ td >< td > G2 </ td >< td > G3 </ td >< td > G 4 </ td ></ tr > </ table > ─ ─ ─ ─ ─ ─ ─ ─ / この テーブル で 、 「 チェック の つい た行 」 っていう の が [ 1 , 2 , 4 ] 行 目 だ として 、 その ２ 列 目 と 、 ４ 列 目 の 内容 を 取り出す ん です よ ね 。 それ を 「 多次元 配列 に いれる 」 って い の は 、 結果 として 下記 の よう な ２ 次元 配列 を つくる っていう こと で 合っ て い ます か ？ / ─ ─ ─ ─ ─ ─ ─ ─ ( ２ 次元 配列 ) = [ [ B2 , B4 ], [ C 2 , C4 ], [ E2 , E 4 ] ]; ─ ─ ─ ─ ─ ─ ─ ─ / その 前提 で 回答 する ので 、 違っ て い たら 、 補足 または 、 この 回答 へ の 返信 で 教え て ください m(__)m まず 、 チェック の つい た行 の リスト を targetRow として 、 / ─ ─ ─ ─ ─ ─ ─ ─ targetRow = [ 1 , 2 , 4 ]; ─ ─ ─ ─ ─ ─ ─ ─ / の よう に 取得 でき て いる と し ます 。 この 配列 targetRow に 格納 さ れ て いる 行番号 の 行 で 、 ２ 列 目 、 ４ 列 目 の セル 内容 を 取り出す ので 、 取り出す 列 の リスト も 配列 で 作っ て 置き ましょ う 。 番号 は 0 から カウント する ので 、 ２ 、 ４ 行 目 の 番号 は 1 、 3 に なり ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var targetCol = [ 1 , 3 ]; ─ ─ ─ ─ ─ ─ ─ ─ / 多次元 配列 として 値 を いれる 配列 も 、 空っぽ の 状態 で 用意 し て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ var list = new Array (); ─ ─ ─ ─ ─ ─ ─ ─ / さて 、 for () ループ で テーブル の 中 の セル を スキャン し て いく の だ けど 、 すべて の セル を 見る 必要 は ない です ね 。 行 について は 、 targetRow に 格納 さ れ て いる 番号 の 行 だけ を 、 列 について は 、 targetCol に 格納 さ れ て いる 番号 の 列 だけ を 、 それぞれ 見 て いけ ば ＯＫ です 。 な ので 、 / ─ ─ ─ ─ ─ ─ ─ ─ for ( var r = 0 , rowlen = targetRow . length ; r < rowlen ; r ++ ){ for ( var c = 0 , collen = targetCol . length ; c < collen ; c++ ){ … } } ─ ─ ─ ─ ─ ─ ─ ─ / の よう に 、 targetRow と targetCol の 範囲 だけ で ループ を 回せ ば いい です ね ♪ 配列 list の 中身 は 、 各行 ごと の 要素 を さらに 配列 に し て ２ 次元 配列 に する ので 、 行 を スキャン する for () 文 の 最初 に 、 その 行 の 配列 を 用意 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ for ( var r = 0 , rowlen = targetRow . length ; r < rowlen ; r ++ ){ list . push ( new Array () ); for ( var c = 0 , collen = targetCol . length ; c < collen ; c++ ){ … } } ─ ─ ─ ─ ─ ─ ─ ─ / あと は 、 ２ 重 に なっ た for () 文 の 中 で 、 各 セル の 内容 を ２ 次元 配列 list に 格納 し て いけ ば いい です ね 。 / ─ ─ ─ ─ ─ ─ ─ ─ for ( var r = 0 , rowlen = targetRow . length ; r < rowlen ; r ++ ){ list . push ( new Array () ); for ( var c = 0 , collen = targetCol . length ; c < collen ; c++ ){ var value = table . rows [ targetRow [ r ] ]. cells [ targetCol [ c ] ]. innerHTML ; list [ list . length - 1 ]. push ( value ); } } ─ ─ ─ ─ ─ ─ ─ ─ / 以上 を まとめる と 、 ソースコード の 実施 例 は 以下 の よう に なり ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ <!-- ─ ─ テーブル ─ ─ --> < table id =" myTable "> < tr >< td > A1 </ td >< td > A 2 </ td >< td > A3 </ td >< td > A 4 </ td ></ tr > < tr >< td > B 1 </ td >< td > B2 </ td >< td > B 3 </ td >< td > B4 </ td ></ tr > < tr >< td > C1 </ td >< td > C 2 </ td >< td > C3 </ td >< td > C4 </ td ></ tr > < tr >< td > D1 </ td >< td > D2 </ td >< td > D3 </ td >< td > D4 </ td ></ tr > < tr >< td > E 1 </ td >< td > E2 </ td >< td > E3 </ td >< td > E 4 </ td ></ tr > < tr >< td > F1 </ td >< td > F2 </ td >< td > F3 </ td >< td > F4 </ td ></ tr > < tr >< td > G1 </ td >< td > G2 </ td >< td > G3 </ td >< td > G 4 </ td ></ tr > </ table > <!-- ─ ─ スクリプト ─ ─ --> < script type =" text / javascript "> //----] チェック さ れ た テーブル セル の 内容 を 取得 var table = document . getElementById (" myTable "); var targetRow = [ 1 , 2 , 4 ]; var targetCol = [ 1 , 3 ]; var list = new Array (); for ( var r = 0 , rowlen = targetRow . length ; r < rowlen ; r ++ ){ list . push ( new Array () ); for ( var c = 0 , collen = targetCol . length ; c < collen ; c++ ){ var value = table . rows [ targetRow [ r ] ]. cells [ targetCol [ c ] ]. innerHTML ; list [ list . length - 1 ]. push ( value ); } } //----] 取得 結果 を 確認 var str = ""; for ( var i = 0 ; i < list . length ; i ++){ for ( var ii = 0 ; ii < list [ i ]. length ; ii ++){ str += list [ i ][ ii ]+", " } str += "\ n "; } alert ( str ); </ script > ─ ─ ─ ─ ─ ─ ─ ─ / 
id =" order " を name =" order " に 変更 すれ ば ブラウザ 問わ ず 動き ます 。 - - ------------------------- id で フォーム を 参照 する 場合 ( id =" order ") document . getElementById (" order ") を 使い ましょ う 。 - - ------------------------- name で フォーム を 参照 する 場合 ( name =" order ") document . forms [" order "] と する か 、 document . order でも 動き ます 。 - - ------------------------- 補足 です が if を 2つ 使わ ず とも 以下 の 記述 で 動作 し ます 。 参考 まで 。 function choice _ goods (){ c =! document . order . a1 . checked document . order . a1 _ 1 . disabled = c document . order . a1 _ 2 . disabled = c } 
実戦 に まさる 学び なし 。 本や サンプル で 100 時間 やる より 、 お金 を もらっ て ホンモノ の WEBサイト を 作る 作業 を 20時間 やる ほう が 、 はるか に 学び に なり ます し 身 に つく もの も 多い です 。 もちろん 、 個人 差 は あり ます けど 。 あと 、 同じ お金 を もらう 、 でも アルバイト より は 正社員 、 正社員 より は フリーランス 、 フリーランス より は 役員 とか の 方 が 勉強 に なり ます 。 要するに 、 生活 かかっ てる くらい の プレッシャー が ある 方 が 真剣 に 勉強 する 、 って コト です ね 。 
とりあえず 、 fee d.p ublished や feed . updated を 使用 し て フィルター を かけれ ば 良い だけ です 。 具体 的 な 方法 として は 、 まずは fee d.p ublished は fee d.p ublished _ parsed に 、 feed . updated は feed . updated _ parsed に time. str uc t_t ime 形式 で 日時 データ が 格納 さ れ て おり ます ので 、 これ を 利用 し て DateTime クラス を 作成 し ます 。 これ は time. str uc t_t ime の 先頭 6 個 の データ を tzinfo =< UTC > として を コンストラクタ に 渡す こと で 行え ます 。 更に tzinfo =< JST > で 時間 を 取得 する と 日本 で の published / update 時刻 を 表す DateTime クラス が 得 られ ます 。 import pytz from datetime import datetime , date , timedelta JST = pytz . timezone (' Asia / Tokyo ') UTC = pytz . timezone (' UTC ') ... time = datetime (* feed . entries [ i ]. updated _ parsed [: 6 ], tzinfo = UTC ). astimezone ( JST ) print ( time ) DateTime クラス が 得 られ たら 、 あと は 希望 の 日時 と の 比較 処理 を 行う だけ です 。 yesterday = date. today () - timedelta ( days = 1 ) if time. date () != yesterday : ____ continue まとめる と こんな 感じ です 。 #!/ usr / bin / env python # -*- coding : utf-8 -*- import feedparser from datetime import datetime , date , timedelta import pytz # RSS の URL RSS _ URL = " http:// news . yahoo . co.jp / pickup / computer / rss . xml " # RSS の 取得 feed = feedparser . parse ( RSS _ URL ) # TimeZone の 定義 LOCAL _ TZ = pytz . timezone (' Asia / Tokyo ') UTC = pytz . timezone (' UTC ') # RSS の タイトル print ( feed . feed . title ) for entry in range ( len ( feed . entries )): ____# RSS の 内容 を 処理 ____ title = feed . entries [ entry ]. title ____ link = feed . entries [ entry ]. link ____ time = datetime (* feed . entries [ entry ]. updated _ parsed [: 6 ], tzinfo = UTC ). astimezone ( LOCAL _ TZ ) ____ yesterday = date. today () - timedelta ( days = 1 ) ____ if time. date () != yesterday : ________ continue ____ print ( title ) ____ print ( time ) ____ print ( link ) 
OVER _ QUERY _ LIMIT の エラー が 出 て い ます ので 、 リクエスト 回数 が 多 すぎ ます 。 （ 参考 ： https :// groups . google . com / forum /#! topic / google - maps - api - japan / z - Gwr ...） 
>>「 小計 を 自動的 」 そんな の 計算 式 さえ 分かれ ば 小学生 でも 出来る マークアップエンジニア って 事 は 要するに 文書 構造 化 でしょ ? 本来 で あれ ば HTML さえ 出来れ ば 十分 です けど 、 現場 で は HTML が 使える 存在 は そんなに 戦力 に なり ませ ん 。 HTML / CSS が 出来 て 使える って 程度 でしょ う ね 。 JavaScript は プログラマー の 仕事 に なり 、 マークアップエンジニア で は あり ませ ん 。 あと です ね 。 プログラミング で 「 どの 程度 の プログラム が 組めれ ば いい か ?」 です が 、 普通に 入門 後 なら それで いい と 思い ます 。 入門 し て も どう 組め ば いい の か 全然 分から なく 、 自己 解決 出来 ない 人 は 向い て い ない と 自分 は 思い ます 。 正直 プログラミング 上 で スキル の ゴール は あり ませ ん 。 努力 すれ ば 前 へ 進め ます が 、 努力 し ない 人 は コピペ で 限ら れ た 範囲 で しか プログラム を 組め ない と 思い ます よ 。 因みに 個人的 に は 普通 に jQuery が 使えれ ば いい と 思い ます よ 。 jQuery の メソッド 名 と 引数 等 全て 覚えろ と は 誰 も 言わ ない と 思い ます 。 調べ て 自己 解決 出来れ ば 十分 だ と 言う 会社 が ほとんど です 。 現役 の プログラマー さん も 普通 に ネット で jQuery の ライブラリ とか 探し て 、 それ の サンプル を 見 て やり た い事 が 近かっ たら 利用 し たり し て ます ね 。 ただ 、 自分 で 既存 の ライブラリ の 仕様 を 変更 し たり 出来る 力 が あれ ば 結構 活躍 する と 思い ます 。 
> march 113 _ drum 113 さん > 以上 ２つ の プログラム を 作る こと は 可能 です か ？ 要件 によって は 可能 です ね 。 
> dat a1 のみ に 追加 で 項目 を 書き込む 方法 この 意味 が よく 分から ない の です が 、 同じ 名前 で 書き込め ば 修正 さ れ ます し 、 新しい 名前 で 書き込め ば 追加 さ れ ます 。 書き込む 場合 dat a1 = " データ 1 "; da ta2 = " データ 2 "; dat a1 = encodeURIComponent ( dat a1 ); da ta2 = encodeURIComponent ( da ta2 ); document . cookie = " dat a1 ="+ dat a1 ; document . cookie = " da ta2 ="+ da ta2 ; 読み込む 場合 cook = document . cookie +";"; cStart = coo k. indexOf (" dat a1 =", 0 ); if ( cStart != - 1 ){ cEnd = coo k. indexOf (";", cStart ); dat a1 = coo k. sub string ( cStart + 6 , cEnd ); dat a1 = decodeURIComponent ( dat a1 ); } 修正 する 場合 dat a1 = " データ 1 改 "; dat a1 = encodeURIComponent ( dat a1 ); document . cookie = " dat a1 ="+ dat a1 ; 追加 する 場合 dat a3 = " データ 3 "; dat a3 = encodeURIComponent ( dat a3 ); document . cookie = " dat a3 ="+ dat a3 ; 念の為 に エスケープ 処理 を 行っ て い ます 。 もしも 的外れ な 回答 で あれ ば コメント し て 下さい 。 自分 に 発行 さ れ た Cookie の 話 で は ない です よ ね ？ 自 サイト の 閲覧 者 に 発行 する Cookie の 話 です よ ね ？ 
JavaScript の コード が どの よう に なっ て いる か わから ない ので なんとも 言え ませ ん が 、 HTML タグ が まだ 読み込ま れる 前 に JavaScript が 実行 さ れ て いる 可能性 が あり ます 。 な ので 、 < script type =' text / javascript '> function fnc (){ var a = document . getElementById (" a "); var b = document . getElementById (" b "); var c = document . getElementById (" c "); alert (a) ; alert ( b ); alert ( c ); } </ script > の よう に 、 関数 化 し て 、 < body onload =" fnc ()"> で 、 onload イベント 時 に 関数 を 呼ぶ よう に し て み て ください 。 
やり たい こと が さっぱり わかり ませ ん 。 Java に 送る リクエスト は 何で 、 どんな テーブル 定義 の テーブル を 、 どんな ルール で 変更 する の か 詳しく 書い て い た だけ ませ ん か 。 
http:// ma e.c hab . in / archives / 2351 http:// qiita . com / su _ mi / items / ef 13418 d 5 a 179 a 039 c 24 住所 から 検索 し て google map を 表示 さ せる サンプル です 。 
最初 から < a > テスト </ a > が １ ０ 個 ある 場合 。 var i = 1 ; $(" a "). each ( function (){ $( this ). addClass (" test "+ i ); i ++; }); < a > テスト </ a > が そもそも 存在 し ない 場合 。 ※< body > の中 に 追加 する 場合 for ( var i = 0 ; i < 10 ; i ++){ $(" body "). append ('< A class =" test ' + ( i + 1 ) + '"> テスト </ a >'); } 
jQuery 以下 の コード を 追加 し ます 。 $("# kokodayo "). text (" 移動 し まし た "); java view の 対象 部分 に 以下 の コード を 追加 し ます 。 < div id =" kokodayo "> 移動 し まし た </ div > 
お はこん ばん に ち ゎ （＾－＾＊ でき ます よ 、 ふつう に … ； ・ ω ・ ) 単純 に 、 ページ 内 の < a > 要素 を すべて 取得 し て 、 その 中 から 、 href に " ranking " が 含ま れる < a > 要素 だけ を 選ん で 、 その href を window . open () で ひらけ ば いい だけ です ' d ( ・ ω ・ ＊ / ─ ─ ─ ─ ─ ─ ─ ─ //----] すべて の < a > を 取得 。 var a = document . getElementsByTagName ( " a " ); //----] href に " ranking " 含ま れる もの だけ 開く 。 for ( var i = 0 ; i < a . length ; i ++){ var href = a [ i ]. getAttribute (" href "); if ( ( href || "" ). match (" ranking ") ){ window . open ( href , "_ blank " ) } } ─ ─ ─ ─ ─ ─ ─ ─ / 
IE の 開発 ツール （ F1 2 ） で 確認 し た ところ 、 HTML 1509 : 終了 タグ が 対応 し ませ ん 。 ファイル : aziro . html 、 行 : 72 、 列 : 2 HTML 1523 : 終了 タグ が 重複 し て い ます 。 タグ の 構造 は "< b >< i ></ b ></ i >" では なく "< b >< i ></ i ></ b >" の よう に する 必要 が あり ます 。 ファイル : aziro . html 、 行 : 191 、 列 : 223 HTML 1523 : 終了 タグ が 重複 し て い ます 。 タグ の 構造 は "< b >< i ></ b ></ i >" では なく "< b >< i ></ i ></ b >" の よう に する 必要 が あり ます 。 ファイル : aziro . html 、 行 : 191 、 列 : 227 HTML 1523 : 終了 タグ が 重複 し て い ます 。 タグ の 構造 は "< b >< i ></ b ></ i >" では なく "< b >< i ></ i ></ b >" の よう に する 必要 が あり ます 。 ファイル : aziro . html 、 行 : 191 、 列 : 324 HTML 1523 : 終了 タグ が 重複 し て い ます 。 タグ の 構造 は "< b >< i ></ b ></ i >" では なく "< b >< i ></ i ></ b >" の よう に する 必要 が あり ます 。 ファイル : aziro . html 、 行 : 191 、 列 : 328 と で ます ので 、 まず 、 HTML の タグ を 確認 し て ください 。 
さき ほど は どうも です 。 HTML の 閉じ タグ （</ head >） 等 は 、 ブラウザ が 良き に 計らっ て くれ たり し ます が 、 明示 的 に 閉じ タグ つけ ない と 、 JavaScript そのもの を 認識 し ない とき も あり ます 。 （ このへん は ブラウザ 依存 ） また 、 JavaScript 中 で も 「 多少 」 良き に 計らっ て くれる ところ も あっ たり し ます 。 あと は 、 ブラウザ の キャッシュ が 効い て い て 、 修正 し た JavaScript が 適用 さ れ ない 場合 も あっ たり し ます 。 で 、 うまく 動か ない な～っ て 思っ た とき は 、 開発者 ツール を 使う と 、 エラー に なっ て いる 場所 を 表示 し て くれる ので 、 便利 です よ ^^ 開発者 ツール ： http:// news . mynavi .jp / column / wc / 011 / 
clientHeight で 高さ 、 clientWidth で 幅 を 調べる こと が でき ます 以下 、 少し 強引 です が div タグ を クリック し た 場合 に HTML を 動的 に 変化 さ せ て 1 行 に し 、 1 行 の 高 さ を 取得 し 、 実際 の 高 さ を もと に 改行 数 を 判別 し ます 。 firefox ・ Chrome ・ IE7 など で も 動き ます 。 < script type = text / javascript > <!-- function gc ( t ){ var tmp = t . clientHeight ;// 元 の 高 さ を 保持 var tm p2 = t.i nnerHTML ;// 元 の HTML を 退避 t.i nnerHTML = tm p2 . charAt ( 0 ) || ' あ '; // 1 行当り の 高 さ を 得る ため テキスト を 1 文字 に var t mp3 = t . clientHeight ;// 一時的 に 1 行当り の 高 さ を 取得 t.i nnerHTML = tm p2 ;// HTML を 保持 し た 状態 に 戻す return tmp / t mp3 || null ;// 元 の 高 さ を 1 行当り の 高さ で 割っ た 数 が 行 数 } //--></ script > < div id = hoge style = width : 80 px ; cursor : hand onclick =' alert ( gc ( this ))'> きょう は 、 晴れ です か 。 いいえ 曇り です </ div > 
< input type =" button " id =" btn " value =" Click !"/> を HTML に 追加 し て 、 // 下記 ２ 行 を 追加 $( function (){ $("# btn "). on (" click ", function (){ $. getJSON ( " https :// app . rakuten . co.jp / services / api / IchibaItem / Search / 20120723 ? c ...", { keyword :" AKB48 ", application Id :" YOUR _ APPLICATION _ ID ", imageFlag :" 1 "}, function ( data ){ $. each ( data . Items , function ( i , item ){ $("< a >"). attr (" href ", item . Item . itemUrl ). appendTo ("# images ") . append ($("< img />"). attr (" src ", item . Item . mediumImageUrls [ 0 ]. imageUrl )); }); } ); // 下記 ２ 行 を 追加 }); }); で 、 HTML に 追加 し た ボタン クリック で 、 Ajax を 実行 する よう に なり ます 。 ※ jQuery を 使用 する の でし たら 、 必ず $( function (){ }); の中 に 記述 する よう に し て ください 。 上記 記述 が ない 場合 、 HTML の タグ を 読み込む 前 に jQuery ( JavaScript ) を 実行 しよ う として 、 エラー に なる 場合 が あり ます 。 
ソース 眺める 限り で は ホームページビルダー 独自 の 画像 事前 読み込み 用 の 関数 の よう です ね 。 HpbImgPreload は 引数 により 画像 の 事前 読み込み 、 HpbImgFind は 引数 で 指定 さ れ た 画像 の 検索 、 HpbImgSwap は 引数 に 指定 し た 名前 の 画像 を 切り替える よう な 目的 で ある と 思い ます が pleload は html に 表示 さ れる 画像 の 読み込み と キャッシュ の 作成 を 補助 的 に 行う もの な ので 消し て も 問題 は ない と 思い ます が 画像 の 切り替え に 関連 する Find と Swap は 画像 に マウス を のせ た 場合 に 呼び出す と すれ ば 不具合 が でる と 思い ます 。 スクリプト だけ で は 憶測 と なる ので html 全体 の ソース が わかれ ば もう少し 確実 な 回答 が 得 られる か と 。 
> peace 3265 さん > どなた か 教え て い た だけ ませ ん か ？ 宜しく お願い 致し ます 。 右 に ある テック なんとか と 言う 所 で 教え て 貰える よう です 。 
それ は もう 大人 の 歯 じゃ ない です か ? その 奥 の 3本 連なっ た みたい な 歯 も ゴロっと 抜け落ち ます よ ただし 、 猫 は 7 割 の 確率 以上 くらい で 飲み込ん で 処理 し ます ので 飼い主 は 気 が つき ませ ん この 犬歯 は 透明 感 と いい 質感 と いい 小さ さ と いい 「 大人 の 歯 」 だ と 思い ます きっと 3 ヶ月 最初 の ころ に 生え かわっ て ます よ 猫 の 歯 の 素晴らしい の は 「 抜ける 前 に 下 に 既に 大人 の 歯 が 生え て いる 」 事 です なんと いう か ・ ・ ・ 上 の カバー が スポット 抜ける 感じ ( カニ の 脱皮 みたい な 感じ ) で 抜け て しまう から 飼い主 が 気づか ない の です 
timeText という 変数 （ Text 型 ） は 存在 し ない ん です よ ね ？ 操作 し たい の が 「 time 」 という Text なら 、 当然 ながら time. text = " TIME : " + t ; という コード に する 必要 が あり ます 。 
var test = [ 2 , 2 , 0 , 1 ]; var max = Math . max . apply ( null , test ); var result = test . filter ( function ( num ) { return num === max ; }); console.log ( result ); Array . filter を 使う （ 自力 で 書い て も いい か と 思い ます ） と か 。 最大 値 の 要素 が 1つ の とき 配列 に し たく ない の で あれ ば 、 result . length > 1 ? result : max ; と する こと も でき ます 。 【 参考 】 Array . prototype . filter () - JavaScript | MDN https :// developer . mozilla.org / ja / docs / Web / JavaScript / Reference / Glob ... 
効率 は 分から ん けど 、 とりあえず ブロック 番号 [ j ] を 算出 し て 割り振り し て みる 。 [ print は console.log など 適宜 修正 で ] // ide on e.c om / jWAzS 7 # var   arr   =   [    01 , 02 , 03 , 04 , 05 , 06 ,    11 , 12 , 13 , 14 , 15 , 16 ,    21 , 22 , 23 , 24 , 25 , 26 ,    31 , 32 , 33 , 34 , 35 , 36 ,    41 , 42 , 43 , 44 , 45 , 46 ,    51 , 52 , 53 , 54 , 55 , 56 ],   ar r2   =   [],   i ,   w = 3 ,   h = 3 ,   b = 2 ; for ( i = 0 ;   i < arr . length ;   ++ i ){    j =( i /( h * w * b )| 0 )* b +( i / w | 0 )% b ;    if (! ar r2 [ j ]) ar r2 [ j ]=[];    ar r2 [ j ]. push ( arr [ i ]); } for ( i = 0 ;   i < ar r2 . length ;   ++ i )    print ( i +":"+ ar r2 [ i ]); 
はい 、 セキュリティー の 問題 で 、 ユーザー 操作 で ない プログラム による フル スクリーンモード は 、 禁止 さ れ て い ます 。 Firefox の 場合 、 about : config で 、 full - screen - api . allow - trusted - requests - only を false に 設定 する と 出来る 様 に なり ます 。 
sample : convert strings to html - JSFiddle https :// jsfiddle .net / z 7 hL 7 ym7 / 文字列 を 先頭 から 順に 見 て 、 } が 出 て き たら 、 その 直前 の { と 合わせ て 置換 する 、 という 考え方 で 処理 し て いく の が 良い か と 思い ます 。 なお 、 blockquote だけ 要素 名 も blockquote に なる という の は 、 ルール として かえって 組み づらい よう に 思い ます ので 、 勝手 ながら 要素 名 . class 名 という 文法 に 変え て い ます 。 
wheelzoom . js の コード を 確認 し て み た ところ 、 object タグ は 使用 でき ませ ん 。 以下 に 、 svg を img タグ で 表示 する 例 を 書い て おき ます 。 <!-- HTML --> < div id =" sheet - box "> < button class =" button prev - button "> Prev </ button > < div class =" im ag e-box "></ div > < button class =" button next - button "> Next </ button > </ div > /* CSS */ . button { border : none ; outline : none ; background-repeat : no - repeat ; } . prev - button { background : url (' image / Prev _ out . gif ') } . prev - button :hover { background : url (' image / Prev _ over . gif ') } . next - button { background : url (' image / Next _ out . gif ') } . next - button :hover { background : url (' image / Next _ over . gif ') } // JavaScript ' use strict '; var current Index = 0 ; var imageFiles = [ ' image / NoImage . png ', ' image / page 44 _ 45 .s vg ', ' image / page 46 _ 47 .s vg ', ' image / page 48 _ 49 .s vg ', ' image / page 50 _ 51 .s vg ', ' image / page 52 _ 53 .s vg ', ' image / page 54 _ 55 .s vg ', ' image / page 56 _ 57 .s vg ' ]; var imageChanger = function ( type ) { switch ( type ) { case ' prev ': if (-- current Index < 0 ) current Index = imageFiles . length - 1 ; break ; case ' next ': if (++ current Index > imageFiles . length - 1 ) current Index = 0 ; break ; } imageRenderer (); } var imageRenderer = function () { var img = new Image (); img .s rc = imageFiles [ current Index ]; img . addEventListener (' load ', function render () { var box = document . querySelector ('. im ag e-box '); if ( box . firstChild ) { box . replaceChild ( img , box . firstChild ); } else { box . appendChild ( img ); } img . removeEventListener (' load ', render ); wheelzoom ( img ); }); } document . querySelector ('. prev - button '). addEventListener (' click ', imageChanger . bind ( this , ' prev ')); document . querySelector ('. next - button '). addEventListener (' click ', imageChanger . bind ( this , ' next ')); imageRenderer (); 
こんにちは alert (" hello , world ")； の 「 ； 」 を 「 ;」 に 変更 し ましょ う 。 全角 と 半角 の 違い です 。 
リクエスト 感 謝っ （ ＾ 人 ＾ ） ソースコード の ミス が ２つ か あり ます ね 。 ■ ■ ■ （ １ ） < font > の 閉じ タグ ■ ■ ■ [ 検索 ] ボタン の 動作 に は 無関係 です が 、 ３ か所 だけ < font > の 閉じ タグ が 抜け て い ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < font size =" 4 . 5 ">< b > 佐賀 本社 </ b ></ font >< br > < font size =" 4 . 5 ">< a href ="～"> 大和 空港線 </ a >( ここ ！ )< br > < font size =" 4 . 5 ">< a href ="～"> 富士 線 </ a >( ここ ！ )< br > < font size =" 4 . 5 ">< a href ="～"> 佐賀 線 </ a ></ font >( ここ ！ )< br > ─ ─ ─ ─ ─ ─ ─ ─ / ■ ■ ■ （ ２ ） 配列 の 区切り の 「 ,」 ■ ■ ■ これ が 、 [ 検索 ] ボタン を 押し て も 動か ない 原因 です 。 「 date. js 」 の 路線 リスト Rosen で 、 駅 の リスト " st " の 配列 要素 を 区切る カンマ 「,」 が あり ませ ん 。 カンマ 「,」 を 入れれ ば 動き ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var Rosen = [ { " id ":[" yamato "," yamato "], " type ":" Sample ", " st ":[ {" name ":" 長崎 "," type ":" pu "}, ← ここ {" name ":" 真崎 "," type ":""}, ← ここ {" name ":" 肥前鹿島 "," type ":""}, ← ここ {" name ":" 広島 "," type ":" pu "}, ← ここ {" name ":" 福川 "," type ":""}, ← ここ {" name ":" 山口 "," type ":" pb "}, ← ここ {" name ":" 小野田 "," type ":""}, ← ここ {" name ":" 新下関 "," type ":""}, ← ここ {" name ":" 門司 "," type ":""}, ← ここ {" name ":" 黒崎 "," type ":""}, ← ここ {" name ":" 陣原 "," type ":""}, ← ここ {" name ":" 折尾 "," type ":" pb "}, ← ここ {" name ":" 篠栗 "," type ":""}, ← ここ {" name ":" 福岡空港 "," type ":" pb "}, ← ここ {" name ":" 博多 "," type ":" pu "}, ← ここ {" name ":" 西鉄平尾 "," type ":""}, ← ここ {" name ":" 堤北 "," type ":""}, ← ここ {" name ":" 堤 南 "," type ":" p "}, ← ここ {" name ":" 脇山 "," type ":""}, ← ここ {" name ":" 西 "," type ":""}, ← ここ {" name ":" 藤原 北 "," type ":""}, ← ここ {" name ":" 藤原 南 "," type ":""}, ← ここ {" name ":" 鹿路 "," type ":""}, ← ここ {" name ":" 千 布 "," type ":""}, ← ここ {" name ":" 三瀬 "," type ":" pu "} ← 末尾 の 要素 の あと は 「 ,」 不要 ] } ← 末尾 の 要素 の あと は 「 ,」 不要 ]; ─ ─ ─ ─ ─ ─ ─ ─ / 配列 の １つ １つ の 要素 の 区切り に は 「 ,」 が 要り ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ 配列 = [ 要素 , 要素 , 要素 , 要素 , 要素 ]; ─ ─ ─ ─ ─ ─ ─ ─ / これ を 、 ソース を 見やすく する ため に 改行 し て 書く と 、 / ─ ─ ─ ─ ─ ─ ─ ─ 配列 = [ 要素 , 要素 , 要素 , 要素 , 要素 ← 末尾 は 「 ,」 不要 ]; ─ ─ ─ ─ ─ ─ ─ ─ / って なり ます 。 今回 は 、 Rosen っていう 配列 の なか に 、 １つ １つ の 路線 データ が 連想配列 で 入っ て い て 、 連想配列 の なか に は 、 さらに " st " っていう 配列 が 入っ て い ます 。 な ので 、 カンマ 「,」 の 打ち 場所 は 、 以下 の よう な 感じ です 。 / ─ ─ ─ ─ ─ ─ ─ ─ var Rosen = [ //<<○○ 線 >> { " id ": [ ～ ], " type ": "～", " st ": [ { ～ }, { ～ }, … { ～ } ← ─ 末尾 は 「 ,」 不要 ] }, //<< × × 線 >> { " id ": [ ～ ], " type ": "～", " st ": [ { ～ }, { ～ }, … { ～ } ← ─ 末尾 は 「 ,」 不要 ] }, … , //<< × × 線 >> { " id ": [ ～ ], " type ": "～", " st ": [ { ～ }, { ～ }, … { ～ } ← ─ 末尾 は 「 ,」 不要 ] } ← ─ 末尾 は 「 ,」 不要 ] ─ ─ ─ ─ ─ ─ ─ ─ / 
Js は 分かり ませ ん が 、 見 た 感じ １つ 気 に なっ た ところ 。 Raycast の 第 2 引数 に out が 抜け て いる と 思わ れ ます 。 というのも 本来 引数 は 値 を 初期 化 さ せる ため に ある もの な ん です が 、 この 第 二 引数 は 特別 で Raycast 関数 の 別 の 返り 値 、 RaycastHit 構造体 が 別に 初期 化 さ れ ます 。 
js ファイル を ダウンロード し て js フォルダ に 入れれ ば 使え ます 。 
良く 知り ませ ん し 推測 混じり の 回答 です が ， ， ， AS 3 では var j = 0 ; var j = 1 ; こんな ↑ こと を する と 「 1151 : 定義 j ( 名前空間 internal ) に コンフリクト が 存在 し ます 。 var j = 1 ;」 と 言う エラー を 吐い て コンパイル ( パブ リッシュ ) 不可能 に なる の です 。 var j = 0 ; j = 1 ; これ ↑ だ と 大丈夫 です 。 var j ; j = 0 ; j = 1 ; これ ↑ でも 大丈夫 です 。 つまり for ( var i = 0 ; i <= 1 ; i ++){      var j = i ; } こんな ↑ こと は し て は なら ない こと で var j ; for ( var i = 0 ; i <= 1 ; i ++){      j = i ; } こう ↑ 書か なけれ ば なら ない という こと に なる の です 。 もっとも for 文 など で 動的 に 同じ 変数 を 宣言 し た 場合 は コンパイラ は 見逃し て くれる ので for ( var i = 0 ; i <= 1 ; i ++){      var j = i ; } と し た 場合 は コンパイル ( パブ リッシュ ) は 可能 です 。 コンパイル 可能 です が 「 す べき で は ない こと ！ 」 な の です 。 (「 できる / でき ない 」 と 「 し て 良い / 悪い 」 と は 別 です よ ね 。 ) JavaScript で は マス 目 とか 作る とき に for ( var i = 0 ; i < 10 ; i ++){      for ( var j = 0 ; j < 10 ; j ++){          ○○;      } } こんな 二 重 ループ など よく 見る と 思い ます 。 しかし これ も 本来 ダメ な こと です 。 こういう こと が 平気 で できる JavaScript は 柔軟 で 使い やすい と は 思い ます 。 ( 素人 が 好い加減 に コーディング し て も 動く という 利点 が 満載 ) 私 の 勝手 な 推測 です が こういう JavaScript の 「 柔軟 性 重視 」 の 一環 な の で は ない か と 思い ます 。 逆 に これ は 良い こと ばかり で は なく var j = 0 ; var j = 1 ; を var j ; j = 0 ; j = 1 ; と 読み替え て しまう の です から 変に なる こと も 出 て き ます 。 良い 思い を すれ ば 逆 に それ で 痛い 目 に も 遭う 「 ドラえもん の 出す 道具 」 よう な もの でしょ う 。 
作ろ う と 思え ば 作れる ん じゃ ない でしょ う か 。 いろいろ と 面倒 そう です けど 。 
１ ． Text コンポーネント の 付い た オブジェクト を 画面 の 外 （ 右側 ） に 配置 ２ ． Text コンポーネント に 表示 さ せ たい 文字 を 入れる 。 ３ ． アニメーション で １ の オブジェクト を 画面 左端 まで 移動 さ せる 。 これ だけ で 出来る ので 、 Asset を 入れる まで も ない でしょ う 。 「 uGUI アニメーション 」 など で 調べ て み て ください 。 既に 文字 表示 の 仕組み が ある 場合 、 そこ から 改変 する の は 初心者 に は 難しい と 思う ので 一 から 自作 し た 方 が 早い と 思い ます 。 ちなみに 「 アナグラム 」 って 文字 を 入れ替える 言葉遊び の こと です が 、 「 アルゴリズム 」 の 間違い でしょ う か ？ 
何 を どう し たら そんな エラー が 出 た の か ？ この よう な 状況 を 全く 書か れ て いらっしゃら ない 状態 で わかる わけ ない でしょ う ？ 回答者 は ニセ 超能力者 じゃ ない ん です よ 。 「 痛い の です ！ どう すれ ば 良い の でしょ う か ？ 」 こんな 質問 と 同 レベル です 。 逆 に上 の よう な 好い加減 な 質問 を 聞い て 「 それ は 膵臓がん です ！ 早急 な 手術 を お薦め し ます 。 」 など という ヤツ は ， 超 超 超 々 … ヤブ医者 か ， ペテン師 の 超能力者 です 。 ペテン師 に でも 引っかかり たい の です か ？ 例えば ( あくまでも の 一 例 )， 次 の よう な HTML を 用意 し た と し ます 。 < html > < head > < meta charset =" utf-8 "> < title > Test </ title > < script type =" text / javascript "> google ++; </ script > </ head > < body ></ body > </ html > 上記 HTML を ブラウザ Firefox を 使っ て デバッグ し て も 下 の 【 添付 図 】 の よう な エラー が 出 ます 。 google なんて 変数 を どこ に も 定義 し て い ない の です から エラー が 出 て 当然 です 。 ( 出 ない 方 が おかしい です 。 ) 
目指す も クソ も 今 すぐ 作り ましょ う 。 Java だの C だの 一言 で 言っ て ます が 、 開発 ツール によって 別物 に なり ます ので 、 勉強 し て も あんま 意味 ない です 。 特に PC 系 は 言語 の 勉強 し て も 本当に 意味 が ない です 。 実戦 経験 と 流行り の アンテナ の 高さ だけ が もの を 言い ます 。 昨日 まで 必要 だっ た 知識 が 今日 は もう 要ら なく なっ て たり する の です から 。 。 また 、 言語 で どう 違う か という 話 です が 、 言語 が 違う の で なく 、 開発 ツール が 違う の です 。 アンドロイドアプリ は 公式 で ない 開発 ツール も 死ぬ ほど あり ます ので 、 まずは 自分 で も でき そう な ヤツ から 始め て ください 。 プログラム を 一行 も 書か なく て いい ツール も あり ます よ 。 まぁ 、 手段 は 何 でも いい から 、 まずは 何 か 作り ましょ う 。 プログラム の やり方 より も 、 作る もの と 、 作る プロセス を 考える 事 が 大事 な の です 。 
お はこん ばん に ち ゎ ♪ その 表示 を 実現 する 方法 は いくつ か あり ます が 、 いちばん 簡単 な 方法 で 解説 し て み ます ね （＾－＾＊ 解説 の あと で 、 ソースコード の 実施 例 を 示し ます 。 ■ ■ ■ しくみ ■ ■ ■ 全て の 画像 の < img > 要素 を 「 position : absolute 」 で １ 枚 に 重ね合わ せ て おき 、 各 画像 の 表示 ／ 非表示 の 切替え を < img > 要素 の クラス 名 の 切替え によって 行い ます 。 例えば 、 クラス 名 が つい て い ない < img > 要素 は 非表示 の 状態 クラス 名 show を 指定 し た < img > 要素 は 表示 の 状態 、 っていう 感じ です 。 クラス 名 の 切替え は Java script によって 行い 、 表示 ／ 非表示 の スタイル に関する 設定 は すべて CSS で 行い ます 。 画像 切り替え 時 の フェードイン・アウト は 「 opacity 」 を 、 画像 の ズームアウト は 「 transform : scale () 」 を 、 それぞれ 「 transition 」 で アニメーション さ せる だけ で 実現 でき ます 。 では 、 ソースコード の 作り方 を 順に 解説 し ます ＾－＾) ゝ ■ ■ ■ HTML を 記述 ■ ■ ■ まず 、 スライドショー を 表示 する ため の ブロック を 、 < div > など で 用意 し て id を 付け て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ < div id =" photobox "></ div > ─ ─ ─ ─ ─ ─ ─ ─ / 記述 する HTML は これ だけ o ( ・ ω ・ ＊ この < div > の なか に 、 手打ち で < img > を １つ １つ 書い て も いい の だ けど 、 あとあと 管理 が し やすい よう に 、 ここ で は 、 あと で Java script を 使っ て 自動的 に 書き出し ます よう に し ます ♪ ■ ■ ■ CSS の 設定 ■ ■ ■ スライドショー に 必要 な スタイルシート を 設定 し て おき ます 。 まず 、 スライドショー を 画面 いっぱい に 表示 する ため 、 ページ の 余白 を なくし て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ html , body { width : 100% ; height : 100% ; margin : 0 px ; padding : 0 px ; } ─ ─ ─ ─ ─ ─ ─ ─ / スライドショー の 表示 領域 # photobox を 、 画面 いっぱい の サイズ に 広げ て おき ます 。 また 、 その 中 に は < img > を 「 position : absolute 」 で 重ねる ので 、 座標 原点 が # photobox に なる よう に # photobox に は 「 position : relative 」 を 指定 し て おき ます 。 # photobox から はみ出し た 部分 が 表示 さ れ ない よう に 、 「 overflow : hidden 」 も 指定 し て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ # photobox { position : relative ; width : 100% ; height : 100% ; overflow : hidden ; } ─ ─ ─ ─ ─ ─ ─ ─ / # photobox に 入れる < img > 要素 は 、 「 position : absolute 」 で 重ね合わ せ ます 。 デフォルト で は 非表示 の 状態 に し て おく ので 、 「 opacity : 0 」 で 透明 に し て おき ます 。 表示 状態 に 切り替え た とき 徐々に ズームアウト さ せる ので 、 非表示 の 状態 で は 、 「 transform : scale () 」 で 少し 拡大 さ れ た 状態 に し て おき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ # photo box img { position : absolute ; left : 0 px ; top : 0 px ; z - index : 0 ; opacity : 0 ; transform : scale ( 1 . 2 ); } ─ ─ ─ ─ ─ ─ ─ ─ / さらに 、 「 opacity 」 と 「 transform 」 に 、 「 transition 」 による アニメーション を 設定 し て おく こと で 、 画像 切り替え 時 の フェード 効果 や 、 ズームアウト 効果 を つけ られ ます 。 画像 切り替え の 間隔 を 仮に 4 秒 として 、 「 opacity 」 の 変化 時間 は 、 それ より も 十分 に 短く 、 「 transition 」 の 変化 時間 は 、 切り替え の 間隔 と 同じ くらい に 、 それぞれ 設定 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ # photo box img { position : absolute ; left : 0 px ; top : 0 px ; z - index : 0 ; opacity : 0 ; transform : scale ( 1 . 2 ); transition : opacity 1 s line ar 0 s , transform 4s linear 0 s ; } ─ ─ ─ ─ ─ ─ ─ ─ / クラス 名 show を 指定 さ れ た < img > は 、 「 opacity : 1 」 で 表示 状態 に し て 、 「 transform : scale ( 1 . 0 )」 で ズーム アウト さ せ ます 。 また 、 表示 状態 の < img > が いちばん 手前 に くる よう に 、 「 z - index 」 に 大きい 値 を 指定 し て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ # photo box img .s how { opacity : 1 ; transform : scale ( 1 . 0 ); z - index : 100 ; } ─ ─ ─ ─ ─ ─ ─ ─ / CSS は 以上 で 完了 です 。 ■ ■ ■ 画像 の リスト を 作成 ■ ■ ■ 画像 の リスト を 管理 し やすい よう に 、 画像 の URL を Java script で 配列 に し て おき ます 。 配列 の 名前 は photos でも し て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ var photos = [ " 画像 の URL ", " 画像 の URL ", … " 画像 の URL " ]; ─ ─ ─ ─ ─ ─ ─ ─ / ■ ■ ■ 画像 を フィット さ せる ■ ■ ■ スタイルシート で は 、 # photo box 内 の < img > 要素 に 横 幅 、 高さ を 指定 し て い ない ので 、 この まま で は 、 表示 領域 の サイズ に 関係 なく 画像 本来 の 大き さ で 表示 さ れ て しまい ます ね ' d ( ・ ω ・ ＊ スタイルシート で 「 width : 100% 」 に すれ ば 、 画像 は ページ の 横 幅 いっぱい に 広がっ て フィット し ます が 、 画像 の 高さ が 足り ない と 、 画像 の 上下 に 余白 が でき て しまい ます 。 いっぽう 、 「 height : 100% 」 に すれ ば 高さ が フィット し ます が 、 横 幅 が 足り ない 場合 に は 左右 に 余白 が 空い て しまい ます 。 横 幅 を 100% に する か 、 高さ を 100% に する か は 、 表示 領域 の アスペクト比 （ 縦横 の 比 ） によって 変わり ます 。 画像 に 比べ て 表示 領域 が 横長 の 場合 に は 「 width : 100% 」 、 画像 に 比べ て 表示 領域 が 縦長 の 場合 に は 「 height : 100% 」 、 という ふう に 、 条件 によって CSS の 指定 を 変える 必要 が あり ます 。 それ と 同時に 、 画像 の 中心 が 表示 領域 の 中心 に 来る よう に 、 表示 領域 の アスペクト比 に あわせ て スタイルシート の 「 left 」 や 「 top 」 も 調節 し ない と いけ ませ ん 。 この よう な フィッティング は 、 CSS で する より も Java script で 行う 方 が 簡単 です ヽ ( ・ ω ・ ＊ そこで 、 画像 を フィット さ せる 関数 photoFit () を 作っ て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ function photoFit (){ ～ 処理 内容 ～ } ─ ─ ─ ─ ─ ─ ─ ─ / まず 、 画像 の アスペクト比 を 変数 photoasp に 保持 し て おき ます 。 640 × 480 の 画像 で あれ ば 、 / ─ ─ ─ ─ ─ ─ ─ ─ var photoasp = 640 / 480 ; ─ ─ ─ ─ ─ ─ ─ ─ / って なり ます ね 。 つぎ に 、 表示 領域 の アスペクト比 asp を 取得 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var photo box = document . getElementById (" photobox "); var width = photobox . offsetWidth ; var height = photobox . offsetHeight ; var asp = width / height ; ─ ─ ─ ─ ─ ─ ─ ─ / あと は 、 # photo box 内 の < img > 要素 １つ １つ を 、 アスペクト比 によって スタイルシート を 分岐 さ せ て 、 表示 領域 に フィット さ せれ ば いい だけ です ♪ / ─ ─ ─ ─ ─ ─ ─ ─ var photo img = photobox . getElementsByTagName (" img "); for ( var i = 0 ; i < photoimg . length ; i ++){ //----] 大き さ を フィット さ せる photoimg [ i ]. style. width = ( asp > photoasp ) ? " 100% " : " auto "; photoimg [ i ]. style. height = ( asp > photoasp ) ? " auto " : " 100% "; //----] 中心 位置 を 合わせる photoimg [ i ]. style. left = ( asp > photoasp ) ? " 0 px " : ( ( width - height * photoasp )/ 2 )+" px "; photoimg [ i ]. style. top = ( asp > photoasp ) ? ( ( height - width / photoasp )/ 2 )+" px " : " 0 px "; } ─ ─ ─ ─ ─ ─ ─ ─ / 以上 を まとめる と 、 画像 を 表示 領域 に フィット さ せる 関数 photoFit () の 全貌 は 、 以下 の よう に なり ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ function photoFit (){ var photoasp = 640 / 480 ; var photo box = document . getElementById (" photobox "); var width = photobox . offsetWidth ; var height = photobox . offsetHeight ; var asp = width / height ; var photo img = photobox . getElementsByTagName (" img "); for ( var i = 0 ; i < photoimg . length ; i ++){ photoimg [ i ]. style. width = ( asp > photoasp ) ? " 100% " : " auto "; photoimg [ i ]. style. height = ( asp > photoasp ) ? " auto " : " 100% "; photoimg [ i ]. style. left = ( asp > photoasp ) ? " 0 px " : ( ( width - height * photoasp )/ 2 )+" px "; photoimg [ i ]. style. top = ( asp > photoasp ) ? ( ( height - width / photoasp )/ 2 )+" px " : " 0 px "; } } ─ ─ ─ ─ ─ ─ ─ ─ / 画像 を フィット さ せる 必要 が ある の は 、 / ─ ─ ─ ─ ─ ─ ─ ─ ・ ページ の 読み込み 完了 時 ・ ウィンドウ が リサイズ さ れ た とき ─ ─ ─ ─ ─ ─ ─ ─ / です ね ＊ ・ ω ・ ) b ' な ので 、 この 関数 photoFit () は 、 window オブジェクト の 「 load 」 イベント と 「 resize 」 イベント に 仕込む こと に なり ます 。 ■ ■ ■ スライドショー を 開始 する ■ ■ ■ ページ の 読み込み が 完了 し た 時点 で 、 スライドショー を 開始 さ せ ます 。 スライドショー を 開始 する 関数 を photoStart () として 、 その 中身 を 作っ て いき しょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ function photoStart (){ ～ 処理 内容 ～ } ─ ─ ─ ─ ─ ─ ─ ─ / まず 、 画像 リスト photos を 使っ て 、 < div id =" photobox "> の なか に < img > 要素 を セット し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ window . photobox = document . getElementById (" photobox "); for ( var i = 0 ; i < photo s.l ength ; i ++){ var img = document . createElement (" img "); img .s etAttribute ( " src ", photos [ i ] ); img .s etAttribute ( " alt ", "" ); photobox . appendChild ( img ); } ─ ─ ─ ─ ─ ─ ─ ─ / 変数 photobox は 、 他 の 関数 内 で も 使える よう に グローバル変数 として 定義 し ます 。 明示 的 に グローバル変数 として 定義 する ため に 、 ここ で は 「 window . photobox = ～」 の よう に 定義 し て い ます 。 セット し た < img > 要素 の リスト も 、 グローバル変数 photoimg に 取得 し て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ window . photoimg = photobox . getElementsByTagName (" img "); ─ ─ ─ ─ ─ ─ ─ ─ / つぎ に 、 セット し た < img > 要素 を 表示 領域 に フィット さ せ ます 。 作っ て おい た 関数 photoFit () を 実行 する だけ です ね ♪ / ─ ─ ─ ─ ─ ─ ─ ─ photoFit (); ─ ─ ─ ─ ─ ─ ─ ─ / あと は 一定 時間 おき に < img > の クラス 名 を 切り替え て いけ ば 、 スライドショー の 再生 が 始まり ます 。 
書籍 ： http:// qiita . com / axross / items / 1 fc 342 c 04 aa 88 d4 8 c71 3 まぁ 、 有名 どころ に なっ ちゃ い ます ね 。 Web サイト ： http:// www . tohoho - web . com / www . htm Web 関連 情報満載 です 。 
> この 、 ｏｐｔｉｏｎ タグ の 任意 の 位置 に > select ed を 追加 し て 、 初期 値 に し たい です 。 と 書か れ て いらっしゃい ます が その 「 任意 の 位置 」 の 判断基準 が わかり ませ ん 。 任意 は 任意 でも 任意 なり の ルール が 必要 です 。 ・ option の 「 上 から ○ 番目 」 を 基準 に し た 任意 の 位置 ・ option の 「 value 」 を 基準 に し た 任意 の 位置 ・ option の 「 表示 文字 」 を 基準 に し た 任意 の 位置 など ...。 例えば value ( 西暦 の 数字 ) を 基準 に し て その 任意 を " 1940 " に でも し ます か ？ その 場合 の コード 例 ↓ <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > Test </ title > </ head > < body > < select id =" yob " value =""> </ select > < script > // BD age options var newDt = new Date (); var thisYear = ne w Dt. getFullYear (); // " 今年 " を 取得 var dateYear = []; // 西暦 を 代入 する 配列 を 生成 console.log ( thisYear ); var varAno = 1920 ; // 西暦 の 初期 値 var slcAno = 1940 ; //★ 初期 選択 年 を 指定 var yob = document . getElementById (' yob '); // ID yob を 取得 console.log ( yob ); for ( var i = 0 ; varAno < thisYear ; i ++ ){      varAno += 1 ; // 初期 値 に １ を 加算      // dateYear [ i ] = thisYear ;      dateYear [ i ] = varAno ; // 初期 値 + 1 を 配列 に 代入      console.log ( dateYear [ i ]);      var options = document . createElement (' option '); // option タグ を 生成      options .s etAttribute (' value ', dateYear [ i ]); //      options . innerHTML = dateYear [ i ];      //★ もし potion の value が 指定 初期 選択 年 と 同じ で あれ ば      if ( varAno == slcAno ){          //★ その option を 選択 状態 に する          options .s elected = true ;      }      yob . appendChild ( options ); } </ script > </ body > </ html > ※ 結局 JavaScript 中 の     ★ を 付け た 部分 のみ を 変更 ( 追加 ) し まし た 。 
> recoorii さん 2016 / 7 / 3115 : 29 : 26 > OnsenUI は 、 Web アプリケーション を 開発 する の に も 適し て い ます か ？ 適し て いる か どう か は 開発 スタイル 次第 な ので 、 それ に 必要 な 機能 が 有る の なら 質問者 にとって は 適し て いる と 判断 し て 構い ませ ん 。 
リクエスト 感 謝っ o (＊＾▽＾＊) o さき ほど は 、 返信 ありがと でし た ♪ ページ を 開い た あと ノー アクション で テキストファイル に 保存 が できれ ば 、 ブラウザ から でも 問題 ない って こと で 、 ブラウザ から 実行 する 方法 で 解説 し ます ね ' d (＾－＾＊ 返信 でも いい か な 、 と 思っ た けど 、 途切れ 途切れ だ と 見づらく なる ので 、 再 回答 し ます ♪ ここ で 紹介 する 方法 は 、 以下 の ブラウザ 対応 です 。 / ─ ─ ─ ─ ─ ─ ─ ─ ・ IE10 ～ 11 ・ Chrome ・ FireFox ・ Opera ・ Comodo IceDragon ─ ─ ─ ─ ─ ─ ─ ─ / Safari だけ 対応 し て い ませ ん 。 ■ ■ ■ しくみ ■ ■ ■ Java script で は 、 FileAPI を 使う こと で ローカル ファイル の 読み書き が でき ます 。 IE9 以下 など で は まだ 未 対応 です が 、 Blob オブジェクト を 使っ た 書き出し が 、 現状 いちばん 現実的 です 。 Blob （ Binary Large Object ） は 、 ブラウザー の 内部 オブジェクト として 、 ファイル を 扱える くらい 大きな オブジェクト を 生成 する 仕組み です 。 ファイル として 書き出し たい データ を 、 ブラウザー 内部 で Blob オブジェクト として 形成 し 、 それ を ローカル 環境 に 「 ダウンロード 」 する 形 で 保存 し ます 。 IE の 場合 、 msSaveBlob () や msSaveOrOpenBlob () といった 、 Blob オブジェクト を 直接 ダウンロード 保存 できる メソッド が 用意 さ れ て い ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ Blob オブジェクト を 生成 . . ↓ msSaveBlob () で ダウンロード 開始 ─ ─ ─ ─ ─ ─ ─ ─ / それ 以外 の ブラウザ で は 、 Blob オブジェクト から 、 Blob オブジェクト に アクセス する ため の URL を 生成 し 、 その URL を ユーザー に ダウンロード さ せる こと に なり ます 。 その ため 、 ダウ ロード 用 の < a > 要素 を 生成 し 、 右クリックメニュー から 「 対象 に ファイル を 保存 」 を 選択 し て もらわ ない と いけ ない という 不便 さ が あり ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ Blob オブジェクト を 生成 . . ↓ Blob へ の アクセス URL を 生成 . . ↓ < a > 要素 を 生成 し 、 Blob の URL を セット . . ↓ [ ユーザー ] 右クリックメニュー から 保存 ─ ─ ─ ─ ─ ─ ─ ─ / これ で は 、 ユーザー 側 にとって も 不便 です ね （ ノ ω ｀ ； そんな とき は 、 HTML5 で 追加 定義 さ れ て いる 「 download 」 属性 と 、 Java script の click () を 使う と 、 IE の msSaveBlob () と 同じ よう に 自動 ダウンロード が でき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ Blob オブジェクト を 生成 . . ↓ Blob へ の アクセス URL を 生成 . . ↓ < a > 要素 を 生成 し 、 Blob の URL を セット . . ↓ < a > 要素 に 「 download 」 属性 を 指定 . . ↓ ( < a > 要素 ). click () で 自動的 に クリック 発動 ─ ─ ─ ─ ─ ─ ─ ─ / download 属性 を 指定 さ れ た < a > は 、 リンク 先 の URL を すべて ダウンロード する よう に なる ので 、 あと は click () で クリック を 発動 すれ ば 、 そのまま ダウンロード が 開始 さ れる 、 っていう 仕組み です ヽ ( ・ ω ・ ＊ ■ ■ ■ 関数 の 作り方 ■ ■ ■ 前回 の 質問 で 、 / ─ ─ ─ ─ ─ ─ ─ ─ alert ( str ); ─ ─ ─ ─ ─ ─ ─ ─ / の よう に アラート 表示 し て い た もの を 、 ファイル に 書き出す 関数 toFile () を 作成 し て 、 / ─ ─ ─ ─ ─ ─ ─ ─ toFile ( str ); ─ ─ ─ ─ ─ ─ ─ ─ / っていう 感じ に できる よう に し ます 。 関数 toFile () の 引数 に は 、 Blob に 書き出す テキスト を 引数 として 用意 し て おき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ function toFile ( text ){ … } ─ ─ ─ ─ ─ ─ ─ ─ / で は 、 関数 toFile () の 中身 を 作っ て いき ましょ う ＊ ゜ ▽＾) 9 まずは Blob オブジェクト の 生成 です 。 ブラウザ が window . Blob に 対応 し て いれ ば 簡単 。 出力 する 内容 text と 、 MIME タイプ を 与える だけ で Blob オブジェクト が でき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var blob = new Blob ( [ text ], { " type ": " text / plain " } ); ─ ─ ─ ─ ─ ─ ─ ─ / wndow . Blob に 対応 し て い ない 場合 は 、 window . BlobBuilder を 経由 し て 出力 内容 を 設定 し 、 getBlob () で Blob オブジェクト を 取得 し ます 。 ただし 、 BlobBuilder は ブラウザ ごと に 「 プレフィックス 」 が 必須 な ので 、 少し めんどい です 。 / ─ ─ ─ ─ ─ ─ ─ ─ var builder = ( " MozBlobBuilder " in window ) ? new MozBlobBuilder () : ( " WebKitBlobBuilder " in window ) ? new WebKitBlobBuilder () : null ; if ( builder ){ builder . append ( text ); var blob = builder . getBlob (); } ─ ─ ─ ─ ─ ─ ─ ─ / さて 、 Blob オブジェクト が 生成 でき たら 、 今度 は それ を ファイル として ダウンロード を 開始 し ます 。 IE の 場合 は 簡単 ♪ msSaveBlob () メソッド に 、 Blob オブジェクト と 、 保存 ファイル 名 を 指定 する だけ です 。 / ─ ─ ─ ─ ─ ─ ─ ─ window . navigator . msSaveBlob ( blob , " 保存 ファイル 名 . txt " ); ─ ─ ─ ─ ─ ─ ─ ─ / IE 以外 の ブラウザ で は 、 まず 、 Blob へ の アクセス URL を 取得 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var url = ( window . URL || window . webkit URL ). createObjectURL ( blob ); ─ ─ ─ ─ ─ ─ ─ ─ / URL を 取得 でき たら 、 あと は 、 例のアレ です よ 、 アレ ' d (￣ ω ￣ ＊ < a > に download 属性 を 仕込ん で 自動 クリック です 。 / ─ ─ ─ ─ ─ ─ ─ ─ var a = document . body . appendChild ( document . createElement (" a ") ); a . style. display = " none "; a .s etAttribute ( " href ", url ); a .s etAttribute ( " download ", " 保存 ファイル 名 . txt " ); a . click (); ─ ─ ─ ─ ─ ─ ─ ─ / これ で 、 関数 toFile () が 出来上がり o (＊＾▽＾＊) o この 関数 が 実行 さ れ た 時点 で 、 引数 text に 指定 さ れ た 内容 が 、 テキストファイル として 自動的 に ダウンロード さ れ ます 。 ■ ■ ■ 関数 の 実施 例 ■ ■ ■ 以下 が 、 関数 toFile () の 全貌 です ヽ ( ゜ ▽ ＾ ＊ / ─ ─ ─ ─ ─ ─ ─ ─ function toFile ( text ){ //----] 保存 ファイル 名 var fname = " 保存 ファイル 名 . txt "; //----] Blob オブジェクト を 生成 var blob = ( " Blob " in window ) ? new Blob ( [ text ], { " type ": " text / plain " } ) : ( function (){ var builder = ( " MozBlobBuilder " in window ) ? new MozBlobBuilder () : ( " WebKitBlobBuilder " in window ) ? new WebKitBlobBuilder () : null ; if ( builder ){ builder . append ( text ); return builder . getBlob (); } else { return null } } )(); //----] Blob を ファイル に 出力 if ( ! blob ){ alert (" ご 利用 の 環境 で は 、 ファイル 出力 でき ませ ん 。 "); return ; } else if ( " msSaveBlob " in window . navigator ){ window . navigator . msSaveOrOpenBlob ( blob , fname ); } else { var url = ( window . URL || window . webkit URL ). createObjectURL ( blob ); if ( ! url ){ alert (" ご 利用 の 環境 で は 、 ファイル 出力 でき ませ ん ") } var a = document . body . appendChild ( document . createElement (" a ") ); a . style. display = " none "; a .s etAttribute ( " href ", url ); a .s etAttribute ( " download ", fname ); a . click (); } } ─ ─ ─ ─ ─ ─ ─ ─ / 
var data = [ 01 , 02 , 03 , 04 , 05 , 06 , 07 , 08 , 09 , 10 , 11 , 12 , 13 , 14 , 15 ]; var result = new Array (); data . forEach ( function ( n ){ result . push ((" 00 " + n ). substr (- 2 ));}); console.log ( result ); これ で 配列 result に 2 桁 合わせ に なっ た 数値 が 入り ます 
sample : convert from label element to JavaScript object - JSFiddle https :// jsfiddle .net / sii _ side / expf 2 n 09 / 考え方 として は 、 var obj = {}; 空 の オブジェクト を 用意 し て おい て 、 obj . A = " a "; obj . B = " b "; obj . C = " c "; この よう に 処理 し ます が 、 ドット 記法 だ と プロパティ 名 に 変数 を 使え ない ので 、 obj [" A "] = " a "; この よう に ブラケット 記法 で 表し ます 。 これ を ループ で 処理 する ため 、 obj [ label の text ] = label の for ; として 回し て い ます 。 
結果 は 同じ です が 、 setDate という メソッド も あり ます 。 -------------------- var date = new Date (" 2016 / 7 / 26 "); // テキストボックス の 扱い は 省略 var dat e2 = new Date ( date. setDate ( date. getDate () + 10 )); // getDate し て 日付 を 取得 し 10 を 加える // その 数字 を setDate に 渡す // そのまま だ と 使え ない ので 再度 new Date する var y = dat e2 . getFullYear (); var m = dat e2 . getMonth (); var d = dat e2 . getDate (); console.log ( y + "/" + ( m + 1 ) + "/" + d ); -------------------- Date オブジェクト の 良い ところ は 、 日付 や 時間 の 繰り 上がり や 繰り 下がり を 内部 で 上手い こと 処理 し て くれる こと です 。 setDate に 渡さ れる 日付 も 、 例えば 負 の 数 や 31 より 大きな 数 が 出 て き て も 構い ませ ん 。 その 分 、 自動的 に 月 を 遡っ たり 進め たり し て くれ ます 。 なお 、 7月26日 の 10日 後 は 8月6日 で は なく 8月5日 です ので 、 念 の ため …。 【 参考 】 Date. prototype .s etDate () - JavaScript | MDN https :// developer . mozilla.org / ja / docs / Web / JavaScript / Reference / Glob ... 
こんばんは ＜ h2 ） の 場所 に javascript で 作っ た データ を 貼り たい の です が DOM を 利用 する と 簡単 です 。 # 2 個 目 の div に id を 指定 し ます 。 ＃ document . getElementById (" div 1 "). style. background Color = " lavender "; で 2 個 目 の div だけ 背景色 を 変更 でき ます 。 <! DOCTYPE html > < html > < head > < title > jquery にて テキスト を html 画面 上 に 挿入 し たい です 。 </ title > < script src ="// ajax . googleapis . com / ajax / libs / jquery / 1 . 11 . 0 / jquery . min . js "> </ script > < style type =" text / css "> div . fix { display : table ; border : 1 px black solid ; } div . cel { display : table - cell ; border : 1 px black solid ; } </ style > </ head > < body > < div class =" fix "> </ div > < div class =" cel "> 左側 の div </ div > < div id =" div 1 " class =" cel ">< h2 > 右側 の div </ h2 ></ div > < script type =" text / javascript "> document . getElementById (" div 1 "). style. background Color = " lavender "; </ script > </ body > </ html > 
element は jQuery の セレクタ が 指定 さ れ て いる と 思わ れ ます 。 validate () の 中 で どういう 処理 に なっ て いる か わから ない です が 、 closest を 使用 し て いる ので 、 おそらく テキスト の クラス 「 form - grouping 」 あたり が 指定 さ れ て いる の で は と 思い ます 。 （ closest は 、 現 要素 から さかのぼっ て 要素 を マッチング し て いく ので 。 ） 参考 ： http:// js . studio - kingdom . com / jquery / traversing / closest 
javascript の ソース から test 文字列 を 検索 し て 、 変数 に セット し て いる 箇所 を 目視 で 調べる の が 一番 早い と 思い ます 。 
その 下 の jsfiddle に 書い て あり ます よ 。 。 
お はこん ばん に ち ゎ （＾－＾＊ Java script で プレーンテキスト ファイル 「～. txt 」 を 読み込む に は 、 HTML5 で 新しく 実装 さ れ かけ て いる FileReader を 使わ ない と いけ ない の だけど… … この FileReader 、 まだ 対応 でき て い ない 閲覧 環境 の 人が たくさん いる ので 、 使う に は まだ 時期 尚早 な かんじ です 。 つまり 、 「～. txt 」 を 読み込ん で 処理 する の は 、 まだ やめ た 方 が いい です 。 じゃぁ 、 どう する か ？ って こと です が 、 Java script で そういう 辞書 式 の 機能 を 使う 場合 に は 、 JS ファイル 「～. js 」 の なか に 、 連想配列 の よう な オブジェクト 形式 で データ を 作っ て おい て 、 ページ を 表示 する とき に 、 その JS ファイル で 作っ て おい た オブジェクト から データ を 取り出し ます 。 ■ ■ ■ JS ファイル の 作り方 ■ ■ ■ 例えば 、 ひとつ の 配列 を 用意 し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var Rosen = []; ─ ─ ─ ─ ─ ─ ─ ─ / この 配列 に 、 路線 ごと の データ の オブジェクト を 入れ て いき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ var Rosen = [ { 路線 ０ の データ }, { 路線 １ の データ }, { 路線 ２ の データ }, … { 路線 Ｎ の データ } ]; ─ ─ ─ ─ ─ ─ ─ ─ / こんな 感じ です 。 こう し て おく と 、 ｎ 番 目 の 「 路線 ｎ 」 の データ に は 、 / ─ ─ ─ ─ ─ ─ ─ ─ Rosen [ n ] ─ ─ ─ ─ ─ ─ ─ ─ / で アクセス できる よう に なり ます 。 配列 の 中 に 入れ た 各 路線 の データ は 「 連想配列 」 に し て おき ます 。 「 連想配列 」 は 、 「 キー : 値 」 の よう に 「 キー 」 と 「 値 」 を セット に し た データ を 、 ひとまとめ に し て 格納 し て おく オブジェクト です 。 例えば 、 / ─ ─ ─ ─ ─ ─ ─ ─ var data = { " title ":" 火花 ", " author ":" 又吉直樹 " }; ─ ─ ─ ─ ─ ─ ─ ─ / の よう に 連想配列 データ を 作っ て おく と / ─ ─ ─ ─ ─ ─ ─ ─ dat a.t itle ⇒ 火花 data . author ⇒ 又吉直樹 ─ ─ ─ ─ ─ ─ ─ ─ / の よう に 、 データ の 「 キー 」 を 使っ て 対応 する 「 値 」 を 取り出す こと が でき ます 。 この よう に 、 配列 と 連想配列 を 使っ て データ を JS ファイル に 作っ て おけ ば 、 その データ を 検索 し て 表示 する こと が でき ます ' d (＾－＾＊ 連想配列 は 、 {} で 囲っ て 定義 できる ので 、 路線 ごと の データ を 連想配列 で 作る と 、 路線 の リスト は 下記 の よう な 形式 に なる わけ です 。 / ─ ─ ─ ─ ─ ─ ─ ─ var Rosen = [ { 路線 ０ の データ }, { 路線 １ の データ }, { 路線 ２ の データ }, … { 路線 Ｎ の データ } ]; ─ ─ ─ ─ ─ ─ ─ ─ / さて 、 質問 の ケース で は 、 路線 ごと の データ の 連想配列 の 「 キー 」 として は 、 / ─ ─ ─ ─ ─ ─ ─ ─ ・ 平日 と 休日 の 路線 ID を いれる 「 id 」 ・ 路線 の 種別 を いれる 「 type 」 ・ 駅 の リスト を いれる 「 st 」 ─ ─ ─ ─ ─ ─ ─ ─ / この ３つ が 必要 です 。 / ─ ─ ─ ─ ─ ─ ─ ─ { " id " : ～, " type " : ～, " st ": ～ } ─ ─ ─ ─ ─ ─ ─ ─ / こんな 感じ ヽ ( ・ ω ・ ＊ " id " について は 、 平日 の id と 休日 の id を 入れる ため に 、 配列 の 形 に し て おく と イイ です 。 / ─ ─ ─ ─ ─ ─ ─ ─ { " id ": [ " 平日 ID ", " 休日 ID " ], " type ": ～, " st ": ～ } ─ ─ ─ ─ ─ ─ ─ ─ / こう し て おく と 、 ｎ 番 目 の 路線 の 平日 ID は Rosen [ n ]. id [ 0 ] 、 休日 ID は Rosen [ n ]. id [ 1 ]、 の よう に 取り出せ ます 。 " type " について は 、 種別 を そのまま 文字列 で 入れれ ば イイ です ね 。 / ─ ─ ─ ─ ─ ─ ─ ─ { " id ": [ " 平日 ID ", " 休日 ID " ], " type ": " 種別 の 文字列 （ pu など ）", " st ": ～ } ─ ─ ─ ─ ─ ─ ─ ─ / これ で 、 ｎ 番 目 の 路線 の 種別 は Rosen [ n ]. type で 取得 でき ます 。 駅 の リスト st は 、 これ も 配列 で 用意 し て おく と イイ でしょ う ♪ / ─ ─ ─ ─ ─ ─ ─ ─ { " id ": [ " 平日 ID ", " 休日 ID " ], " type ": " 種別 の 文字列 （ pu など ）", " st ": [ " 駅名 ０ ", " 駅名 １ ", " 駅名 ２ ", … ]; } ─ ─ ─ ─ ─ ─ ─ ─ / こう し て おく と 、 ｎ 番 目 の 路線 の m 番目 の 駅名 は 、 Rosen [ n ]. st [ m ] で 取り出す こと が でき ます 。 でも 、 それぞれ の 駅 に は 、 駅 タイプ も ある 、 って こと でし た ね 。 その 場合 は 、 / ─ ─ ─ ─ ─ ─ ─ ─ { " id ": [ " 平日 ID ", " 休日 ID " ], " type ": " 種別 の 文字列 （ pu など ）", " st ": [ { " name ": " 駅名 ０ ", " type ": " 種類 " }, { " name ": " 駅名 １ ", " type ": " 種類 " }, { " name ": " 駅名 ２ ", " type ": " 種類 " }, … , { " name ": " 駅名 Ｘ ", " type ": " 種類 " } ]; } ─ ─ ─ ─ ─ ─ ─ ─ / っていう 感じ に 、 それぞれ の 駅 を 連想配列 に し て おく と いい です 。 これ で 、 ｎ 番 目 の 路線 の m 番目 の 駅 について 、 駅 の 名前 は Rosen [ n ]. st [ m ]. name で 、 駅 の 種類 は Rosen [ n ]. st [ m ]. type で 、 それぞれ 取得 する こと が でき ます 。 この よう な 連想配列 を 、 お おもと の 配列 Rosen [] の なか に に 入れ て いく ので 、 データ 用 の JS ファイル に 記述 する コード は / ─ ─ ─ ─ ─ ─ ─ ─ var Rosen = [ { " id ": [ " 平日 ID ", " 休日 ID " ], " type ": " 種別 の 文字列 （ pu など ）", " st ": [ { " name ": " 駅名 ０ ", " type ": " 種類 " }, { " name ": " 駅名 １ ", " type ": " 種類 " }, { " name ": " 駅名 ２ ", " type ": " 種類 " }, … , { " name ": " 駅名 Ｘ ", " type ": " 種類 " } ]; }, { " id ": [ " 平日 ID ", " 休日 ID " ], " type ": " 種別 の 文字列 （ pu など ）", " st ": [ { " name ": " 駅名 ０ ", " type ": " 種類 " }, { " name ": " 駅名 １ ", " type ": " 種類 " }, { " name ": " 駅名 ２ ", " type ": " 種類 " }, … , { " name ": " 駅名 Ｘ ", " type ": " 種類 " } ]; }, … ]; ─ ─ ─ ─ ─ ─ ─ ─ / っていう 感じ に 記述 し て いき ます 。 この まま だ と コード が 見づらい ので 、 実際 に 作成 する とき は 、 「 // コメント 行 」 を 使っ て 以下 の よう に 記述 すれ ば 見やすい です 。 / ─ ─ ─ ─ ─ ─ ─ ─ var Rosen = [ // << ○ ○ 線 >> { " id ": [ " 平日 ID ", " 休日 ID " ], " type ": " 種別 の 文字列 （ pu など ）", " st ": [ { " name ": " 駅名 ０ ", " type ": " 種類 " }, { " name ": " 駅名 １ ", " type ": " 種類 " }, { " name ": " 駅名 ２ ", " type ": " 種類 " }, … , { " name ": " 駅名 Ｘ ", " type ": " 種類 " } ]; }, // << × × 線 >> { " id ": [ " 平日 ID ", " 休日 ID " ], " type ": " 種別 の 文字列 （ pu など ）", " st ": [ { " name ": " 駅名 ０ ", " type ": " 種類 " }, { " name ": " 駅名 １ ", " type ": " 種類 " }, { " name ": " 駅名 ２ ", " type ": " 種類 " }, … , { " name ": " 駅名 Ｘ ", " type ": " 種類 " } ]; }, … ]; ─ ─ ─ ─ ─ ─ ─ ─ / ■ ■ ■ 実装 方法 ■ ■ ■ 上記 の よう な JS ファイル を 作っ て もらえ ば 、 以下 の よう に JS ファイル を 読み込む だけ で 、 ページ 内 で 路線 データ を 使える よう に なり ます ＊ ゜ ▽＾) b ' / ─ ─ ─ ─ ─ ─ ─ ─ < script type =" text / javascript " src =" JS ファイル の パス "></ script > ─ ─ ─ ─ ─ ─ ─ ─ / あと は 、 フォーム を 用意 し て 、 < form > 要素 の action に 、 検索 処理 の Java script を 仕込め ば 完成 です ね ♪ / ─ ─ ─ ─ ─ ─ ─ ─ < form name =" search " action =" javascript :～ 検索 処理 ～"> ～ 各 フォーム を 設置 ～ < input type =" submit " value =" 検索 "> </ form > ─ ─ ─ ─ ─ ─ ─ ─ / 普通 は 、 action に 仕込む Java script 処理 は 長く なる ので 、 別途 、 関数 として 作成 し て おき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < form name =" search " action =" javascript : search ()"> ～ 各 フォーム を 設置 ～ < input type =" submit " value =" 検索 "> </ form > < script type =" text / javascript "> function search (){ ～ 検索 処理 ～ } </ script > ─ ─ ─ ─ ─ ─ ─ ─ / ■ ■ ■ 全体 の 実施 例 ■ ■ ■ 全体 の コード を 記述 する と 、 以下 の よう な 感じ に なる と 思い ます ヽ ( ・ ω ・ ＊ 路線 データ の JS ファイル の 内容 について は 上記 で 提示 済み な ので 、 ここ で は 省略 し ます ♪ / ─ ─ ─ ─ ─ ─ ─ ─ <! DOCTYPE html > < html > < head > < title > 時刻表 検索 </ title > <!-- ─ ─ 駅 データ 読み込み ─ ─ --> < script type =" text / javascript " src =" JS ファイル の パス "></ script > < head > < body > <!-- ─ ─ 入力 フォーム ─ ─ --> < form name =" search " action =" javascript : search ()"> 駅名 : < input type =" text " name =" stname "> < br > ダイヤ : < lable >< input type =" radio " name =" wh " value =" w "> 平日 </ label > < lable >< input type =" radio " name =" wh " value =" h "> 休日 </ label > < br > 方向 : < lable >< input type =" radio " name =" ud " value =" 1 "> 下り </ label > < lable >< input type =" radio " name =" ud " value =" 2 "> 登り </ label > < br > < input type =" submit " value =" 検索 "> <!-- ─ ─ スクリプト ： 検索 ─ ─ --> < script type =" text / javascript "> /*---- 関数 : 検索 ----*/ function search (){ //----] 入力 さ れ た 駅名 を 取得 var stname = document .s earch .s tna me. value ; //----] 未 入力 なら エラー if ( ! stname ){ alert ( " 駅名 が 未 入力 です " ); return false ; } //----] データ を 検索 for ( var n = 0 ; n < Rosen . length ; n ++){ for ( var m = 0 ; m < Rosen [ n ]. st . length ; m+ +){ if ( stname == Rosen [ n ]. st [ m ]. name ){ //----]----] 一致 する データ 発見 //----]----]----] wh を 取得 for ( var i = 0 ; i < document .s ea rc h. w h. length ; i ++){ if ( document .s ea rc h. wh [ i ]. checked ){ var wh = document .s ea rc h. wh [ i ]. value ; break ; } } //----]----]----] ud を 取得 for ( var i = 0 ; i < document .s ea rc h. ud . length ; i ++){ if ( document .s ea rc h. ud [ i ]. checked ){ var ud = document .s ea rc h. ud [ i ]. value ; break ; } } //----]----]----] 未 選択 の 場合 エラー if ( ( ! wh ) || ( ! ud ) ){ alert ( " 未 設定 の 項目 が あり ます " ); return false ; } //----]----]----] パラメータ を 決定 var r = ( wh ==" w " ) ? Rosen [ n ]. id [ 0 ] : Rosen [ n ]. id [ 1 ] ; var t = 2 ; var s = m ; var c = Rosen [ n ]. type ; //----]----]----] ジャンプ var url = " eki . html ? r ="+ r +"& t ="+ t +"& ud ="+ ud +"& s ="+ s +"& c ="+ c +"& wh ="+ wh ; location . href = url ; return ; }// if ( stname ) }// for ( m ) }// for ( n ) alert (" 一致 する 駅 が ありません "); } </ script > </ body > </ html > ─ ─ ─ ─ ─ ─ ─ ─ / 
$. load () を 使用 し て いる という こと は 、 jQuery を 使っ て いる という 前提 で 回答 いたし ます 。 [ 読み込み 元 HTML & JS ] < html > < head > < meta charset =" UTF-8 "> < script type =" text / javascript " src =" jquery . min . js "></ script > < script type =" text / javascript "> $( function (){ $(". click "). on (" click ", function (){ $(". insert "). load (" include . php ", function (){ $(". insert "). on (" click ", ". box ", function (){ $( this ). css (" display ", " none "); }); }); }); }); </ script > </ head > < body > < div class =" click "> クリック </ div > < div class =" insert "></ div > </ body > </ html > [$. load で 読み込ま れる ソース ] < div class =" box "> ボックス </ div > $. load など で 後 から 追加 さ れる 要素 に イベント を 割り当てる 場合 は 、 ( 親 要素 セレクタ ). on ( イベント 名 , 対象 セレクタ , function ) で 割り付け を し ます 。 
具体 的 に どこ に どんな ドロップダウンメニュー を 表示 さ せ たい の か わかり ませ ん し わかっ た として も JavaScript で 動的 生成 を する の は 面倒 な ので 最初 から ドロップダウンメニュー は 作成 し て おい た 上 で 非表示 に し て おき 画像 の クリック で 表示 さ せる よう に すれ ば 良い の で は ない の でしょ う か ？ 要するに 動作 ② の 方 つまり ドロップダウンメニュー の on change で 何 か を alert 表示 さ せる よう な もの の 方 を 先 に 作成 する の です 。 ( と 言う か ， それ が でき ない と 何にも でき ない でしょ う ？) そして 動作 ① の 方 の 画像 の クリック で ドロップダウンメニュー の display を block 状態 に し たり ドロップダウンメニュー の visibility を visible 状態 に する という わけ です 。 「 display と visibility の 違い - Qiita 」 http:// qiita . com / ma _ me / items / a 5249693 c 0 b2 1836126 b 「 表示 ・ 非表示 － JavaScript 入門 」 http:// www . pori 2 .net / js / DOM / 7 . html 
ソース を 調べ て み たら 、 いくつ か 問題 が 見 られ まし た 。 まず 、 html から 、 説明 し ます 。 DOCTYPE 宣言 ・ ルート 要素 について です が 、 質問者 が 掲示 し て くださっ た html ソース は html5 な ので 、 <! DOCTYPE html > < html lang =" ja "> < head > < meta charset =" UTF-8 " /> ・ ・ ・ で OK です 。 < meta http - equiv =" Content - Type " content =" text / html ; charset = utf-8 "/> を 削除 し て 、 < title ></ title > の 次 行 に < meta charset =" utf-8 " /> を 上記 の よう に 位置 に 変更 し て ください 。 それ と 、 < html > を < html lang =" ja "> に 変更 し て ください 。 次に 2 行 の < script >〜</ script > の 位置 が 間違っ て い ます 。 <! DOCTYPE html > < html lang =" ja "> < head > < meta charset =" UTF-8 " /> < script type =" text / javascript " src =" http:// ajax . googleapis . com / ajax / libs / jquery / 1 . 7 . 2 / jquery . min . js "></ script > < script type =" text / javascript " src =" scripts / JavaScript . js "></ script > < title ></ title > ・ ・ ・ の よう に 位置 を 変更 し て ください 。 さらに style. css が 見当たり ませ ん ね 〜 これ が ない と 、 外部 スタイルシート を 読み込み が でき ませ ん 。 < link rel =" stylesheet " type =" text / css " href =" style. css "> を 下記 の よう に 入れ ましょ う 。 < title ></ title > < link rel =" stylesheet " type =" text / css " href =" style. css "> </ head > ・ ・ ・ html は ここ まで で 、 次 は css ＞ リスト の 黒点 が 表示 さ れる style. css の 最初 ( 1 行 目 ) に 下記 を 追加 し て ください 。 li { l is t-style : none ; } そう すれ ば 、 黒点 が 消え ます 。 css は ここ まで で 、 次 は JavaScript . js の 中身 質問者 は 、 例 の サイト から そのまま コピペ し て 保存 し た と 思い ます が 、 それ だ と 、 カーソル を 当て て も メニュー が 表示 さ れ ませ ん 。 < div class =" zentai "> < ul class =" tyuukan "> < div class =" nakami "> ↑ クラス 名 を 変え て い ます ので 、 JavaScript . js も 変える 必要 が あり ます 。 3 行 目 の var li = $('. mod _ categorynav > ul > li '); を var li = $('. zentai > ul > li '); に 変更 し ます 。 8 行 目 の $( target ). find ('. mod _ submenu '). slideDown ( 200 ); を $( target ). find ('. nakami '). slideDown ( 200 ); さらに 11 行 目 の $('. mod _ submenu '). hide (); を $('. nakami '). hide (); 全部 で 3 か所 を 変更 し て ください 。 これ で 質問者 が 思っ て いる 〝 理想 通り の 表示 〟 が 出来る よう に なる と 思い ます 。 
          ◆           ◆           ◆ ◆ ◆           ◆           ◆ ◆◆◆◆◆◆◆◆ 
① MyDB という 名前 の データベース は 作成 し て い ます か ？ データベース が ない と 接続 でき ませ ん 。 ② ポート 5435 が ファイアウォール で ブロック さ れ て い ませ ん か ？ セキュリティ ソフト や 、 Windows ファイアフォール で ポート が ブロック さ れ て いる と 、 つながり ませ ん 。 上記 ２ 点 を ご 確認 ください 。 データソース ODBC の テスト で つながる よう に なれ ば 、 あと すこし です 。 
カンマ に かぎら ず 、 その プログラム に は 問題 が あり ます 。 htmlspecialchars () を 利用 し て ください 。 // php .net / manual / ja / function . htmlspecialchars . php 
うまく シート を 特定 でき て い ない という か 、 単一 の シート しか 選択 でき て い ない よう な 気 が し ます 。 まず 全 シート を 配列 に 格納 し ない と まずい よう に 思い ます 。 var ss = SpreadsheetApp . getActiveSpreadsheet (); // シート を 配列 に 格納 する sh = ss . getSheets (); function myFunction () { // 配列 の 数 だけ 同じ 処理 を 実行 する for ( var i = 0 ; i < sh . length ; i ++) { sh [ i ]. getRange ( 1 , 1 ). setValue (""); sh [ i ]. getRange ( 2 , 2 ). setValue (""); sh [ i ]. getRange ( 5 , 7 ). setValue (""); } } .s etValue ("") は . clear () で も 適当 に やっ て み て ください 。 
そういう こと は 、 ご 教授 と は 言わ ず に 、 「 ご 教示 」 と 言い ます 。 日本語 は きちんと 使い ましょ う 。 
ボイスチャット の 仕様 が よー わかり ませ ん けど javascript で 取得 し たら よい の で は ない でしょ う か 。 keyup とか が 効く か は 不明 です が 効か ない なら 一定 時間 ごと に 取り に 行く と か に すれ ば 良い の で は 。 
変数 と id 名 を 変え て 同じ よう に 並べ て しまえ ば 良い と 思い ます 。 ↓ を var map = new google . maps . Map ( mm , opt ); の 下 に 追加 var p2 = new google . maps . LatLng ( XX , XX ); var op t2 ={ zoom : 13 , center : p2 , mapTypeId : google . maps . MapTypeId . ROADMAP }; var mm 2 = document . getElementById (" my ma p2 "); var ma p2 = new google . maps . Map ( mm 2 , op t2 ); ↓ を HTML の 好き な 所 に 追加 < div id =" my ma p2 " style =" width : 600 px ; height : 400 px "></ div > 
お はこん ばん に ち ゎ ＊＾－＾) o [ アクセス ] ボタン の onclick イベント に 、 入力 フォーム の 中身 を 取得 し て 、 それ を URL と する ページ に 移動 する 処理 を 仕込み ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < input id =" url " type =" text "> < button type =" button " onclick =" location . href = document . getElementById (' url '). value ;" > アクセス </ button > ─ ─ ─ ─ ─ ─ ─ ─ / onclick に 仕込む 処理 は 、 長く なる と ソース が 混乱 する ので 、 あらかじめ 関数 として 作っ て 置く の が 一般的 です ね ' d ( ・ ω ・ ＊ / ─ ─ ─ ─ ─ ─ ─ ─ < script type =" text / javascript "> function toURL (){ var url = document . getElementById (" url "). value ; location . href = url ; } </ script > < input id =" url " type =" text "> < button type =" button " onclick =" toURL ()"> アクセス </ button > ─ ─ ─ ─ ─ ─ ─ ─ / なお 、 関数 toURL () の 中 で 、 テキストボックス に 入力 さ れ た値 が URL として 適切 か を 判別 し て 、 不適切 な 値 の 場合 は エラーメッセージ を 表示 する 、 みたい な 処理 を 追加 し て おく方 が イイ と 思い ます 。 例えば 、 / ─ ─ ─ ─ ─ ─ ─ ─ function toURL (){ var url = document . getElementById (" url "). value ; alert ( url ); if ( url . match (/^ https ?\:\/\/[\ d \/\.\-\_\#\?\&\= a - zA - Z ]+/) ){ location . href = url ; } else { alert (" 入力 が 不適切 です 。 "); } } ─ ─ ─ ─ ─ ─ ─ ─ / こんな 感じ ♪ 
上記 の パターン だけ なら 、 二つ 記述 すれ ば 良い でしょ う 。 div img : nth - child ( 2 n ){ outline : 1 px solid red ; } div a : nth - child ( 2 n ) > img { outline : 1 px solid red ; } 
お はこん ばん に ち ゎ o (＾▽＾＊ $(". foo ") で セル の リスト を 取得 し て 、 $. each () で リスト の 中身 １つ １つ を 設定 すれ ば イイ です 。 if () 文 でも いい けど 、 今回 の よう に 条件 によって 値 を 切り替える 場合 は 、 ３ 項 演算子 を 使う 方 が きれい です ＊＾－＾) b ' / ─ ─ ─ ─ ─ ─ ─ ─ $( function (){ $. each ( $(". foo "), function ( i , elem ){ $( elem ). html ()==" 日 " ? $( elem ). css (" color ","# f 00 ") : $( elem ). html ()==" 土 " ? $( elem ). css (" color ","# 00 f ") : $( elem ). css (" color ","# 666 ") ; } ); } ); ─ ─ ─ ─ ─ ─ ─ ─ / 条件 判定 文 の ところ で 、 取得 する の は " 日 " とか " 土 " の よう な テキスト だけ な ので 、 . html () で は なく . text () で も いい です 。 / ─ ─ ─ ─ ─ ─ ─ ─ $( function (){ $. each ( $(". foo "), function ( i , elem ){ $( elem ). text ()==" 日 " ? $( elem ). css (" color ","# f 00 ") : $( elem ). text ()==" 土 " ? $( elem ). css (" color ","# 00 f ") : $( elem ). css (" color ","# 666 ") ; } ); } ); ─ ─ ─ ─ ─ ─ ─ ─ / ただ 、 この 程度 の 処理 の ため に わざわざ jQuery を 導入 する の も 、 ちょっと ばかばかしい 感じ が し ます ね … （＾－＾； テーブル の 直後 に 、 普通に Java script の 生 コード で 処理 し た 方 が 効率 いい と 思い ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < table > < tr > < td class =" foo "> 日 </ td > < td class =" foo "> 月 </ td > < td class =" foo "> 火 </ td > < td class =" foo "> 水 </ td > < td class =" foo "> 木 </ td > < td class =" foo "> 金 </ td > < td class =" foo "> 土 </ td > </ tr > </ table > < script type =" text / javascript "> var td = document . querySelectorAll (". foo "); for ( var i = 0 ; i < td . length ; i ++){ td [ i ]. style. color = td [ i ]. innerHTML . match (" 日 ") ? "# f 00 " : td [ i ]. innerHTML . match (" 土 ") ? "# 00 f " : "# 666 " ; } </ script > ─ ─ ─ ─ ─ ─ ─ ─ / あと 、 セル の 順番 で 色分け し て も いい の なら 、 Java script を 使わ ず に CSS だけ でも 色分け でき ます ね 。 / ─ ─ ─ ─ ─ ─ ─ ─ < table id =" data "> < tr > < td > 日 </ td >< td > 月 </ td >< td > 火 </ td >< td > 水 </ td >< td > 木 </ td >< td > 金 </ td >< td > 土 </ td > </ tr > </ table > < style type =" text / css "> # data td { color : # 666 } # data td : nth - child ( 7 n + 1 ){ color :# f 00 } # data td : nth - child ( 7 n ){ color : # 00 f } </ style > ─ ─ ─ ─ ─ ─ ─ ─ / 
Java script に は 、 色々 な 手法 が あり 、 数 ある プログラミング言語 の 中 でも とても 柔軟 性 の 高い 言語 です 。 変態 言語 という 人 も 居 ます 。 おそらくは 、 配列 で ある Array の forEach という もの か と 思い ます が 、 詳しい 詳細 は https :// developer . mozilla.org / ja / docs / Web / JavaScript / Reference / Glob ... こちら に 記載 さ れ て い ます が 、 難解 か と 思い ます ので 簡単 に 書き ます 。 = = = = = ========================= 配列 は この よう な 書き方 を し ます 。 var list = new Array ( 1 , 2 , 3 , 4 , 5 ); => list [ 0 ]= 1 , list [ 1 ]= 2 , list [ 2 ]= 3 , list [ 3 ]= 4 , list [ 4 ]= 5 これ の 中身 を 取り出す に は 、 昔 は 次 の よう に し て い まし た 。 for ( var i = 0 ; i < list . length ; i ++){ var num = list [ i ]; } これ だ と 、 i という 変数 を 使う 必要 が あり 、 この 中 で さらに 処理 を 行っ て いく と 、 二 回 目 の i を 書い て しまう など 事故 に なり かね ず 、 色々 と 面倒 です 。 これ の 代わり として forEach を 使う こと が できる よう に なり まし た 。 = = = = = ========================= list . forEach ( function ( num ){}); この よう に 書く こと で 、 var num = list [ i ]; の よう な 書き方 を する こと なく 、 list の 中身 が 順番 に 、 num に 入っ て くる ので 、 順番 に 処理 が できる よう に なる の です 。 forEach ( function ( ここ の 文字 ){}); に当たる 、 「 ここ の 文字 」 は 、 変数 の ルール に 従っ て いれ ば なん で も よい です 。 function ( 1 ){} 等 変数 の ルール に 背い て いる と ダメ です 。 この とき 、 Array 型 の list の 中身 は 、 1 , 2 , 3 , 4 , 5 と 数字 な ので 、 特別 な 意味 は 持ち ませ ん 。 = = = = = ========================= では 次 の 場合 は どうでしょう か 。 var list = new Array ( new Array ( 1 , 2 , 3 ) , new Array (" A "," B "," C ") , new Array (" X "," Y "," Z ") ); この list は Array 型 です が 、 その 中身 も Array が 入っ て い ます 。 この とき list . forEach ( function ( l ){}); と し た 場合 、 function ( l ) の l に は 、 new Array ( 1 , 2 , 3 ) 、 次に new Array (" A "," B "," C ") ・ ・ ・ という よう に 、 l に は list の 中身 である 配列 が 入っ て き ます 。 list . forEach ( function ( l ){ var count = l . length ; console.log ( count ); // F1 2 を 押し た とき に 出る テスト 画面 ( console ) に 表示 する 、 という 意味 }); こう する と 、 count に は それぞれ の 配列 の 長さ が 入っ て き ます 。 この とき 使っ た 、 l . length の length は 、 list の 中 に 入っ て い た 配列 Array に 含ま れる プロパティ です 。 = = = = = ========================= つまり 、 list . forEach ( function (e) {}); 等 と し た とき に 、 list の 中身 が e に 順番 に 入っ て くる ので 、 その 中身 に 合っ た 処理 が できる 、 という 事 に なり ます 。 参考 に なさ れ た 、 e . render (); も 、 . render () という 機能 を 持っ た 何 か を 配列 に 入れ て い た ため 使える よう に なっ た 、 という こと です 。 = = = = = ========================= 分から なけれ ば ごめんね 
Java script そのもの に は 用意 さ れ て い ませ ん 。 拡張 が 必要 です 。 幸い Web は 広く 検索 て 探し やすい もの です 。 自前 で 用意 し た もの を 公開 さ れ てる 方 が 居 ます 。 【 JavaScript 】 日付 を 自由 に フォーマット する 2010年 9月28日 http:// www . ilo v ex. co.jp / blog / system / distributionsystem / javascript - 5 ... 用意 さ れ た date. js を 読み込ま せる だけ で 、 Date が 拡張 さ れる 、 という 仕組み です 。 
PC 内 に サーバー を 立ち 上げ て おい て 、 そこ に webwrite で データ を 送信 ↓ サーバーサイドスクリプト で データ を 受け取る ↓ JavaScript を 使い 、 websocket や ajax で データ を 受信 、 ブラウザ に 表示 回りくどい です が 、 この 三段構え で 実現 でき ます 。 web write () は ブラウザ に 直接 データ を 送る こと は でき ませ ん ので 、 裏側 で 仲介 し て やる サーバー が 必要 に なる わけ です 。 
javascript に 記述 ミス が あり ます 。 $('. slider '). bxSlider (); は $('. slider '). bxSlider ({ に なり ます 。 また 、 最後 に }); が もう １つ 必要 に なり ます 。 { から } まで が オプション の 指定 です 。 まとめる と 以下 の よう に なり ます 。 $( document ). ready ( function (){ $('. slider '). bxSlider ({ startSlide : 0 , speed : 1000 , mode : ' fade ', controls : false , pager : false }); }); ただし 、 この オプション 指定 だ と 画像 が 切り替わら な ので 、 「 auto : true 」 を 追加 する 、 または 「 controls または pager を true に する 」 必要 が ある と 思い ます 。 
お はこん ばん に ち ゎ （＾－＾＊ 「 全て の タグ 」 について 、 タグ 内 の 文字 の 色 を しらべる って こと です が 、 いくつ か の タグ は 親子 に なっ て い ます よ ね ？ その 場合 、 タグ の なか に 含ま れる の は 単純 な テキスト だけ で なく 、 HTML の タグ を 含ん で たり し ます 。 例えば 、 / ─ ─ ─ ─ ─ ─ ─ ─ < div style =" color : red "> テキスト １ < span style =" color : blue "> テキスト ２ </ span > </ div > ─ ─ ─ ─ ─ ─ ─ ─ / みたい な とき 、 < div > と < span > は 別々 に その 中 の テキスト と 色 情報 を 取得 する の でしょ う か ？ あと 、 「 css 定義 、 タグ 中 に 定義 の 両方 」 って あり ます が 、 これ は 、 CSS と style 属性 の 両方 が 指定 さ れ て いる 要素 で は 、 その 両方 を 取得 する って こと です か ？ 最終 的 に 適用 さ れ て いる 色 っていう こと です か ？ その 辺り が 曖昧 で 分かり にくい の だ けど 、 ひとまず 、 「 適用 さ れ て いる 色 」 って こと で やっ て みる と 、 / ─ ─ ─ ─ ─ ─ ─ ─ window . onload = function (){ var elems = document . querySelectorAll ("*"); for ( var i = 0 ; i < el em s.l ength ; i ++){ var style = elems [ i ]. current Style || document . defaultView . getComputedStyle ( elems [ i ], "" ) ; alert ( elems [ i ]. innerHTML +"\ n "+ style. color ); } } ─ ─ ─ ─ ─ ─ ─ ─ / こんな 感じ です 。 中 に 子 要素 を ふくむ 要素 を 除外 する なら 、 / ─ ─ ─ ─ ─ ─ ─ ─ window . onload = function (){ var elems = document . querySelectorAll ("*"); for ( var i = 0 ; i < el em s.l ength ; i ++){ if ( elems [ i ]. innerHTML . match ("<") ){ continue } var style = elems [ i ]. current Style || document . defaultView . getComputedStyle ( elems [ i ], "" ) ; alert ( elems [ i ]. innerHTML +"\ n "+ style. color ); } } ─ ─ ─ ─ ─ ─ ─ ─ / こんな 感じ です ね ヽ ( ・ ω ・ ＊ 取得 し たい モノ が 違っ て い たら 、 返信 か 補足 ください m(__)m 
document . getElementById (" output "). innerHTML = todo todo が 配列 と なっ て いる ため 、 , が 追加 さ れ て い ます 。 配列 を 文字列 に する ため に document . getElementById (" output "). innerHTML = todo . join (""); として 、 配列 を 結合 し て ください 。 del 関数 内 で も 、 document . getElementById (" output "). innerHTML = todo . join (""); と し て ください 。 削除 ボタン が 効か ない の は 、 onclick =" del ( n );" が そのまま 適用 さ れる ため 、 n の 数値 を del に 渡す 形 と なっ て しまっ て ます 。 （ 送信 ボタン を 押し た 回数 ） です ので 、 todo [ n ]= id _ for m1 . id _ textBox 1 . value + '< input type =" button " value =" 削除 " onclick =" del (' + n + ');" />< br >'; として 、 HTML に 追加 さ れる とき に 、 onclick =" del ( 0 );" onclick =" del ( 1 );" ・ ・ ・ と なる よう に し て ください 。 
onload = profInit (); これ を コメントアウト し 、 < body onLoad =" profInit ()"> と し て ください 。 タグ が 読み込ま れる 前 に 、 profInit () が 実行 さ れ て いる ため 、 エラー と なっ て い ます 。 
「 上手く いき ませ ん 」 と 書か れ まし て も 何 が どう なれ ば 「 上手く 行っ た 状態 」 で 何 が どう なっ て いる の が 「 上手く 行っ て ない 状態 」 な の か ？ これ が 全く わかり ませ ん 。 JavaScript で は なく ActionScript の 参考 URL です が ↓ 「 番外 編 - 質問 NGワード 集 - クニカルノート 」 より 【 うまく いき ませ ん 】 http:// www . fumiononaka . com / TechNotes / NGWords . html # U ～ 引用 ～ > 【 うまく いき ませ ん 】 > です から 、 ご 質問 を さ れ た の でしょ う 。 > それ は わかっ て い ます 。 > わから ない の は 、 具体 的 に 何 が どう し た の か です 。 > 110番 に 電話 する 人たち の 第一声 が 「 大変 です !」 だ と いい ます 。 > けれど 、 「 大変 」 で なけれ ば 、 普通 110番 し ませ ん 。 > 具体 的 に 何 が どう 大変 な の か を 聞か ない かぎり 、 > 警察 は 出動 の しよう が あり ませ ん 。 > > 「 うまく いか ない 」 という の は 、 > 目的 と そぐわない 結果 が 発生 し て いる という > 主観 的 な 感情 しか 伝え ませ ん 。 > つまり 、 赤ん坊 が むずかっ て 泣く の と 同じ 情報量 と いえ ます 。 > この ご 説明 から 解決 を 導ける 専門家 は 、 占い師 と 精神科 医 だけ です 。 上手く 行く 行か ない は 置い て おい て 本題 に 入り たい ところ です が 結局 やはり 何 が し たい の か 全然 わかり ませ ん 。 とりあえず 次 の よう な 単純 化 し た HTML で も 作成 し て み て 検証 さ れ て み て は いかが でしょ う か ？ . <! DOCTYPE html > < html > < head > < meta charset =" utf-8 "> < title > Test </ title > < script type =" text / javascript "> // クエリ 情報 (= 送信 さ れ た 内容 ) を 表示 (※ 確認 用 ) alert ( location .s earch ); function checkboxCheck (){      //「 ファイル 削除 」 チェック 値 に 変換      // チェックボックス 有無 確認      var chkFDel ;      //★↓「 id =" chkFDel " エレメント が 存在 すれ ば 」 以下 を 実行      if ( document . getElementById (" chkFDel ")){          chkFDel = document . getElementById (" chkFDel "). checked ;          if ( chkFDel ){                   // チェック 有 セット              document . getElementById (" chkFDel "). value = " 1 ";          } else {              //(★↓ セット は 自由 です が 送信 は さ れ ませ ん ( 無 意味 ))              // チェック 無 セット              document . getElementById (" chkFDel "). value = " 0 ";          }      //★↓「 id =" chkFDel " エレメント が 存在 し なけれ ば 」 以降 を 実行      } else {          // Ctrl 無 （ FileUpLoad に なっ て いる ） セット (★ 意味不明 )          document . getElementById (" chkFDel "). value = " 2 ";      }      // form 内 の HTML を 表示 (※ 確認 用 )      alert ( document . getElementById (" fo "). innerHTML );      document . getElementById (" fo "). submit (); } </ script > </ head > < body > < form id =" fo " method =" get " action =""> < input type =" checkbox " value ="" name =" boxVal " id =" chkFDel "> </ form > < input type =" button " value =" チェック " onclick =" checkboxCheck ()"> </ body > </ html > . まず 上記 の      //★↓「 id =" chkFDel " エレメント が 存在 すれ ば 」 以下 を 実行      if ( document . getElementById (" chkFDel ")){ の 部分 です が ， これ は この ページ 内 に < input type =" checkbox " ～ id =" chkFDel "> 自体 が 存在 する の か どう か を 調べ て もし 存在 すれ ば 以下 の if 文 を 実行 せよ 。 という 意味 ですよ。 < input type =" checkbox " ～ id =" chkFDel "> 自体 は 作者 ( 質問者 さん ) が 作成 し た の で は ない の でしょ う か ？ ご 質問 を 見る 限り 閲覧 者 の 行動 は 関係 し な と 思わ れ ます 。 なぜ 自分 が 作っ た ものの 有無 を 調べ て いる の か わかり ませ ん 。 そして それ と 対 に なる      //★↓「 id =" chkFDel " エレメント が 存在 し なけれ ば 」 以降 を 実行      } else { の 部分 です が ， この else 文 が 実行 さ れる という こと は 「 < input type =" checkbox " ～ id =" chkFDel "> 自体 が 存在 し ない ！ 」 という こと です よ 。 存在 しも し ない 物 に対して      // Ctrl 無 （ FileUpLoad に なっ て いる ） セット (★ 意味不明 )      document . getElementById (" chkFDel "). value = " 2 "; の よう に し て 何 か の 属性 値 を セット できる わけ が ないじゃないですか 。 喩えれ ば     もし ヨシ子 ちゃん が この世 に 存在 し なけれ ば     ヨシ子 ちゃん に 赤い リボン を 付け て あげよ う 。 みたい な オカルト 的 プログラム に 見え ます 。 コワイ です 。 そして      //(★↓ セット は 自由 です が 送信 は さ れ ませ ん ( 無 意味 ))      // チェック 無 セット      document . getElementById (" chkFDel "). value = " 0 "; この 部分 です が これ は      // form 内 の HTML を 表示 (※ 確認 用 )      alert ( document . getElementById (" fo "). innerHTML ); の 部分 によって チェックボックス の value に 0 が ちゃんと セット さ れる こと が 確認 できる と 思い ます 。 ただ ...， value に 0 を セット し て も チェック さ れ て い ない の です から 何 も 送信 さ れ ませ ん よ 。 document . getElementById (" fo "). submit (); で どこ か に 何 か を 送信 する の が 目的 でし たら 何にも 意味 が ない 行動 に なる と 思い ます 。 結局 ， 結論 は 最初 に 戻っ て 「 何 が し たい の かも ， 何 が どう なれ ば 良い の か も わから ない 。 」 という こと に なり ます 。 
お はこん ばん に ち ゎ ♪ 関数 calc () の 中身 で 、 / ─ ─ ─ ─ ─ ─ ─ ─ a = len gt h. d1 . value ; ─ ─ ─ ─ ─ ─ ─ ─ / を / ─ ─ ─ ─ ─ ─ ─ ─ a = document . len gt h. d1 . value ; ─ ─ ─ ─ ─ ─ ─ ─ / に 直し て ください ヽ ( ・ ω ・ ＊ / ─ ─ ─ ─ ─ ─ ─ ─ a = len gt h. d1 . value ; ─ ─ ─ ─ ─ ─ ─ ─ / だ と 、 グローバル変数 window . length の d1 プロパティ に アクセス しよ う と し て い ます が 、 グローバル変数 window . length は 定義 さ れ て い ない ので 、 エラー に なっ て い ます 。 
コンソール を 利用 する もの は JScript ( WSH ) と よば れ 、 JavaScript と は 別 の 物 です 。 https :// msdn . microsoft . com / ja - jp / library / x 85 xxsf 4 ( v = vs . 90 ). aspx JavaScript は 、 一般的 に は HTML で 使用 する スクリプト言語 に なり ます ので 、 仕事 で 使う の は 、 HTML 側 です ね 。 
Date オブジェクト の getTime () を 関数 の 前後 で 実行 し て 引き算 すれ ば いい です 。 
「 い つ 」 「 何 を 」 「 どこ に 」 「 どの よう に 」 この うち 書か れ て いらっしゃる こと は 「 何 を 」 のみ です 。 それ も 漠然と し た 「 セレクト ボックス で 選ん だ value の 値 を 」 のみ です 。 具体 性 に 乏しく 何 を 質問 し て いらっしゃる の だ か 良く わかり ませ ん が 。 。 。 こんな ところ ↓ で どうでしょう ？ <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > Example </ title > < script type =" text / javascript "> function showValue ( box ){      var target = document . getElementById (" out pu t_t xt ");      target . value = box . options [ box .s electedIndex ]. value ; } </ script > </ head > < body > < select on change =" showValue ( this )"> < option value =""> 磯野 家 </ option > < option value =" 波平 "> 父 </ option > < option value =" フネ "> 母 </ option > < option value =" サザエ "> 長女 </ option > < option value =" カツオ "> 長男 </ option > < option value =" ワカメ "> 次女 </ option > </ select > < br > < input id =" out pu t_t xt " readOnly > </ body > </ html > 
そもそも HTML が 間違っ て いる ので 何とも ...。 パッと 見 から し て 構造 が 変 でしょ う ？ < select id =" foo ">       < select id =" bar ">       </ select > ↑ 何 コレ ？？？ . 普通な ら 次 の よう に し ます か ね 。 < select id =" foo "> < optgroup label =" group 1 "> < option value =" 0 "> hello </ option > < option value =" 1 "> hell o2 </ option > < option value =" 2 "> hello 3 </ option > </ optgroup > < optgroup label =" group 2 " disabled style =" display : none ;"> < option value =" 0 "> sleep </ option > < option value =" 1 "> sleeping </ option > < option value =" 2 "> sleeper </ option > </ optgroup > </ select > . > dom 自体 を remove する 以外 で 何 か 方法 は ござい ます でしょ う か 。 dom 自体 を remove する の 意味 や 効能 が わかり ませ ん が < select id =" bar "> を 削除 し たく ない の でし たら 次 の よう に する とか ？？？ < select id =" foo "> < optgroup label =" group 1 "> < option value =" 0 "> hello </ option > < option value =" 1 "> hell o2 </ option > < option value =" 2 "> hello 3 </ option > </ optgroup > </ select > < select id =" bar "> < optgroup label =" group 2 " disabled style =" display : none ;"> < option value =" 0 "> sleep </ option > < option value =" 1 "> sleeping </ option > < option value =" 2 "> sleeper </ option > </ optgroup > </ select > 
Java script を 学び ましょ う ただ 単に 俺 TUEE やり たい だけ なら 課金 してやれ ば いいんじゃない です か ね 
URL が http:// www . yahoo . co.jp の 場合 もしくは タイトル が Google を 含む 場合 メッセージ を 表示 する サンプル です 。 Dim objShell , objWindow Dim objIE Set objShell = CreateObject (" Shell . Application ") Set objIE = Nothing For Each objWindow In objShell . Windows If TypeName ( objWindow . document ) = " HTMLDocument " Then If objWindow . document . URL = " http:// www . yahoo . co.jp /" or Instr ( 1 , objWindow . document . TITLE ," Google ")<> 0 Then Set objIE = objWindow ' 存在 する 場合 の 処理 ----------- MsgBox " タイトル は :" & objIE . document . Title & vbCrLf & " URL は :" & objIE . document . URL MsgBox " body の 内容 :"& objIE . document . Body . InnerHTML ' - - - - - - - ------------------------- End IF End If Next Set objShell = Nothing If objIE Is Nothing Then wsc ri pt. quit End If 
一つ 上 の 層 で あれ ば 「../」 で 戻れ ます 。 何 層 も 戻る 場合 は 層 の 数 「../」 を つけれ ば いい 
Canvas は たしか 、 style 属性 の Width 、 Height を 設定 する と 、 元 の サイズ から 、 style で 指定 し た サイズ に なっ た 倍率 で 、 canvas 内 の 画像 が 拡大 さ れ た と 思い ます 。 な ので 、 canvas . width canvas . height に 直接 設定 し たい サイズ （ この 場合 は window の サイズ ） を 指定 し て ください 。 
ざっと 作ってみた ので 試し て み て ください 。 複数 行 を 一気に 編集 し た とき に 対応 さ せる 方法 とか も あり ます が 、 とりあえず 単純 な パターン だけ を 提示 し て おき ます 。 最初 の function myFuncition (){} は 削除 し た うえ で 、 下記 を コピペ し て 保存 、 そのまま シート で 値 を 入れ て み て ください 。 その 勤怠 表 の シート 名 は シート 1 という 名前 だ という 前提 です 。 もし 異なる 場合 は 下記 コード 中 の シート 1 を 変更 し て 下さい 。 // 現在 の スプレッドシート 特定 var ss = SpreadsheetApp . getActiveSpreadsheet (); // 現在 の シート 特定 （ シート 1 、 シート 2 ・ ・ ・ ） var sh = ss . getActiveSheet (); function onEdit (e) { // shName → 編集 さ れ た シート 名 、 row → 編集 さ れ た セル の 行 、 col → 同じく 列 、 val → 編集 さ れ た値 var shName = e . source . getActiveSheet (). getName (); var row = e . range . getRow (); var col = e . range . getColumn (); var val = e . range . getValue (); // シート 1 の D 列 orE 列 が 編集 さ れ たら ・ ・ ・ if (( shName == " シート 1 ") && (( col == 4 ) || ( col == 5 ))) { // 始業 時刻 取得 var start = sh . getRange ( row , 4 ). getValue (); // 終業 時刻 取得 var end = sh . getRange ( row , 5 ). getValue (); // 始業 就業 時刻 が 埋め られ て おり かつ 0 . 5時間 で 割り切れれ ば ・ ・ ・ if (( start >= 9 ) && ( end <= 17 ) && (( end - start )% 0 . 5 == 0 )) { // 既存 の 色 を リセット （ 上書き を 考慮 ） sh . getRange ( row , 6 , 1 , 16 ). setBackground (""); // 色 塗り 開始 列 を 取得 var i = ( start - 9 )/ 0 . 5 ; // 0 . 5時間 で 割っ て 色 塗り する 数 を 取得 var j = ( end - start )/ 0 . 5 ; // 同じ 行 の C 列 と 同じ 色 を セット する sh . getRange ( row , 6 + i , 1 , j ). setBackground ( sh . getRange ( row , 3 ). getBackground ()); } else { Browser . msgBox (" 入力 値 が 正しく ありません "); } } } 
> $("# tenki "). text ( data . forecasts [ 0 ]. telop ); > }) > }); ↓ $("# tenki "). text ( data . forecasts [ 0 ]. telop ); }) } > $. getJSON (" http:// weather . livedoor . com / forecast / webservice / json / v 1 ? city =" + city , function ( data ) { ↓ var city = $("# city "). val (); $. getJSON (" http:// weather . livedoor . com / forecast / webservice / json / v 1 ? city =" + city , function ( data ) { しかしながら 、 この 修正 を し た として も 、 通信 は 高い 確率 で 失敗 する と 思わ れ ます 。 JavaScript に は セキュリティ 上 の 制限 で ある 、 クロス ドメイン 制限 が ある から です 。 例外 は あり ます が 、 この サービス で は 、 サーバー 側 で 例外 を 用意 し て い ない よう な ので 、 どう しよう も あり ませ ん 。 
IIS など の webサーバ 上 で 、 mysql ( データベース ） から 、 SQL の SELECT 文 で データ を 取得 し て 、 画面 の input タグ に 表示 し 、 変更 さ れ た 内容 を webサーバ 上 で 、 SQL の UPDATE 文 や INSERT 文 で データベース に 保存 し ます 。 
if 文 とか 言う 前 に ， DOM の 捕まえ 方 ( 名指し の しかた ) とか その 実行 タイミング は OK な の です か ？ つまり 例えば その if 文 の 直前 ( すぐ 上 ) の 行 辺り に alert ( document . waku _ a . value ); と 書け ば その waku _ a エレメント の value 値 が 表示 さ れる の です か ？ if 文 以前 に ， そこ の ところ が 最 重要 です よ 。 === === === === === === === 試し に コピペ で HTML ファイル を 作成 し て み て 動作 確認 を し て み て ください ↓ 。 <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > Sample </ title > < script type =" text / javascript "> function dataCheck (){      alert (" チェック を 開始 し ます ");      alert ( document . waku _ a . value ); } </ script > </ head > < body > 枠 A < input id =" waku _ a " name =" waku _ a " value =" あ "> < hr > < input type =" button " value =" チェック " onclick =" dataCheck ()"> </ body > </ html > if 文 以前 に document . waku _ a . value これ 自体 の 意味 が わから ない という 意味 です 。 こういう ところ から 着実 に 動作 する よう に 作成 し て 行か ない と 。 。 。 スタート 地点 自体 が 間違っ て いる と 思い ます 。 === === === === === === === 結局 の ところ ， ご 質問 で は 書か れ て いらっしゃら ない 重要 部分 で ある HTML から 作り替える 必要 が ある 可能性 も あり ます し ， JavaScript だけ を 根本 から 作成 し 直す 必要 が ある の かも しれ ませ ん が とりあえず それ らしく 動く もの で ヒント と なる よう な コード を 書い て おき ます 。 <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > Sample </ title > < script type =" text / javascript "> function dataCheck (){      var wA = document . getElementById (" waku _ a ");      var wB = document . getElementById (" waku _ b ");      var wC = document . getElementById (" waku _ c ");      var wD = document . getElementById (" waku _ d ");      if (! wA . value || wA . value ==" 0 " || ! wB . value || wB . value ==" 0 "){          alert (" 枠 A または 枠 B が 空文字 または 0 です 。 ")      }      if (! wC . value || ! wD . value ){          alert (" 枠 C または 枠 D が 空文字 です 。 ")      } } </ script > </ head > < body > 枠 A < input id =" waku _ a ">< br > 枠 B < input id =" waku _ b ">< br > < br > 枠 C < input id =" waku _ c ">< br > 枠 D < input id =" waku _ d ">< br > < hr > < input type =" button " value =" チェック " onclick =" dataCheck ()"> </ body > </ html > 
そもそも ブックマークレット な のに なぜ 改行 が 入っ て いる の です か ？ 改行 など 入れ られ ない でしょ う ？ それ と 「 最後 の ボタン 」 と は 一番 下 の 「 ?」 が 表示 さ れ て いる ボタン の こと です か ？ これ は form と 何 の 関係 も ない と 思い ます が 。 。 。 何 を し たい の でしょ う か ？？？ 何だか 良く わかり ませ ん が ， その form と は 何 の 関係 も ない 「?」 ボタン を クリック し たい の でし たら 次 の よう に する と か です か 。 。 。 javascript :( function ( d , i , v ) { d [ i ](" user nam e2 ")[ v ] = " Neos ID "; d [ i ](" password 2 ")[ v ] = " NeosPassword "; var e = document . getElementsByClassName (" help - button fadeimg "); e [ 1 ]. click ();})( document , " getElementById " ," value "); それ 以外 に その ページ に HTML コード が あれ ば 変わり ます が 書か れ て いらっしゃる HTML コード の 中 で は クラス 名 「 help - button fadeimg 」 の エレメント は ２つ あっ て ， 「?」 ボタン は その ２つ の うち １ 番目 で は なく ２ 番目 です 。 です から e [ 0 ] では なく e [ 1 ] に なり ます 。 「 ?」 ボタン で は なく 「 Login 」 ボタン を クリック し て 入力 し た form の 内容 を 送信 し たい の でし たら e [ 1 ] では なく e [ 0 ] に なる ので 次 の よう に なり ます か 。 javascript :( function ( d , i , v ) { d [ i ](" user nam e2 ")[ v ] = " Neos ID "; d [ i ](" password 2 ")[ v ] = " NeosPassword "; var e = document . getElementsByClassName (" help - button fadeimg "); e [ 0 ]. click ();})( document , " getElementById " ," value "); 上 に も 書き まし た が この e [ 0 ] や e [ 1 ] の 数字 は HTML の 他 の 部分 ( 上 の 部分 ) に 影響 さ れる ので 変わる 可能性 が 大きい ですよ。 ========================= とりあえず 下 の よう な HTML を 作成 し て み て 下部 の リンク を クリック し た 後 の URL 欄 を 確認 し て みれ ば 良い の で は ない か と 思い ます 。 < html > < head > < meta charset =" shift_jis "> < title > Test Page </ title > </ head > < body > < div class =" login "> <!-- ↓ method =" get " に 変更 し て み て 実験 --> < form method =" get " action ="? p = login "> < input type =" text " id =" user nam e2 " name =" user nam e2 " placeholder =" Username "> < input type =" password " id =" password 2 " name =" password 2 " placeholder =" Password "> < button type =" submit " class =" help - button fadeimg " name =" login "> Login </ button > < input type =" hidden " name =" login " value =" 1 " /> </ form > < a href ="? p = forgot ">< button class =" help - button fadeimg " type =" button ">?</ button ></ a > </ div > < br > < a href =' javascript :( function ( d , i , v ){ d [ i ](" user nam e2 ")[ v ]=" Neos ID "; d [ i ](" password 2 ")[ v ]=" NeosPassword "; var e = d . getElementsByClassName (" help - button fadeimg "); e [ 1 ]. click ();})( document ," getElementById "," value ");'>「?」 クリック </ a > < br > < br > < a href =' javascript :( function ( d , i , v ){ d [ i ](" user nam e2 ")[ v ]=" Neos ID "; d [ i ](" password 2 ")[ v ]=" NeosPassword "; var e = d . getElementsByClassName (" help - button fadeimg "); e [ 0 ]. click ();})( document ," getElementById "," value ");'>「 Login 」 クリック </ a > </ body > </ html > </ body > </ html > 
> document . getElementById (" t "). value = document . getElementById (" r1 "); ここ は なぜ 、 document . getElementById (" t "). value = document . getElementById (" r1 "). value ; では ない の でしょ う か ？ 結果 が 違う の は 、 前者 は value を 参照 せ ず 、 後者 は value を 参照 し て いる から です 。 逆 に 言う と 、 それだけ の こと で しか ない ので … 。 
sample : convert specify string by string . replace - JSFiddle https :// jsfiddle .net / sii _ side / w 2 pfd 8 co / 置換 の 条件 が 曖昧 （ 「 ああ と と ああ 」 を 「 ああ かか ああ 」 な の か 、 「 と と 」 を 「 かか 」 な の か （ 他 にも パターン は 考え られ ます ） がよく わから ない ） な の と 、 画像 と 説明 と が 合っ て い ない （ textarea に HTML を 書き込ん で も 意味 が 無い ） の と で 、 いくつ か 勝手 に 条件 を 設定 し て い ます 。 
最低限 for 文 が 書け 関数 の 動き が わかる くらい に なっ た の なら MDN の よう な リファレンス サイト や 個人 の ブログ など を 巡っ て 、 自分 に 不足 し て いる 部分 を 埋め て いき ます 。 その後 、 JS なら プロトタイプ チェーン 、 スコープ チェーン の よう な 言語 の 仕組み を 把握 し 、 いろいろ な プログラミング パターン や スタイル を 理解 し て いき ます 。 
自動 生成 で なく て 、 普通に タグ を 作っ て CSS で display : none ; で 非表示 で は だめ です か ？ それなら 最初 から name も value も 指定 でき ます が 。 
それ だ と hoge 達 や foo 達 は 変数 と 言う より も window オブジェクト の プロパティ に なる ので ( window という Object の キー に なる と 考えれ ば 良い )， this と [] 演算子 で できる でしょ う 。 【 例 】 ↓ <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > Test </ title > < script type =" text / javascript "> hoge 1 = " あいうえお "; ho g e2 = " かき くけ こ "; ho g e3 = " さしすせそ "; for ( var i = 1 ; i <= 3 ; i ++){ this [" foo " + i ] = this [" hoge " + i ]; } </ script > </ head > < body > <!-- 検証 --> < script type =" text / javascript "> document . write ( foo 1 + "< br >"); document . write ( fo o2 + "< br >"); document . write ( foo 3 + "< br >"); document . write ("< hr >"); for ( var i = 1 ; i <= 3 ; i ++){ document . write ( this [" foo " + i ] + "< br >"); } </ script > </ body > </ html > 
< a > の class を class =" test " に 統一 し て 、 $(". test "). on (" click ", function (){ }); で 、 a class =" test " の クリック を すべて 取得 し て 、 $(". test "). on (" click ", function (){ var obj = $("# id "); // jQuery オブジェクト として 取得 var tags = obj . html (); // }); 
作ろ う と さ れ て いる システム は 、 恐らく HTML + Java script だけ で は 効率 が 悪い 、 という こと を 前提 に 、 それでも 実装 する 場合 として 回答 し ます 。 本来 は 、 サーバー サイド の プログラム ( PHP や CGI ) と 、 データベース を 利用 す べき の 内容 か と 思い ます 。 ● ターゲット は 誰 な の か 現在 作ら れ て いる 辞書 プログラム は 、 自分 用 、 または 使う 人 本人 専用 な の か 、 辞書 を みんな で 共有 する の か 、 で 色々 異なっ て き ます 。 「 自分 専用 」 「 使う 本人 専用 」 で あれ ば 、 HTML + Java script だけ でも 代案 は 有り ます が 、 HTML + Java script のみ で は みんな で 共有 する こと は 恐らく 不可能 です 。 ● 個人 専用 の 場合 WebStorage と 言う 、 Java script を 使っ て 、 使っ て いる パソコン （ ブラウザ ） に データ を 保存 する 、 という 方法 が あり ます 。 http:// hakuhin .jp / js / storage . html window . localStorage .s etItem (" 単語 " , " 意味 "); と する と 、 単語 という キー に対して 、 意味 という 中身 で 保存 し ます 。 " 単語 " = " 意味 " と 言う 様 な 解釈 です 。 var str = window .s essionStorage . getItem (" 単語 "); と する と 、 上 で " 単語 " = " 意味 " と し まし た が 、 その 時 に 設定 し た 意味 が str に 代入 さ れ ます 。 これ が 最も 簡単 な 方法 です 。 ● 並べ替え について 色々 と 手法 が 有り ます 。 ご 確認 下さい 。 http:// qiita . com / PianoScoreJP / items / f 0 ff 7345229871039672 
横槍 です 。 Java と JavaScript は 全く 別 の プログラミング言語 です 。 JavaScript は 大体 どこ の ブラウザ で も 有効 に なっ て い ます が 、 Java アドオン は 指定 し なけれ ば 使え ませ ん 。 Java と JavaScript は インド と インドネシア ほど 違い ます 。 参考 https :// divide - et - impera . org / archives / 1597 
var td = ~ で 、 td の エレメント が 取得 でき て いる なら ば 、 td . children . length で 、 td 直下 に ある タグ の 数 を 取得 でき ます 。 
<? php ～ ?> 外 の こと です から PHP は 基本的 に 関係 あり ませ ん 。 var は 生成 さ れる HTML ( 実体 は テキスト データ ) 内 の JavaScript 内 の var です 。 JavaScript 内 の var は 変数 を 宣言 する とき に 使う キーワード です 。 つまり var が 変数 な の で は なく て var が PHP で 言う $ のようなもの です 。 var i = 0 ; この 場合 変数 は i で その i の 初期 値 として 0 を 代入 せよ 。 という 意味 に なり ます 。 
switch を 使う とき は 、 break を 忘れ ない よう に し て ください 。 > case 0 : var mtotal 2 = Math . ceil (' 0 ' * m 3 ); ↓ case 0 : var mtotal 2 = Math . ceil (' 0 ' * m 3 ); break ; 以下 、 10 まで 同様 です 。 なお 個人的 に は 、 配列 を 使う など 工夫 し て 、 switch の 使用 を 避ける よう に し た ほう が 良い と 思い ます 。 今回 の ケース で 言う なら selectedIndex * 10 でも いい と 思い ます し 、 var freight = [ 0 , 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 ]; var selindex = document . for m1 . country 1 .s electedIndex ; var mtotal 2 = Math . ceil ( freight [ selindex ] * m 3 ); 値 を 配列 で 持つ 方法 も 良い の で は ない でしょ う か 。 
お はこん ばん に ち ゎ ＊＾－＾) o NaN に なる の は 、 point [ i 2 ] が 初期 化 さ れ て い ない ため です 。 具体 的 に は 、 / ─ ─ ─ ─ ─ ─ ─ ─ point [ 0 ] += 1 ; ─ ─ ─ ─ ─ ─ ─ ─ / という 処理 を 行なう とき 、 もともと point [ 0 ] に 値 が 入っ て い ない と + 1 でき ない ので 、 最初 に / ─ ─ ─ ─ ─ ─ ─ ─ point [ 0 ] = 0 ; ─ ─ ─ ─ ─ ─ ─ ─ / の よう に 初期 化 し て い ない と NaN に なり ます ヽ ( ・ ω ・ ＊ 最初 に 配列 point を 初期 化 し て おき ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ var num = [ 1 , 1 , 1 , 2 , 3 , 3 ]; var point = [ 0 , 0 , 0 ]; for ( var i = 0 ; i < num . length ; i ++) { for ( var i 2 = 0 ; i 2 < 3 ; i 2 ++) {// 1 , 2 , 3 それぞれ が 何 回 登場 する か if ( num [ i ] == i 2+1 ) { point [ i 2 ] += 1 ; } } } ─ ─ ─ ─ ─ ─ ─ ─ / 1 , 2 , 3 の よう な ポイント を 加算 する 対象 の 数 が 多い 場合 は 、 / ─ ─ ─ ─ ─ ─ ─ ─ var point = [ 0 , 0 , 0 , … ]; ─ ─ ─ ─ ─ ─ ─ ─ / の よう に 初期 化 する と 大変 だ し 、 タイピング ミス で 数 が 合わ なく なっ たり する ケース も 出る ので 、 / ─ ─ ─ ─ ─ ─ ─ ─ var point = []; for ( var i = 0 ; i < 3 ; i ++){ point [ i ] = 0 } ─ ─ ─ ─ ─ ─ ─ ─ / の よう に 初期 化 し た 方 が 安定 だ と 思い ます ♪ あと 、 この ケース の 場合 は 、 1 , 2 , 3 という 番号 にたいして ポイント を 加算 する 仕組み な ので 、 以下 の よう に ソース を 整理 する こと も でき ます よっ ＊ ゜ ▽＾) b ' / ─ ─ ─ ─ ─ ─ ─ ─ var num = [ 1 , 1 , 1 , 2 , 3 , 3 ]; var point = [ 0 , 0 , 0 ]; for ( var i = 0 ; i < num . length ; i ++) { point [ num [ i ]- 1 ] += 1 } alert ( point ); ─ ─ ─ ─ ─ ─ ─ ─ / 
お はこん ばん に ち ゎ （＾－＾＊ 実際 の ソースコード が ない ので 、 プレイヤー 移動 と 、 スプライト アニメーション の 処理 が 、 どんな Java script コード で 実行 さ れ て いる の か 分かり ませ ん が 、 例えば 、 プレイヤー の 移動 する スピード を 、 移動 する ピクセル 数 step で 管理 し て いる 場合 は 、 プレイヤー の 位置 x は 、 / ─ ─ ─ ─ ─ ─ ─ ─ x += step ; ─ ─ ─ ─ ─ ─ ─ ─ / っていう 感じ で 変化 さ せ て いる と 思い ます 。 この step を 、 そのまま スプライト アニメーション の 次 の コマ に 進める 速さ として 、 使え ば いい です ヽ ( ・ ω ・ ＊ 例えば 、 表示 する アニメーション の コマ 番号 を N として 、 プレイヤー の 移動 の とき に 、 N も いっしょ に 変化 さ せる よう に し ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ N += step ; ( N コマ 目 を 表示 ); ─ ─ ─ ─ ─ ─ ─ ─ / x と N で 変化 の 割合 に 差 を つける なら 、 step に 重み 定数 を かけて 加算 すれ ば いい です ね 。 位置 x を 、 コマ 数 N の 1 / 2 の 速さ で 移動 さ せる なら 、 / ─ ─ ─ ─ ─ ─ ─ ─ x += ( step / 2 ); ( キャラ を 座標 Math . round ( x ) に 移動 する ); N += step ; ( N コマ 目 を 表示 ); ─ ─ ─ ─ ─ ─ ─ ─ / っていう 感じ に なり ます 。 あくまで これ は 原理 的 な お話 な ので 、 これ を 参考 に 、 いま の 自分 の スクリプト コード に 合う よう に 変形 さ せ て 取り入れれ ば 、 思う よう に 動かせる と 思い ます ＊ ・ ω ・ ) o 
お はこん ばん に ち ゎ ♪ 実際 、 どんな JS を 書い て いる か 分から ない ので 、 自前 の コード で 説明 し ます ね ヽ ( ・ ω ・ ＊ < select > の 選択 値 を 取得 する の は 、 / ─ ─ ─ ─ ─ ─ ─ ─ ( select 要素 ). value ─ ─ ─ ─ ─ ─ ─ ─ / だけ で 取れ ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < form name =" myForm "> … < select name =" dropdown "" onChange =" shokei ()"> < option value =" 300 "> りんご </ option > < option value =" 500 "> みかん </ option > < option value =" 700 "> 柿 </ option > </ select > … </ form > ─ ─ ─ ─ ─ ─ ─ ─ / の よう な HTML 構成 なら 、 / ─ ─ ─ ─ ─ ─ ─ ─ var value = document . myForm . dropdown . value ; ─ ─ ─ ─ ─ ─ ─ ─ / です 。 ただし 、 これ で 取得 した値 は 、 数値 じゃ なく 文字列 に なっ て いる ので 、 parseInt () とか で 整数 に し ない と いけ ませ ん ね 。 / ─ ─ ─ ─ ─ ─ ─ ─ var value = parseInt ( document . myForm . dropdown . value , 10 ); ─ ─ ─ ─ ─ ─ ─ ─ / これ で 、 選択 さ れ て いる < option > の value を 数値 として 取得 できる はず です 。 これ で 正しく 取得 でき て い ない 場合 は 、 どこ か 他 の コード で 間違い が ある と 思い ます ＊ ・ ω ・ ) 関数 shokei () の 中身 を 見せ て もらえる と 、 もう すこし 正確 に 回答 できる と 思い ます （＾－＾＊ 
sample : change " this " keyword reference with function . bind - JSFiddle https :// jsfiddle .net / sii _ side / 8 rmuxr 20 / bind を 使う と 、 this の 参照 先 を 特定 の オブジェクト に 束縛 する こと が でき ます 。 【 参考 】 Function . prototype . bind () - JavaScript | MDN https :// developer . mozilla.org / ja / docs / Web / JavaScript / Reference / Glob ... 
cocos 2d - js など は どうでしょう 。 
( 1 ) 直接 関係 ありません （ 多分 ） が 、 JSFiddle で は JavaScript 欄 に 、 script 要素 の タグ を 書く こと は でき ませ ん 。 外部 スクリプト と 同様 に 、 スクリプト の 中身 だけ 記載 し ます 。 －－－－－－－－－－－－ ( 2 ) JavaScript の 設定 が onload 時 に 実行 と なっ て い ます （ デフォルト の 動作 ） が 、 関数 を HTML の タグ で 仕掛ける タイプ な ので 、 順序 が 逆 に なっ て い ます 。 その ため 、 JSFiddle 上 で 動作 を 確認 する に は 、 「 No wrap - in < head >」 など 別 な もの に 変更 する 必要 が あり ます 。 設定 は 「 JAVASCRIPT 」 と 書い て ある 箇所 （ フレーム 枠 の 右 上 の 歯車 の マーク ） を クリック する と でき ます 。 －－－－－－－－－－－－ ( 3 ) > var option 1 = document . buki 1 . options ; > var Idx 1 = document . buki 1 .s electedIndex ; ↓ var option 1 = document . forms [ 1 ]. buki 1 . options ; var Idx 1 = document . forms [ 1 ]. buki 1 .s electedIndex ; 元 の 書き方 で は フォーム コントロール に 辿り 着け ない と 思い ます 。 もしか する と 、 古い ブラウザ で は 大丈夫 かも しれ ませ ん 。 －－－－－－－－－－－－ ( 4 ) 最後 の ほう で if の 大群 の 後 に 行っ て いる 、 変数 へ の 代入 の 方法 が 誤っ て い ます 。 > elementaryAATK *(( AAA + 100 )/ 100 )= HHH ; ↓ HHH = elementaryAATK *(( AAA + 100 )/ 100 ); 代入 する とき は 、 代入 先 の 変数 を = の 左側 に 書か なけれ ば なり ませ ん 。 > result = KKK * 2 + MMM *( 5 / 2 ) ; 唯一 、 これ は 大丈夫 そう です 。 －－－－－－－－－－－－ ( 5 ) > aaa = document .s tatas . IndividualAetherAATK . value ; > BBB = BBB +( aaa . value ); 先頭 に 出 て くる この よう な 処理 です が 、 aaa の 時点 で 既に value を 参照 し て いる ので 、 aaa . value と する こと は でき ませ ん （ hoge . value . value と し て いる の と 同じ な ので ） 。 な ので 、 > aaa = document .s tatas . IndividualAetherAATK . value ; ↓ aaa = document .s tatas . IndividualAetherAATK ; この よう に aaa の 時点 で は value を 参照 し ない よう に する か 、 > BBB = BBB +( aaa . value ); ↓ BBB = BBB + aaa ; この よう に 使う とき に value を 二 重 に 参照 し ない よう に する か の どちら か です 。 それから 、 JavaScript の + 演算子 に は 、 数値 の 加算 以外 に 、 文字列 の 連結 という 役割 が あり ます 。 これ は + だけ が 持っ て い て 、 - 演算子 や * 演算子 、 / 演算子 に は あり ませ ん 。 どちら か 一方 が 文字列 だ と 連結 として はたらい て しまう ため 、 注意 が 必要 です 。 例 ） 1 + 0 の 結果 は 1 （ 両方 とも 数値 な ので 加算 → 結果 は 数値 ） 1 + " 0 " の 結果 は " 10 " （ 片方 が 文字列 な ので 連結 → 結果 も 文字列 ） これ は ぜひ 覚え て おい て いただき たい の です が 、 フォーム において value を 参照 し た 場合 、 内容 が 数字 のみ で あっ て も 、 必ず 文字列 として 値 が 得 られ ます 。 + の 場合 は 数値 に 変換 し て から 演算 し ない と 、 意図 し た 結果 が 得 られ なく なり ます 。 文字列 を 数値 に 変換 する 方法 は 色々 あり ます が 、 > aaa = document .s tatas . IndividualAetherAATK . value ; ↓ aaa = document .s tatas . IndividualAetherAATK . value - 0 ; こんな 感じ で 0 を 引く だけ でも 文字列 から 数値 に なり ます 。 関数 で あれ ば parseInt など 。 －－－－－－－－－－－－ とりあえず 目 に 付い た ところ を 羅列 し まし た 。 これ だけ で 動く か どう か は 、 コード の 量 が 多 過ぎ て 試す 気力 が 無かっ た ので 、 申し訳 ありません が わかり ませ ん … 。 
下記 サイト の 「 window . open - Web API インターフェイス MDN 」 を ご覧 ください 。 https :// developer . mozilla.org / ja / docs / Web / API / window . open 
>> $(' img '). on (' click ', function () { img 要素 に対する イベント だ と 分かる >>$(' img '). addClass (' un se lec te d2 ') img 要素 に対して addClass し て いる の が 分かる 本来 addClass する 対象 は その クリック さ れ た 要素 に対し てやり たいん です よ ね ?? でし たら $(' img ') の 部分 を 変え ない と だめ です 。 正直 自分自身 on メソッド で イベント を 定義 し た 事 ない ので 分から ない の です が 、 $( this ) 辺り で 出来 ない です か ? 
> drawOval の 1つ 目 の 値 まずは drawOval で は なく 長方形 の drawRect の 方 を 試し て み て は どうでしょう か 
文字コード が あっ て ない だけ でしょ 。 
javascript で の 実装 でし たら ベター です が < a href ="#" onclick =' url =[" yahoo . co.jp "," google . co.jp "," youtube . co.jp "]; for ( a in url ){ window . open (" http:// "+ url [ a ]+"/"); event . preventDefault ();}'> リンク 開く </ a > でしょ う か 。 for で 指定 し た url （ yahoo , google , youtube ） を window . open で 開く 。 最後 に 同 一 内 の ページ の アンカー を 指定 し た # へ リンク が 飛ば ない よう クリック イベント を preventDefault で キャンセル し て い ます 。 
「 お勧め 」 という わけ で は ありません が 「 私 の 場合 は どう し てる の か ？ 」 という 意味 の 参考 まで に 。 。 。 JavaScript と 言っ て も 様々 な ソフト で 動作 し ます が ， " ブラウザ で 動作 さ せる JavaScript " の 場合 『 書く 』 と 『 見る 』 と は 別 ソフト に なり ます 。 ( 絶対 に ！ です 。 ) 私 の 場合 「 書く 」 方 の ソフト は 「 秀丸エディタ 」 と 「 MS-IME または ATOK 」 です 。 「 『 書く 』 ソフト 」 自体 は 何 で も 良い の です 。 「 メモ帳 」 で も 「 テラパッド 」 で も 「 サクラエディタ 」 で も その他 「 ドリームウィーバー 」 など で も とにかく テキストファイル が 書い て 保存 できれ ば 良い の です 。 私 は 「 秀丸エディタ 」 に 使い慣れ て いる こと と "" 内 など が 色分け さ れる ところ が 気に入っ て い ます 。 ( 当然 ， 別 ソフト で も 色分け さ れ ます よ 。 ) 「 MS-IME または ATOK 」 という の は 結局 IME です ね 。 例えば 「 ｄ 」 と 打っ て 変換 すれ ば <! DOCTYPE html > が 出 て き たり ， 「 ｈ 」 と 打っ て 変換 すれ ば < html >< head >< title ></ title ></ head >< body ></ body ></ html > が 出 て き たり 「 ｊ 」 と 打っ て 変換 すれ ば < script type =" text / javascript "></ script > が 出 て き たり ， 「 ｆ 」 と 打っ て 変換 すれ ば for ( var i = ; i < ; i ++){} が 出 て き たり ， … 書い て いれ ば キリ が ありません が こんな の を たくさん たくさん 辞書登録 し て い ます 。 「 見る 」 方 の ソフト は 「 IE 」 や 「 Firefox 」 は 当然 の こと 「 Chrome 」 や 「 Safari 」 など … ， 色んな ソフト で 見 て 動作 検証 し ます 。 「 見る 」 方 の ソフト は 決して １つ に 決め られ ませ ん し ， 決めて は いけ ませ ん 。 また 各 ブラウザ で も 色んな バージョン を 揃える 方 が 良い でしょ う 。 
その 通り です 。 フルスクラッチ で 書ける よう に なる ため の 勉強 を 続け て いれ ば いつか は 書ける よう に なり ます 。 
https :// codeiq .jp / q / 2378 JS ちゃんと 遊べ ます 。 
var id = $( this ). attr (' href '); ここ で 、 クリック し た < a > タグ 内 の href に 設定 っ さ れ て いる 値 を 取得 し て い ます が 、 間違い ない でしょ う か ？ 想定 です が 、 href ="# top " とか に なっ て いる の か と 思い ます 。 そのうえで 、 var top = $( id ). offset (). top ; のところ で 、 $( id ) が 示す 対象 が 、 offset () で 値 が 取得 でき ない よう な こと は ない でしょ う か 。 たとえば 、 < a id ="# top "> の よう に 、 インライン 要素 の 場合 、 offset は 取得 でき ませ ん 。 
var onLoad = function () { alert (' Hello world !'); } という ソース を http:// dean . edwards . name / packer / で やる と 以下 の よう な 出力 結果 と なり ます （ Base 62 encode に チェック を いれ て い ます ） eval ( function ( p , a , c , k , e , r ){ e = String ; if (!''. replace (/^/, String )){ while ( c --) r [ c ]= k [ c ]|| c ; k =[ function (e) { return r [ e ]}]; e = function (){ return '\\ w +'}; c = 1 }; while ( c --) if ( k [ c ]) p = p . replace ( new RegExp ('\\ b '+ e ( c )+'\\ b ',' g '), k [ c ]); return p }(' 0 1 = 2 (){ 3 (\' 4 5 !\')}', 6 , 6 ,' var | onLoad | function | alert | Hello | world '. split ('|'), 0 ,{})) 
お はこん ばん に ち ゎ ♪ 以前 に 回答 さ せ て 頂い た 検索 フォーム です ね （＾－＾＊ こんな 感じ の ソースコード だっ た と 思い ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ <!---- 検索 ボックス ----> < form name =" search _ dictionary 0 "> < input name =" keyword " type =" text "> < input type =" button " value =" 検索 " onclick =" search _ keyword ()"> </ form > <!---- データ リスト ----> < div id =" dictionbox "> < dl > < dt > りんご </ dt >< dd > 赤い 色 を し た 丸い 果物 。</ dd > < dt > バナナ </ dt > < dd > 黄色 い色 を し た 細長い 果物 。</ dd > </ div > </ div > <!---- スタイルシート ----> < style type =" text / css "> # dictionbox dt , # dictionbox dt +d d { display : block } # dictionbox dt. hidden , # dictionbox dt. hidden +d d { display : none } </ style > <!---- スクリプト : 検索 ----> < script type =" text / javascript "> function search _ keyword (){ var item = document . querySelectorAll ( "# dictionbox > dl > dt " ); for ( var i = 0 ; i < item . length ; i ++){ var list = document .s earch _ dictionary 0 . keyword . value .s plit (" "); for ( var ii = 0 , hit = 0 ; ii < list . length ; ii ++){ if ( item [ i ]. innerHTML . match ( list [ ii ] ) ){ hit ++ } } item [ i ]. className = hit ? "" : " hidden "; } } </ script > ─ ─ ─ ─ ─ ─ ─ ─ / < form > ごと コピー し て 動か ない の は 、 関数 search _ keyword () の 下記 コード が エラー を 起こし て いる から です 。 / ─ ─ ─ ─ ─ ─ ─ ─ var list = document .s earch _ dictionary 0 . keyword . value .s plit (" "); ─ ─ ─ ─ ─ ─ ─ ─ / なぜ エラー に なる か と いう と 、 「 document .s earch _ dictionary 0 」 は < form > 要素 を name 属性 で 取得 し て い ます が 、 < form name =" search _ dictionary 0 "> が コピー さ れ て ２つ に なっ た ため 「 document .s earch _ dictionary 0 」 が 配列 に なっ て しまっ た から です 。 この エラー を 回避 する に は 、 フォーム 別 に 、 / ─ ─ ─ ─ ─ ─ ─ ─ var list = document .s earch _ dictionary 0 [ 0 ]. keyword . value .s plit (" "); ─ ─ ─ ─ ─ ─ ─ ─ / とか / ─ ─ ─ ─ ─ ─ ─ ─ var list = document .s earch _ dictionary 0 [ 1 ]. keyword . value .s plit (" "); ─ ─ ─ ─ ─ ─ ─ ─ / の よう に フォーム ごと に 処理 を 分け ない と いけ ませ ん 。 でも 、 フォーム の 数 だけ search _ keyword () に 当たる 関数 を 用意 する の は 、 かなり 面倒くさい し 、 非 効率 です ね （ ・ ω ・ ； こんな 時 は 、 関数 search _ keyword () の 引数 で 、 フォーム 要素 を 特定 し て しまい ましょ う 。 / ─ ─ ─ ─ ─ ─ ─ ─ function search _ keyword ( form ){ … var list = form . keyword . value .s plit (" "); … } ─ ─ ─ ─ ─ ─ ─ ─ / これ で 、 関数 search _ keyword () を 実行 する とき に 、 引数 に < form > 要素 を 渡し て あげれ ば 、 フォーム ごと に 関数 を 用意 し なく て すみ ます 。 さて 、 どう やっ て 引数 に < form > 要素 を 渡す か … … じつは 、 ボタン < input > の onclick 属性 の 中 で 、 「 this . form 」 っていう コード を 使う と 、 その < input > 要素 が 所属 し て いる < form > 要素 を 指名 する こと が でき ちゃう の です ＊ ゜ ▽＾) b ' これ を 使え ば 一 発 です ♪ フォーム を 何 個 設置 しよ う と 、 押し た ボタン が ある < form > を this . form だけ で 特定 でき ちゃ い ます ♪ この 方法 を 使っ た 実施 例 が 下記 です ヽ ( ・ ω ・ ＊ / ─ ─ ─ ─ ─ ─ ─ ─ <!---- 検索 ボックス １ ----> < form > < input name =" keyword " type =" text "> < input type =" button " value =" 検索 " onclick =" search _ keyword ( this . form )"> </ form > <!---- データ リスト ----> < div id =" dictionbox "> < dl > < dt > りんご </ dt >< dd > 赤い 色 を し た 丸い 果物 。</ dd > < dt > バナナ </ dt > < dd > 黄色 い色 を し た 細長い 果物 。</ dd > </ div > </ div > <!---- 検索 ボックス ２ ----> < form > < input name =" keyword " type =" text "> < input type =" button " value =" 検索 " onclick =" search _ keyword ( this . form )"> </ form > <!---- スタイルシート ----> < style type =" text / css "> # dictionbox dt , # dictionbox dt +d d { display : block } # dictionbox dt. hidden , # dictionbox dt. hidden +d d { display : none } </ style > <!---- スクリプト : 検索 ----> < script type =" text / javascript "> function search _ keyword ( form ){ var item = document . querySelectorAll ( "# dictionbox > dl > dt " ); for ( var i = 0 ; i < item . length ; i ++){ var list = form . keyword . value .s plit (" "); for ( var ii = 0 , hit = 0 ; ii < list . length ; ii ++){ if ( item [ i ]. innerHTML . match ( list [ ii ] ) ){ hit ++ } } item [ i ]. className = hit ? "" : " hidden "; } } </ script > ─ ─ ─ ─ ─ ─ ─ ─ / 
https :// teratail . com / questions / 16720 これ を 見 て 「 あれ ？ いける ん じゃ ない ？ 」 って 思っ た ん です が ， どうやら Node.js 本体 は 自宅サーバ 側 において ある よう です ． 無けれ ば 「 インストール すれ ば いい じゃん 」 と 思い ます が ， ロリポップ の 共用 サーバ で は root 権限 は 使え ない ので ， apt - get 等 を 用い て インストール する こと は でき ませ ん ． その ため ソース から コンパイル する こと に なり ます が ， これ は なかなか 困難 を 極める と 思い ます ． もし でき た として も ， root 権限 なし で は 80 番 ポート で リッスン が でき ない という 致命 的 な 欠陥 が あり ます ． ( 8080 番 等 に し て も うまく いく か の 保証 は ありません ) 好き な ツール を インストール し たい なら VP S1 択 だ と 思い ます ． 
Google 様 の やる 事 な ので 、 マイナス オプション を 付け て 検索 する しか ない と 思い ます 。 
こんにちは あんまり 詳しく ない です が 、 先々 週 行っ て き た ばかり な ので 、 少し でも 参考 に なれ ば ・ ・ ・ 。 私 は 夏休み に 行っ た ので 、 そこそこ 混雑 し て まし た が 、 ハリポタ の 入場券 は 、 午後 ３ 時 頃 まで 発券 し て まし た 。 私 は 夜 の ハリポタ エリア に 入り たかっ た ので 、 ３ 時 頃 発券 場所 に 行っ たら 、 １ ８ 時 台 の 入場券 が 発券 でき まし た よ 。 とりあえず 、 貴方 が 入場 さ れ たら すぐ に 、 ハリポタ の 発券 場所 に 行っ て 下さい 。 もし 、 お金 を かけ て も 良い の なら 、 エクスプレス ・ パス を 買う という 手 も あり ます 。 ハリポタ エリア に 確実 に 入場 でき 、 ジャーニー に も 乗れ ます 。 スパイダーマン も 乗れ ます よ 。 エクスプレス ・ パス ５ か ７ です 。 行く 日 が 迫っ てる と 思い ます ので 、 一度 公式 HP で 、 チケット 確認 し て み て 下さい ね 。 あと 、 ゾンビ です が ・ ・ ・ 。 私 も 大 っ 嫌い で 、 ９月 の 連休 で 行き たかっ た です が 、 やめ て おき まし た 。 たしか 、 ゾンビ が 出る エリア は 決まっ て た と 思い ます 。 パーク 全体 が ゾンビ に なっ たら 、 お子さん とか 号泣 です よ ね 。 笑 ゾンビ の 時間 は わかり ませ ん 。 HP に 載っ て ない でしょ う か ？ ？ USJ に 詳しい 方 の 回答 が 得 られる と いい です ね 。 
具体 的 に は $('. flexslider '). flexslider ({ an imation : " slide ", animationLoop : false , slide show : false , slideshowSpeed : 2000 ,// ここ を 追加 。 デフォルト 値 7000m s ( ミリセカンズ ) end : function (){ // end : オプション で は 最後 まで スライド し た とき に 発生 する 処理 を 追加 できる 。 $('. flexslider '). animate ({" opacity ": 0 }, 2000 ); } }); こう し ます 。 丁寧 に 言う と 、 $('. flexslider '). flexslider メソッド に 渡す 設定 の オブジェクト に 、 slideshowSpeed を 追加 し ます 。 デフォルト 値 は 7000 に なっ て いる ので 、 これ を 2000 ( 2000 ミリ 秒 、 2 秒 間隔 ) に 設定 し なおし ます 。 その他 の 設定 、 たとえば スライド 方向 や スライド 時 に フェード する など の 設定 を する こと が 出来 ます 。 参考 http:// on - ze . com / archives / 409 
既に ある スクリプト に対し 、 ・ 新しい 機能 を 追加 する ・ 不要 な 機能 を 削除 する ・ バグ を 修正 する ・ 高速 化 する など です 。 
レガシー ASP で 処理 する なら アラート は JavaScript で 表示 する の で なく 、 アラート の ページ は 遷移 する よう に 設計 し た 方 が シンプル です 。 以前 の 案件 は 社内 システム でし た が 、 JavaScript は なるべく 使わ ない 方針 でし た 。 これから 勉強 さ れる の でし たら 、 ASP.NET の 方 が 良い と 思い ます が 。 
> orange _ knl さん > この カクッと 移動 する 現象 を 無くす 為 に は 、 どの よう な 対策 方法 を 取れ ば 良い でしょ う か ？ プラグイン は ソース で 提供 さ れ て いる ので 、 権利 上 問題 が 無けれ ば 、 ソース を 改変 し て 対策 する こと に なり ます 。 
お はこん ばん に ち ゎ ♪ Java script で < iframe > を 追加 し 、 その < iframe > に [ ex 1 . html ] を 表示 し て 、 欲しい 値 を 取得 すれ ば いい と 思い ます o ( ・ ω ・ ＊ ただし 、 < iframe > で 読み込ん だ ページ へ の アクセス は 、 親 ページ と 子 ページ が ともに 同じ ドメイン 内 の ページ じゃ ない と 、 取得 でき ない ので 注意 です 。 あと 、 GoogleChrome だけ は 、 ローカル において ある ファイル は すべて 互いに 別 ドメイン として 判断 さ れ て しまう ので 、 サーバー に アップ し ない と 動き ませ ん 。 ローカル で 実験 する とき は 、 GoogleChrome 以外 の ブラウザ で 表示 確認 し ましょ う 。 ざっと 作っ て みる と 、 こんな 感じ に なる と 思い ます ♪ / ─ ─ ─ ─ ─ ─ ─ ─ 【 ex 1 . html 】 <! DOCTYPE html > < html > < head > < title > ページ １ </ title > </ head > < body > < a > test </ a > </ body > </ html > 【 ex 2 . html 】 <! DOCTYPE html > < html > < head > < title > ページ ２ </ title > </ head > < body > < h1 ></ h1 > < script type =" text / javascript "> var iframe = document . createElement (" iframe "); iframe .s rc = "./ ex 1 . html "; if ra me. style. display = " none "; document . body . appendChild ( iframe ); if ra me. onload = function (){ var a = if ram e.c ontentWindow . document . getElementsByTagName (" a ")[ 0 ]; document . getElementsByTagName (" h1 ")[ 0 ]. innerHTML = a . outerHTML ; document . body . removeChild ( iframe ); }; </ script > </ body > </ html > ─ ─ ─ ─ ─ ─ ─ ─ / 
var reg = / xxx (\ n .+)+/; var bod y1 = " xxx \ naaa \ nbbb \ n \ n "; var m1 = bod y1 . match ( reg ); console.log ( m1 [ 0 ]); var body 2 = " xxx \ naaa \ nbbb \ nccc \ n \ n "; var m 2 = body 2 . match ( reg ); console.log ( m 2 [ 0 ]); 
先頭 に # が ある か 正規表現 で 調べる => 数字 が 3 文字 または 6 文字 ある か 正規表現 で 調べる 
> var json = { kkk : vvv } この とき 、 vvv は 変数 が 展開 さ れ ます が 、 kkk は 展開 さ れ ませ ん 。 つまり 、 その 前 に 出 て くる kkk 変数 の 値 が 何 で あっ た として も 、 それ に 関係 無く kkk という 名前 の プロパティ に なり ます 。 var json = {}; json . kkk = vvv ; こう 書い た として も 同じ です 。 この kkk も 変数 で は なく 、 オブジェクト の プロパティ 名 です 。 プロパティ 名 に 変数 を 使用 し たい の で あれ ば 、 var json = {}; json [ kkk ] = vvv ; この よう に ブラケット 記法 を 使っ た 書き方 を し ます 。 また 、 策定 中 の 新しい 規格 で は 、 var json = { [ kkk ] = vvv ; } この よう な 書き方 の 導入 が 進ん で いる よう です 。 
JS ファイル 上 で HTML エレメント の ボタン を 作る という 内容 で あれ ば 以下 の 内容 が 一 例 です が 、 具体 的 に どう いっ た こと を さ れ たい の でしょ う か ？ < body > < script src = hoge . js ></ script > </ body > /* hoge . js */ var btn = document . createElement (' input '); btn . value =' ボタン '; btn . type = ' button ' window . addEventListener (' load ', document . body . appendChild ( btn )); // もしくは var str = "< input type = button value =' ボタン '>"; document . write ( str ); 
「 クリック 位置 」 と は 具体 的 に 何 でしょ う か ？ セル の 番地 （ 行番号 と列 番号 の 組 ） 、 あるいは マウスカーソル の 絶対的 ・ 相対 的 な 位置 など 複数 思い 浮かぶ ので 。 ただ 、 いずれ に せよ 、 cs v2 table だ から 絶対無理 という こと は 無い か と 思い ます 。 とりあえず 、 セル の 番地 の こと だ と 仮定 し て … ソース が 提示 さ れ て い ない ので 方法論 だけ です が 、 例えば セル （ th 要素 や td 要素 ） に 直接 イベントハンドラ を 仕掛け て 上手く いか ない の で あれ ば 、 イベントハンドラ の 仕掛け 先 は table 要素 に し て おき 、 どの セル で イベント が 発生 し た か は event . target で 調べる 、 と すれ ば 意図 どおり に 動く かも しれ ませ ん 。 jQuery で あれ ば 、 $. on の 第 2 引数 で 発生 源 を 限定 でき ます ので 、 sample : get clicked cell address with jQuery - JSFiddle https :// jsfiddle .net / sii _ side / ax 0 tah 85 / event . target から では なく this で 直接 セル を 参照 する こと も 可能 です 。 
> 最終 的 な ゴール は 、 VBA により 、 > 選択 さ れ て いる 画像 を 抽出 し たい この 意味 ( 関連性 ) が 全く わかり ませ ん が とりあえず 無視 という こと で 以下 を 続け ます 。 > 現在 拡大 表示 さ れ た 画像 が 何 で ある か > ～ 略 ～ > 選択 さ れ た 画像 を 把握 する 方法 「 選択 ( クリック ) さ れ た 画像 」 と 「 拡大 表示 さ れ た 画像 」 と は 別物 です よ 。 また ， 「 拡大 表示 さ れ た 画像 」 は 選択 さ れ た 画像 で 実行 さ れる 関数 の 引数 から わかる でしょ う ？ < img src =" 小さな 画像 ファイル 名 1 " onClick =" Imgche (' 大きな 画像 ファイル 名 1 ')"> 「 小さな 画像 ファイル 名 1 」 が クリック さ れ た とき に 関数 Imgche が 実行 さ れ その 引数 で 指定 さ れ た 「 大きな 画像 ファイル 名 1 」 の 画像 が name =" space " の 部分 に 表示 さ れる の です 。 「 小さな 画像 ファイル 名 1 」 が クリック さ れ た とき に 「 小さな 画像 ファイル 」 が 何 で ある か は 現状 で は わかり ませ ん ね 。 です から 「 小さな 画像 ファイル 」 が 何 で ある か を 知り たい とき は それ も 引数 で 渡し て やれ ば 良い か と 思い ます 。 または クリック さ れ た エレメント 自体 を this として 引数 で 渡し ， その エレメント の src 属性 を 見る と か 。 とにもかくにも 別 関数 を 使う か ， 今 の 関数 の 引数 を 変える か の どちら か に なる でしょ う 。 書か れ て いらっしゃる サイト の スクリプト を 拝借 ＆ 変更 さ せ て いただく こと に し ます ↓ 。 . ◎ 「 小さな 画像 ファイル 名 」 を 引数 として 渡す 方法 例 ↓ < html > < head > < title ></ title > < script type =" text / javascript "> <!-- function Imgche ( ado , sml ) { document . space .s rc = ado ; alert (" 選択 さ れ た 画像 の ファイル 名 … " + sml ); alert (" 拡大 さ れ た 画像 の ファイル 名 … " + ado ); } // --> </ script > </ head > < body > < center > < p > < img src =" 小さな 画像 ファイル 名 1 " onClick =" Imgche (' 大きな 画像 ファイル 名 1 ',' 小さな 画像 ファイル 名 1 ')"> < img src =" 小さな 画像 ファイル 名 2 " onClick =" Imgche (' 大きな 画像 ファイル 名 2 ',' 小さな 画像 ファイル 名 2 ')"> < img src =" 小さな 画像 ファイル 名 3 " onClick =" Imgche (' 大きな 画像 ファイル 名 3 ',' 小さな 画像 ファイル 名 3 ')"> < img src =" 小さな 画像 ファイル 名 4 " onClick =" Imgche (' 大きな 画像 ファイル 名 4 ',' 小さな 画像 ファイル 名 4 ')"> < img src =" 小さな 画像 ファイル 名 5 " onClick =" Imgche (' 大きな 画像 ファイル 名 5 ',' 小さな 画像 ファイル 名 5 ')"> </ p > 小さな 画像 を クリック する と 額 に 大きな 画像 が 表示 さ れ ます 。 < p style =" border : ridge 10 # ccc c66 ; width : 300 ; height : 300 ; background-color : # ccc c66 ; "> < img src =" 最初 に 表示 さ れ て いる 画像 " width =" 300 " height =" 300 " name =" space "> </ p > </ center > </ body > </ html > . ◎ 選択 さ れ た エレメント を 引数 として 渡す 方法 例 ↓ < html > < head > < title ></ title > < script type =" text / javascript "> <!-- function Imgche ( ado , elm ) { document . space .s rc = ado ; alert (" 選択 さ れ た 画像 の URL … " + d ecodeURI ( elm .s rc )); alert (" 拡大 さ れ た 画像 の URL … " + d ecodeURI ( document . space .s rc )); } // --> </ script > </ head > < body > < center > < p > < img src =" 小さな 画像 ファイル 名 1 " onClick =" Imgche (' 大きな 画像 ファイル 名 1 ', this )"> < img src =" 小さな 画像 ファイル 名 2 " onClick =" Imgche (' 大きな 画像 ファイル 名 2 ', this )"> < img src =" 小さな 画像 ファイル 名 3 " onClick =" Imgche (' 大きな 画像 ファイル 名 3 ', this )"> < img src =" 小さな 画像 ファイル 名 4 " onClick =" Imgche (' 大きな 画像 ファイル 名 4 ', this )"> < img src =" 小さな 画像 ファイル 名 5 " onClick =" Imgche (' 大きな 画像 ファイル 名 5 ', this )"> </ p > 小さな 画像 を クリック する と 額 に 大きな 画像 が 表示 さ れ ます 。 < p style =" border : ridge 10 # ccc c66 ; width : 300 ; height : 300 ; background-color : # ccc c66 ; "> < img src =" 最初 に 表示 さ れ て いる 画像 " width =" 300 " height =" 300 " name =" space "> </ p > </ center > </ body > </ html > ↑ 実際 の 画像 は 用意 し なく て も 上 の HTML のみ で ， 取得 動作 だけ は する と 思い ます よ 。 ( 画像 を 用意 し なけれ ば 画像 が 表示 さ れ ない だけ の こと です 。 ) . または 「 現在 拡大 表示 さ れ た 画像 の URL 」 でし たら クリック する とき とか に 関わら ず 知り たい とき に document . space .s rc を 取得 すれ ば 良い だけ です 。 ◎ 知り たい とき に 「 現在 拡大 表示 さ れ た 画像 の URL 」 を 知る 方法 例 ↓ < button id =" btn " onclick =" alert ( decodeURI ( document . space .s rc ))"> 拡大 表示 さ れ て いる 画像 の URL を 表示 </ button > < br > < button id =" btn " onclick =" alert ( decodeURI ( document . space .s rc . match ('.+/(.+?)([\?#;].*)?$')[ 1 ]))"> 拡大 表示 さ れ て いる 画像 の ファイル 名 を 表示 </ button > ↑ コレ を HTML の body 内 の 好き な ところ に 貼り 付けれ ば 良い だけ です 。 
for 文 って いったい どこ に for 文 を 使う の でしょ う か ？ 使え なく も ありません が 複雑 に なる だけ の よう な ？ ？ 例えば 大筋 の アルゴリズム として    まず 年齢 カウンタ と なる 変数 ( 初期 値 0 ) を 作り    ループ で        誕生日 の １ 年 後 から １ 年 ずつ 加算 し た 日 を 求め        もし その 加算 し た 日 が 指定 日 を 越え たら            ループ を 抜け        もし その 加算 し た 日 が 指定 日 を 越え なけれ ば            年齢 カウンタ に 1 を 加算 する 。 こんな 感じ ↑ で 行き ます か ？？？ 上 の 考え方 で 行く 場合 の JavaScript 入り HTML の 全 文例 です ↓ 。 <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > for 文 サンプル </ title > < script type =" text / javascript "> // 年齢 を 計算 する 関数 calcAge の 定義 function calcAge (){      // 誕生日 の 年月日 の 数 を 取得      var bY = parseInt ( document . getElementById (" birthY "). value );      var bM = parseInt ( document . getElementById (" birthM "). value )- 1 ;      var bD = parseInt ( document . getElementById (" birthD "). value );      // 指定 日 の 年月日 の 数 を 取得      var aY = parseInt ( document . getElementById (" appoY "). value );      var aM = parseInt ( document . getElementById (" appoM "). value )- 1 ;      var aD = parseInt ( document . getElementById (" appoD "). value );      // 年月日 が 未 入力 で あっ たり 半角 数字 以外 が 入力 さ れ て い たら      if ( isNaN ( bY * bM * bD * aY * aM * aD )){          // 警告 文 を 出し て この 関数 を 抜ける          alert (" 年月日 に は 半角 数字 を 入力 し て ください ");          return ;      }      // 指定 日 の 経過 ミリ 秒 を 取得      aTime = ( new Date ( aY , aM , aD )). getTime ();      // 変数 ageCnt に 0 ～ 10000 を 代入 し ながら ループ      for ( var ageCnt = 0 ; ageCnt <= 10000 ; ageCnt ++){          // 誕生日 の １ 年 後 から １ 年 ずつ 加算 し た 日 の 経過 ミリ 秒 数 が          // 指定 日 の 経過 ミリ 秒 を 過ぎれ ば この for 文 を 抜ける          if (( new Date ( bY + 1 + ageCnt , bM , bD )). getTime ()> aTime ) break ;      }      // id が 「 age 」 の テキストボックス に 年齢 を 表示      document . getElementById (" age "). value = ageCnt ; } </ script > </ head > < body > 誕生日 ： 西暦 < input size =" 5 " value =" 2000 " id =" birthY "> 年 < input size =" 2 " value =" 11 " id =" birthM "> 月 < input size =" 2 " value =" 1 " id =" birthD "> 日 < br > < br > 指定 日 ： 西暦 < input size =" 5 " value =" 2016 " id =" appoY "> 年 < input size =" 2 " value =" 10 " id =" appoM "> 月 < input size =" 2 " value =" 3 " id =" appoD "> 日 < br > < br > < hr > < br > < input type =" button " value =" 年齢 計算 " onclick =" calcAge ()"> < br > < br > 指定 日 に < input readOnly size =" 5 " id =" age "> 歳 に なり ます 。 < br > ( なお １ 万 １ 歳 を 越す 歳 は 計算 さ れ ませ ん 。 ) </ body > </ html > === === === === === === === === ※ なお 上 の スクリプト で は 「 満年齢 で は 誕生日 の 前日 に １つ 歳 を とる 。 」 という 法律 的 な 満年齢 の 計算 方法 は 無視 し て 普通に 「 誕生日 に １つ 歳 を とる 」 という 慣習 的 な 年齢 計算 方法 を 取り入れ て い ます 。 法律的 で 厳密 な 満年齢 計算 を する 場合 は 指定 日 に - 1 日 する など の 処理 を 入れ て ください 。 「 満年齢 - Wikipedia 」 https :// ja . wikipedia . org / wiki /% E 6 % BA % 80 % E 5 % B 9 % B4 % E 9 % BD % A 2 ～ 引用 ～ > 年齢 計算 に あっ て は 例外的 に 初日 （ 出生 日 ） を 起算 日 と する 。 > この 関係 で 誕生日 前日 を以て 満了 日 と なり 、 > 誕生日 前日 に 年 を 取る こと に なる 。 「 起算 日 」 と は 第 1日 と する 日 の こと です 。 結婚 し た 日 や 何 か を 創立 し た 日 など など … は ， その 当日 を ○ ○ 0 日 目 ， 次 の 日 を ○ ○ 1日 目 と 計算 する ため 結婚記念日 や ， 創立記念日 な など など … の 場合 ， 同月 同日 が ○ ○ 年 満了 日 に なる の だ けれども 生まれ た 日 に 限っ て は 生まれ た 日 を 生後 1日 目 と 計算 する ため 誕生日 の 前日 に １つ 歳 を とる という 意味 です 。 ※ そもそも 昔 は 0 という 概念 が 希薄 でし た し 。    昔 は 生まれ たら １ 歳 で その後 元旦 を 迎える ごと に    みんな 一斉に １つ 歳 を とる という 時代 も あり まし た ( 数え年 )。 「 1 ． 4月1日 生まれ の 児童 生徒 の 学年 について ： 文部科学省 」 http:// www . mext . go .jp / a _ menu / shotou / shugaku / detail / 1309966 . htm ～ 引用 ～ > 人 は 誕生日 の 前日 が 終了 する 時 （ 午後 12 時 ） に > 年 を 一つ とる （ 満年齢 に 達する ） 、 と さ れ て い ます 。 > これ を 4月1日 生まれ の 子ども に 当てはめる と 、 > 誕生日 の 前日 で ある 3月31日 の 終了 時 （ 午後 12 時 ） > に 満 6 歳 に なる こと に なり ます 。 > よって 、 4月1日 生まれ の 児童 生徒 の 学年 は 、 > 翌日 の 4月2日 以降 生まれ の 児童 生徒 の 学年 より > 一つ 上 、 という こと に なり 、 > 一 学年 は 4月2日 生まれ から > 翌年 の 4月1日 生まれ の 児童 生徒 まで で > 構成 さ れる こと に なり ます 。 4月1日 生まれ の 子 は 小学校 １ 年生 など で は その 学年 で 一番 小さな 子 ( 一番 弱い 子 / いじめられっ子 / でき の 悪い 子 / 落ちこぼれ ) に なる 可能性 が 高く なり その後 の 人生 も それ を 引きずっ て 歩み 続ける 可能性 も 高く なる ため ， 本当 の 誕生日 は 4月1日 な のに 戸籍 上 の 誕生日 を 4月2日 と 登録 し て いる 人 は 多い です 。 これ は 上記 「 満年齢 」 の 計算 方法 に 起因 する こと です 。 しかし こんな こと 一般人 は 日頃 意識 し て い ない と 思う ので 上 の スクリプト で は 「 誕生日 に 歳 を とる 」 という 一般 的 な 概念 を 取り入れ て い ます 。 
各 ファイル は 、 指定 し た url の 場所 に あり ます か ？ test . js ・ ・ ・ html と 同じ 場所 画像 ・ ・ ・ html の ある フォルダ / image の 中 
ブラウザ の デベロッパー ツール （ または 開発 ツール 、 開発者 ツール 、 Web インスペクタ ） を 使用 する と 、 後 から 追加 さ れ た HTML も 見る 事 が でき ます よ 。 
基本的 に は その アニメーション が 再生 さ れ て 停止 する 時間 を 予測 し 、 Timeout 等 で 指定 時間 過ぎ たら 実行 とか を し ます 。 ただ 趣味 の 範囲 で 未 対応 ブラウザ を 切り捨て たい なら JavaScript の 新しい 機能 で ある Promise を 使う 事 で 非同期 で 処理 を 順序よく さ せる 事 は 出来 ます 。 最近 リリース さ れ た 最新 バージョン の ブラウザ で あれ ば 大抵 対応 し て ます 。 IE10 以下 辺り は 怪しい と 思い ます 。 http:// qiita . com / koki _ cheese / items / c5 59 da 338 a 3d 307 c 9 d 88 
その 処理 だ と JSP ファイル が 2つ 必要 だ と 思う の です が 、 1つ で 無理やり 書こ う と し てる の です か ね 。 最初 の JSP の 方 で は JavaScript を 使わ ず 、 最後 の JSP の 方 で JavaScript を 使う よう に すれ ば 望む 結果 が 得 られる と 思い ます 。 
つまり は 単純 に こんな 感じ ↓ の こと でしょ う か ？ <! DOCTYPE html > < html > < head > < meta charset =" shift_jis "> < title > Sample </ title > < script type =" text / javascript "> // 関数 addStr ( 引数 : 文字列 ) の 定義 function addStr ( str ){      // 文字列 を 追加 出力 する エレメント の 参照 を 取得      var target = document . getElementById (" txt ");      // その エレメント に 引数 の 文字列 を 追加      target . value += str ; } </ script > </ head > < body > < input type =" text " value =" 何 か 文字 " id =" txt " style =" width : 500px ;"> < br > < input type =" button " value =" あ 行 " onclick =" addStr (' あいうえお ')"> < br > < input type =" button " value =" か 行 " onclick =" addStr (' かき くけ こ ')"> < br > < input type =" button " value =" さ 行 " onclick =" addStr (' さしすせそ ')"> < br > < input type =" button " value =" ア 行 " onclick =" addStr (' アイウエオ ')"> < br > < input type =" button " value =" カ 行 " onclick =" addStr (' カキクケコ ')"> < br > < input type =" button " value =" サ 行 " onclick =" addStr (' サシスセソ ')"> </ body > </ html > 
JavaScript の ソース 見 ない と なんとも いえ ませ ん が 、 おそらく ２つ の テーブル の 違い を 判断 でき て ない ため 、 ２ こめ が 消え て しまっ てる の だ と 思い ます 。 以下 、 確認 です が 、 ・ 1 ~ 3 の セル を クリック する と ● と ▲ （ ▼ ） の 部分 が 切り替わる 、 という の は 、 列 １ ～ ３ の セル （ ▲ が 入っ て いる < TD >） を クリック する と 、 ● が 入っ て いる セル （ １ 列 目 の < TH > の 中身 ） が 入れ替わる という 認識 で いい でしょ う か 。 ・ 動作 として は 、 テーブル １ の セル を 選択 し た 場合 は 、 テーブル １ の 選択 さ れ た行 の １ 列 目 、 テーブル ２ の 場合 は テーブル ２ の 選択 さ れ た行 の １ 列 目 を 入れ替える という 動作 で いい でしょ う か 。 上記 動作 で よろしけれ ば 、 ロジック 考え て み ます 。 
