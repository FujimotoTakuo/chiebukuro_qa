. CommandText = " INSERT INTO db _ nukitori ( MEASSURE _ t ) VALUES ( TextBox 1 );" を . CommandText = " INSERT INTO db _ nukitori ( MEASSURE _ t ) VALUES (”＆ TextBox 1 . Text & ");" として み て 下さい 。 
この 辺 は 難しい です 。 正直 、 インターフェース を 使っ た から と いっ て その後 の プログラム 変更 が 最小限 に なる か は ケースバイケース か と 思い ます 。 ぶっちゃけ た 話 、 業務 システム 用 の プログラム を 作っ て て インターフェース を 使っ た から その後 の 修正 が 楽 に なる と は 言い 切れ ない です 。 最初 の 設計 時 に よ ほど に うまく 設計 さ れ て い たら あるいは そう なる かも しれ ませ ん が 、 要求仕様 が 大幅 に 追加 や 変更 に なっ たら 対応 でき ない こと も あり え ます 。 java で の インターフェース の 利点 として は Spring など の フレームワーク を 使っ た 際 に 有効 に なる という 点 は あり ます 。 Spring は インターフェース に対して どの 実装 クラス を 割り当てる か は Spring の 設定 で 変更 する こと が でき ます 。 ある クラス に public class ClassA { private Interface A in stance ; と 記述 し て い て 、 Interface A を 実装 し た クラス が 、 ClassB 、 ClassC 、 ClassD の 3つ あっ た 時 、 Spring の 設定 により in stance フィールド の 中身 を ClassB 、 ClassC 、 ClassD いずれ に 割り当てる か 自由 に 設定 でき ます 。 Spring が 生成 し た ClassB 、 ClassC 、 ClassD いずれ か の オブジェクト を in stance フィールド に 格納 し て くれる ので プログラム 側 で new する 必要 は あり ませ ん 。 これ で たとえば 実際 の 製品 に は in stance フィールド の 中身 は ClassB を 、 試験 段階 で は 試験 用 の ClassC を 割り当てる など の 使い方 が でき ます 。 この 辺 は Spring フレームワーク の 特徴 など で 時々 紹介 さ れ ます 。 ただ 、 これ も そう そう うまく いく か どう か は 使う 人 次第 です 。 教科書 に 書か れ た 利点 が い つ いかなる 時 でも 有効 に なる と は 限ら ない です 。 
■ System . in . read () は 「 入力 ストリーム から データ の 次 の バイト を 読み込み ます 」 。 1 を 入力 する と エンターキー を 押し た 改行 の 分 まで 含ま れ て 、 49 13 10 が 入力データ に なる よう です 。 （ 13 10 が 改行 コード です 。 ） 以下 で 試し まし た 。 -- System . out . println (" 年齢 を 入力 し て ください 。 "); input = System . in . read (); System . out . println ( input ); System . out . println ( System . in . read ()); System . out . println ( System . in . read ()); -- 2回 目 の System . in . read () は 13 が 返却 さ れる ため に 、 質問 内容 の プログラム で は 入力 待ち が スキップ さ れ て よう な 現象 に なっ て ます 。 ■ 25 行 目 付近 、 in pu t2 = Character . digit ( input , 10 ); と なっ て ます 。 既に 入力 さ れ て いる input の 値 を 使っ て ます 。 これ は 数値 と なっ て ます 。 digit メソッド は 第 一 引数 は 文字コード する の です が 、 「 文字 が 指定 さ れ た 基数 の 有効数字 で ない 場合 は 、 - 1 が 返さ れ ます 。 」 -- ■ scanner を 使っ た 方 が 良い と 思い ます 。 public static void main ( String [] args ) throws java . io . IOException { // TODO 自動 生成 さ れ た メソッド ・ スタブ int ret = 0 ; int ret 2 = 0 ; int input = 0 ; int in pu t2 = 0 ; human my = new human (); Scanner scanner = new Scanner ( System . in ); System . out . println (" 年齢 を 入力 し て ください 。 "); input = scanner . nextInt (); my .s etData ( input ); ret = my . getData (); System . out . print (" 年齢 は " + ret + " です 。 "); System . out . println (); System . out . println (" HP を 入力 し て ください 。 "); in pu t2 = scanner . nextInt (); my .s et Da ta2 ( in pu t2 ); ret 2 = my . get Da ta2 (); System . out . println (" HP は " + ret 2 + " です 。 "); scanner . close (); } 
>> PHP の プログラミング で 掲示板 が 作れる くらい に は なっ た の です が 、 初心者 卒業 くらい の レベル だ と 思っ て も 良い の でしょ う か 。 いいんじゃない です か ね ？ サンプル 丸 写し で は なく ある程度 自力 で コード が 書ける の で あれ ば 身 に つい て いる 証拠 です ． >> 自分 が どの くらい の レベル に 居る の か が 良く 分かり ませ ん 。 その 人 によって PHP を 使う 方向性 も 全く 違っ たり する ので ， 単純 に 答え を 出す こと は でき ませ ん ． 例えば デザイン 寄り ， とくに Wordpress から PHP を 触っ た 人 は 「 ちょっと 高級 な テンプレートエンジン 」 だ と 思っ て いる かも しれ ませ ん し ， 汎用プログラミング言語 として 「 それ Ruby とか Python で やれ ば いい じゃん ？ 」 と 突っ込み たく なる よう な 変態 的 な 使い方 を する 人 だって い ます ． コード は ガリガリ かける けど セキュリティ なんて まんざら で も ない 人 も いれ ば ， セキュリティ に 気 を 配れる けど コード を 書く の が 遅い 人 も い ます ． 「 もう PHP は 極め た ！ 十分 ！ 」 とふ と 言い たく なっ て も ， PHP 言語 の 処理系 を C言語 から 作っ て いる えらい 人たち を 見る と 全く 力 が 及ん で い ない 気分 に なっ て 悲しく なっ たり も し ます ． 確か に 最初 の 駆け出し レベル で は 比較 する こと は できる ん です が ， ある 一定 の レベル を 超え て くる と 人 それぞれ 使い方 の 個性 が 発現 し ， PHP 言語 という 枠 の 中 で も 「 こっち は 得意 だ けど こっち は 苦手 … 」 という 分野 が 出 て き て 当然 な ので ， 一概 な 比較 は だんだん と し にくく なっ て き ます ． 
順番 に 書き ます ① カンマ で 区切ら れ た 数字 の 読み方 が 解ら ない ファイル に 書か れ た カンマ 区切り の データ を 配列 データ として 読み込む 方法 を ２つ 提示 し ます （ １ ） ファイル より １ 行 読み込ん で 、 改行 コード を 削除 し た 後 に ',' で 分割 する 方法 with open (' data ', ' r ') as f : __ data = f . readline (). rstrip (). split (',') print ( data ) （ ２ ） 標準 ライブラリ で ある csv パッケージ を 使用 する http:// docs . python .jp / 3 . 5 / library / csv . html import csv with open (' data ',' r ') as f : __ data = csv . reader ( f ) # py 3 の 場合 は list ( csv . reader ( f )) と する 必要 あり print ( data ) この 方法 の 場合 は 全て の 行 が 読み込ま れ ます ので 、 結果 は ２ 重 配列 にて 行 毎 の データ が 出力 さ れ ます ③（ 順番 が 前後 し ます が ） 読み込ん だ 値 を 文字列 から 整数 値 に 変える 方法 が 分から ない 文字 型 を 数値 型 に 変換 する に は 組み込み 関数 int () を 使用 し ます 。 http:// docs . python .jp / 3 . 5 / library / functions . html # int また 、 配列 の データ 全て に 上記 の int () を 適用 する に は 同じく 組み込み 関数 で ある map () を 使用 し ます 。 http:// docs . python .jp / 3 . 5 / library / functions . html # map ２つ を 合わせる と この よう に なり ます data = [' 25 ', ' 10 ', ' 5 '] data = map ( int , data ) # py 3 の 場合 は data = list ( map ( int , data )) print ( data ) ② 値 の 数字 の 数 に 寄ら ない 一般 化 の 仕方 が 分から ない 配列 データ に対して 累積 的 に 処理 を 行う に は reduce () を 使い ます 。 http:// docs . python .jp / 2 / library / functions . html # reduce http:// docs . python .jp / 3 / library / functools . html ( reduce は py 2 では 組み込み 関数 です が 、 py 3 では 標準 ライブラリ functools パッケージ に 移動 し て おり ます ) from functools import reduce # py 3 のみ これ が 必要 data = [ 25 , 10 , 5 ] res = reduce ( lambda a , b : ( a * b ) , data ) print ( res ) 上記 の ３つ を まとめる と 、 以下 の よう に なり ます from functools import reduce # py 3 のみ with open (" data ", " r ") as f : __ res = reduce ( lambda a , b : ( a * b ), map ( int , f . readline (). rstrip (). split (","))) print ( res ) 
３ 回 連続 、 という 条件 が よく 判り ませ ん 。 A 列 の 2 行 目 , 3 行 目 と 値 を 入力 し 、 4 行 目 が 入力 さ れ た 時点 で ユーザー フォーム を 開き たい の でしょ う か ？ その 場合 、 ユーザー フォーム を 閉じ た 後 で 5 行 目 を 入力 し た 時点 で 、 再び 「 3 , 4 , 5 行 目 に 連続 し て 入力 し た 」 と 見なし て ユーザー フォーム を 開く の でしょ う か ？ それとも 一旦 ユーザー フォーム を 開い たら 「 連続 」 の カウント を リセット する の でしょ う か ？ また A 2 , A3 , B 3 , C3 , A 4 という 順 に 入力 し た 場合 は 3回 連続 と 見なす の でしょ う か ？ 
一 例 です 。 対象 シート の シート タブ 上 で 右クリック → コード の 表示 → サンプル コード を 貼り 付け て お 試し ください 。 Private Sub Worksheet _ Change ( ByVal Target As Range ) Dim r As Range Set Target = Inter sect ( Target , Range (" A1 : A1 00 ")) If Target Is Nothing Then Exit Sub For Each r In Target If r = 5 Then MsgBox r . Address ( 0 , 0 ) & " に 【 ５ 】 が 入力 さ れ まし た ！" End If Next End Sub 
404 てこ と は ドキュメント ルート が おかしい です ね C :¥ xampp / htdocs / って こと でし た が index . html は そこ に 置い て あり まし た か ？ httpd . conf を 検索 し て 、 そいつ の 中 に document root って 設定 が あっ た と 思う ので 、 まず 探し て ください 
午前 の 内容 理解 し たら 過去問 を 解き まくる 。 1 も 同じ 方法 で いける 。 本番 は まず アルゴリズム と 言語 問題 、 1 を 解い て 2 ~ 7 の 問題 を ざっと 見 て 解け そう な の から やる 。 時間 が 余っ たら 全部 解い て 自信 の ある もの を 記入 する 。 ちなみに 私 は 今年度 前半 一 発 合格 し まし た 。 
ファイル 名なし だ と エラー が 出る はず な ので 、 そこ は 分かり ませ ん 。 とりあえず 次 の よう に し て 確認 し て み て ください 。 IFB ( CHKIMG (" ファイル 名 ")= TRUE ) THEN MSGBOX (" 見つかり まし た ") ELSE MSGBOX (" 見つかり ませ ん ") ENDIF これ で 、 見つかっ た か どう か は 確認 できる はず です 。 
ん ー と … まず 、 イベントハンドラ は head 内 の スクリプト で 設置 し て いる ので 、 on click 属性 は 必要 無い です よ ね 。 > data : { > // ここ に 何 か を 入れる > } ここ で 通信 先 に 送る データ を 指定 でき ます ので 、 data : { val : 2015 } この よう に key と value を 入れ て おけ ば 、 データ として 送ら れ ます 。 もし 、 例えば p 要素 が 複数 あっ て 、 click する p 要素 によって 送る データ を 変える の で あれ ば 、 < p data - val =" 2015 "> 2015 </ p > < p data - val =" 2016 "> 2016 </ p > < p data - val =" 2017 "> 2017 </ p > 例えば この よう に data -* 属性 を 使っ て 独自 の データ を 埋め込ん で おき 、 data : { val : $( this ). data (" val "); } 送る データ を click さ れ た p 要素 から 取り出す とか と か 。 
下 の よう に 書い て 実行 し て み て ください 。 printf (" aiueo "+ 2 ); ヒント です 。 
お はこん ばん に ち ゎ ＊＾－＾) o text - overflow が 効か ない 原因 は 、 テキスト が ブロック 幅 を 超え た とき に 自動 改行 さ れ て しまっ て いる ため に 、 ブロック の 右側 の 外 へ はみ出す こと が 出来 て い ない から です 。 「 wh it e-space : nowrap ;」 を 指定 し ましょ う 。 ただし 、 質問 の コード で # block 1 に 「 wh it e-space : nowrap 」 を 追加 し た ば あい 、 < p > の 中身 の テキスト は 右側 に 隠れ て ちゃんと 途切れ ます が 、 「 text - overflow 」 が 効い て いる 状態 で は あり ませ ん 。 単に 、 # block 1 の 「 overflow : hidden 」 で 隠れ て いる だけ です 。 「 text - overflow 」 は 、 適用 さ せ たい テキスト が 入っ て いる 直属 の ブロック に 指定 し ない と 効き ませ ん 。 今回 の 場合 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ ああああああああ ... 以下 続き ます ─ ─ ─ ─ ─ ─ ─ ─ ▲ に 「 text - overflow 」 を 適用 し たい ので 、 それ の 直属 の 親 ブロック は < p > です 。 な ので 、 < p > 要素 に 「 text - overflow 」 を 設定 し ない と いけ ませ ん ね ' d ( ・ ω ・ ＊ ▼ ─ ─ ─ ─ ─ ─ ─ ─ # block 1 p { width : 100% ; wh it e-space : nowrap ; overflow : hidden ; text - overflow : Ellipsis ; } ─ ─ ─ ─ ─ ─ ─ ─ ▲ 
有り がち な の は 、 ・ 必要 階層 数 だけ 再帰 呼出 で ループ 変数 を 複製 ・ 最初 から 必要 階層 数 だけ の ループ 変数 を 配列 持ち の 何れ か では 。 例 として 、 ２ 進数 ３ ( 複数 ) 桁 を ループ で 列挙 する コード を 挙げ て み ます 。 [ VBScript / VBA / VB . Net の 種別 が 不明 な ので VBScript で 記述 。 他は 高 機能 版 な ので 変換 可 ] '' http   :   // code pa d.o rg / n 0 aMREJ 8 # コード は 後述 # Main 01 で は 、 フツー に i , j , k の ３つ の ループ 変数 を 使っ て 三重 ループ を 組ん で い ます が 、 Main 02 で は 、 必要 回数 だけ 再帰 呼出 で ループ 変数   i   を ３つ 分   確保 し て 使っ て い ます 。 Main 03 で は 、 ループ 変数 配列 a (*) を 確保 し て a (*) を ループ 内 で カウントアップ 調整 し ます 。 正直 言え ば 再帰 型 は 書き 易く とも デバッグ 他 保守 が 面倒 に なり がち な ので 、 可能 なら 配列 型 で 書く こと を オススメ し ます 。 重複 ・ 非 重複 に 関わら ず 、 順列   列挙 で あれ ば 配列 型 で 多重 ループ を 駆使 せ ず に 記述 出来 ます 。 [ 別 言語コード から の 移植 版 で 少々 煩雑 です が ] '' http   :   // code pa d.o rg / wmhnNDt 3 # コード は 後述 # '' http   :   // code pa d.o rg / n 0 aMREJ 8 # ２ 進数 ３ 桁 を 列挙 # Option   Explicit Sub   Main 01   '' 直接 ３ 重 ループ ''    Dim   i ,   j ,   k ,   lc    For   i   =   0   To   1      For   j   =   0   To   1        For   k   =   0   To   1          lc   =   Array ( i ,   j ,   k )          WS cri pt. Echo ( Join ( lc ,   ","))        Next      Next    Next End   Sub Sub   Main 02 ( n ,   m ,   o )   '' 再帰 型 多重 ループ ''    Dim   i    If   n   <=   m   Then      WS cri pt. Echo ( Mid ( o ,   2 ))    Else      For   i   =   0   To   1        Call   Main 02 ( n ,   m   +   1 ,   o   &   ","   &   CStr ( i ))      Next    End   If End   Sub Sub   Main 03 ( n )   '' 非 再帰 型 多重 ループ ''    Dim   i ,   j ,   a ()    ReDim   a ( n   -   1 )    For   i   =   0   To   n   -   1      a ( i )   =   0    Next    i   =   0    Do   While   0   <=   i      WS cri pt. Echo ( Join ( a ,   ","))      i   =   n   -   1      Do   While   0   <=   i        a ( i )   =   a ( i )   +   1        If   2   <=   a ( i )   Then          a ( i )   =   0          i   =   i   -   1        Else          Exit   Do        End   If      Loop    Loop End   Sub Call   Main 01 WS cri pt. Echo ("--------") Call   Main 02 ( 3 ,   0 ,   "") WS cri pt. Echo ("--------") Call   Main 03 ( 3 ) '' http   :   // code pa d.o rg / wmhnNDt 3 #( 非 ) 重複順列 4 Π 2 , 4 Ｐ 2 を 列挙 # ' Option   Explicit Const   SS   =   1   '' 開始 番号 '' Sub   RP ( n ,   r )   '' 重複順列 n Π r ''    Dim   i ,   j ,   o ,   a ()    ReDim   a ( r   -   1 )    For   i   =   0   To   r   -   1      a ( i )   =   SS    Next    i   =   0    Do   While   0   <=   i      o   =   ""      For   j   =   0   To   r   -   1        If   0   <   j   Then   o   =   o   &   ",   "        o   =   o   &   CStr ( a ( j ))      Next      WS cri pt. Echo (o)      i   =   r   -   1      Do   While   0   <=   i        a ( i )   =   a ( i )   +   1        If   SS   +   n   <=   a ( i )   Then          a ( i )   =   SS          i   =   i   -   1        Else          Exit   Do        End   If      Loop    Loop End   Sub Sub   NP ( n ,   r )   '' 非 重複順列 nＰr ''    Dim   i ,   j ,   o ,   a ()    ReDim   a ( n   -   1 )    For   i   =   0   To   n   -   1      a ( i )   =   i   +   SS    Next    i   =   0    Do   While   0   <=   i      o   =   ""      For   j   =   0   To   r   -   1        If   0   <   j   Then   o   =   o   &   ",   "        o   =   o   &   CStr ( a ( j ))      Next      WS cri pt. Echo (o)      i   =   r   -   1      Do   While   0   <=   i   And   i   <   n        a ( i )   =   a ( i )   +   1        If   SS   +   n   <=   a ( i )   Then          i   =   i   -   1        Else          For   j   =   0   To   i   -   1            If   a ( i )   =   a ( j )   Then   Exit   For          Next          If   j   >=   i   Then            i   =   i   +   1            If   i   <   n   Then   a ( i )   =   SS   -   1          End   If        End   If      Loop    Loop End   Sub Call   RP ( 4 , 2 ) WS cri pt. Echo ("--------") Call   NP ( 4 , 2 ) 
> for ( var i = 1 ; i <= school . length ; i ++) { > $('# gakkou '). append ('< option value ="' + i + '">' + d ata [ school [ i ]]+ '</ option >'); > } オブジェクト を 走査 する とき は for ... in を 使っ て ください 。 配列 と 違い 、 length を 得 られ ない から です 。 jQuery に は $. each が ある ので 、 これ を 使っ て も 構い ませ ん 。 $. each ( data [ school ], function ( i , v ) { $('# gakkou '). append ('< option value ="' + i + '">' + v + '</ option >'); }); とか 、 for ( var i in data [ school ]) { $('# gakkou '). append ('< option value ="' + i + '">' + d ata [ school ][ i ] + '</ option >'); } こんな ん で いかが でしょ う か 。 
こちら の 「 順序 論理回路 」 が 参考 に なる の で は 。 https :// www . yonago - k. ac.jp / denki / lab / nitta / lecture / E3 _ digital / note /... ( R , S ) が 逆 に なっ て い ます が ( 0 , 0 )→ 不変 ( 1 . 0 )→ Reset ( 0 , 1 )→ Set と する と ( 0 , 0 ) では 不変 で ( 1 , 0 ) ( 1 . o ) で Reset で ( 0 , 1 ) ( 0 , 0 ) で 不変 な ので ( 0 , 1 ) では ？ 
問 19 が 見つかり ませ ん 。 もし 、 Ⅳ - 19 の デジタルカメラ の 問題 だ と する と 、 これ は 物理 で も 情報 で も なく 、 中学 数学 の 応用 問題 です 。 下図 において 、 A , B の 赤線 は 画像 、 赤字 の C は 自動車 の 像 、 D は 山 の 像 、 E は 電柱 の 像 です 。 DC ： DE ＝ 20 ： 40 、 OE ＝ 4m の 時 、 OC を 求める 問題 です 。 補助 線 として 青線 を 描け ば 、 計算 する まで も なく OC ＝ 2 ･ OE ＝ 2×4 ＝ 8m で ある 事 は 一目瞭然 です 。 
こんにちは < form > で 囲む と < form > の ネーム と < select > や < input > の ネーム を 組み合わせ て value を 取得 し ます 。 取得 した値 と セレクト ボックス で 選択 した値 を if 文 や スイッチ 文 など で 比較 し ます 。 比較 し て 合っ て いれ ば インプット ボックス の 値 を 代入 し ます 。 <! DOCTYPE html > < html > < head > < title > select name =" omosa "</ title > </ head > < body > < form name =" selbox "> < select name =" omosa " on change =" ch ()"> < option label =" 選択 し て ください " value =""> 選択 し て ください </ option > < option label =" 10kg 以下 " value =" 103 "> 10kg 以下 </ option > < option label =" 25kg 以下 " value =" 102 "> 25kg 以下 </ option > < option label =" 50kg 以下 " value =" 101 "> 50kg 以下 </ option > < option label =" 75kg 以下 " value =" 100 "> 75kg 以下 </ option > < option label =" 100kg 以下 " value =" 99 "> 100kg 以下 </ option > < option label =" 125kg 以下 " value =" 98 "> 125kg 以下 </ option > < option label =" 150kg 以下 " value =" 97 "> 150kg 以下 </ option > < option label =" 175kg 以下 " value =" 96 "> 175kg 以下 </ option > < option label =" 200kg 以下 " value =" 95 "> 200kg 以下 </ option > < option label =" 225kg 以下 " value =" 94 "> 225kg 以下 </ option > < option label =" 250kg 以下 " value =" 93 "> 250kg 以下 </ option > < option label =" 275kg 以下 " value =" 92 "> 275kg 以下 </ option > < option label =" 300kg 以下 " value =" 91 "> 300kg 以下 </ option > </ select > < p > この セレクト 内容 で 91 を 選択 し た とき は </ p > < p > この セレクト 内容 で 92 を 選択 し た とき は </ p > < input type =" hidden " name =" product _ id " value =""> < input type =" hidden " name =" category _ id 1 " value =""> </ form > < script type =" text / javascript "> function ch () { // セレクト ボックス の 値 を 取得 var sentaku = document .s elbox . omosa . value ; // 比較 し て input type =" hidden " に 値 を 代入 switch ( sentaku ) { case " 91 ": document .s elbox . product _ id . value = " 27 /"; document .s elbox . category _ id 1 . value = " 102 "; break ; case " 92 ": document .s elbox . product _ id . value = " 26 /"; document .s elbox . category _ id 1 . value = " 103 "; } // alert で input の value を 確認 alert ( document .s elbox . product _ id . value ); alert ( document .s elbox . category _ id 1 . value ); } </ script > </ body > </ html > 
下記 の サイト は いかが でしょ う か ？ http:// www . excel - excel . com / vbachair / step 1 - 7 . html その ほか 「 vba デバッグ 」 で ググる と 様々 な サイト が ヒット し ます ので 、 ご 自分 で 判り やすい サイト を 探し て み て 下さい 。 
＞ 簡単 に 早く 高度 な プログラム を そんな こと でき たら 誰 でも 敏腕 エンジニア に なっ ちゃ い ます 実力 ある 人たち は きちんと 基礎 から 勉強 し てる と 思い ます よ 。 
それぞれ の 単語 で 検索 し て ヒット する 件数 を 比較 し ましょ う 。 世の中 で どの 表記 が 多く 使わ れ て いる か 分かり ます 。 それ に 合わせれ ば 良い の です 。 もう 一つ は アドワーズ の キーワードアドバイスツール で 検索ボリューム を 調べる 方法 も あり ます 。 
sample [ 1 ]. append ( hoge ) 
LcdLib . h , LcdLib . c を 流用 し て いる と 思わ れ ます が ANSEL = 0 ; // digital I/O mode が 無い 為 、 R B7 , RB 6 が アナログ モード の まま です 初期 設定 に 追加 し て み て 下さい また main の 最後 に while ( 1 ); // STOP が 無い と リセット が かかり 、 再度 main から 始まり ます 。 
Sub sample () With Range (" B 1 ") . Copy . End ( xlDown ). Offset ( 1 ). PasteSpecial xlPasteValues End With End Sub 
問題 文 を （ 原文 で ） 示し て み て 下さい 。 「 大域 変数 num に は 配列 t に 設定 さ れ て いる 要素 数 が 格納 さ れ て いる 。 」 だ と 普通 、 要素 の 数 の 事 だ と 思う の です が ？ 
PHP で フォーム を 受け取る 場合 は filter _ input 関数 、 filter _ input _ array 関数 を 使い ます 。 クロスサイトリクエストフォージェリ を 防ぐ ため に 以下 の よう な クラス を 作っ て おき ます 。 <? php class CSRFValidate { public static function generate () { if ( ses si on_ status () === PHP _ SESSION _ NONE ) { throw new \ BadMethodCallException (' Session is not active .'); } return bin 2 hex ( openssl _ random _ pseudo _ bytes ( 16 )); } public static function validate ($ token , $ throw = false ){ $ success = self :: generate () === $ token ; if (!$ success && $ throw ){ throw new \ RuntimeException (' CSRF validation failed .', 400 ); } return $ success ; } } < input type =" hidden " name =" token " value ="<?= CSRFValidate :: generate (); ?>"> これ を チェック する 場合 は if (! CsrfValidator :: validate ( filter _ input ( INPUT _ POST , ' token '))) { header (' Content - Type : text / plain ; charset = UTF-8 ', true , 400 ); die (' CSRF validation failed .'); } ses si on_ status () を 使っ て いる ので ses si on_ start () を 他 の ファイル から 呼び出す 必要 が あり ます 。 
エラーメッセージ は 何 です か ？ 
エラー が 出る の を 「 恒久 的 に 」 防ぐ 事 は おそらく 出来 ない と 思い ます 。 「 いいえ 」 ボタン を 押しまくっ て 無視 し て 下さい 。 ソフト 自体 の 動作 に は 影響 し ませ ん 。 【 エラー が 出る 原因 】 じつは 「 苦 C 」 タブ の ヘルプ ページ の 中 に 「 広告 」 が 表示 さ れる よう に なっ て いる の です が 、 ソフト 自体 が 古い ので 広告 の 中 で 使用 さ れ て いる スクリプト に 対応 でき ず エラー が 発生 し て いる よう です 。 つまり 、 【 広告 の 表示 に 失敗 し て エラー が 出 て いる 】 よう です 。 【 一時的 に エラー が 出る の を 防ぐ 方法 】 PC を インターネット から 切断 し た 状態 で ソフト を 使用 し て 下さい 。 そう し ます と 、 広告 の スクリプト を 読み込め ない ので エラー が 出 なく なり ます 。 (^_^; 
少なくとも パス と は path で ファイル パス の こと です よ ね ？ ( 画像 の アンカー ポイント 間 の こと で は あり ませ ん よ ね ？) しかし 「 画像 パス を for 文 で 回す 」 と は ？？？ 具体 的 に 何 を どう し たい の か が わかり ませ ん 。 。 。 何 を どう し たいのかわ から ない ので スイカ割り の よう に やたらめったら と ， 思いつい た コード 例 を 書い て み ます 。 === === === === === === 【 例 １ 】 for 文 で 変数 を 回し て < img > エレメント を 書き込み < html > < head > < title > Sample 1 </ title > </ head > < body > < script type =" text / javascript "> for ( var i = 1 ; i <= 15 ; i ++){      document . write ('< img src ="' + i + '. jpg ">'); } </ script > </ body > </ html > === === === === === === 【 例 ２ 】 for 文 で 変数 を 回し て < img > エレメント を 作成 ＆ 配置 < html > < head > < title > Sample 2 </ title > < script type =" text / javascript "> window . onload = function (){      for ( var i = 1 ; i <= 15 ; i ++){          var pic = document . createElement (" img ");          pic .s etAttribute (" src ", i + ". jpg ");          document . body . appendChild ( pic );      } }; </ script > </ head > < body > </ body > </ html > === === === === === === 【 例 ３ 】 最初 の 画像 を 最後 に 回す ( ローテーション ) < html > < head > < title > Sample 3 </ title > < script type =" text / javascript "> var pics = new Array (); window . onload = function (){      for ( var i = 0 ; i <= 14 ; i ++){          pics . push ( document . getElementsByTagName (" img ")[ i ]. src );      }      pics . push ( pics .s hift ());      for ( var i = 0 ; i <= 14 ; i ++){          document . getElementsByTagName (" img ")[ i ]. src = pics [ i ];      } }; </ script > </ head > < body > < img src =" 1 .jpg "> < img src =" 2 .jpg "> < img src =" 3 .jpg "> < img src =" 4 .jpg "> < img src =" 5 .jpg "> < img src =" 6 .jpg "> < img src =" 7 .jpg "> < img src =" 8 .jpg "> < img src =" 9. jpg "> < img src =" 10 .jpg "> < img src =" 11 .jpg "> < img src =" 12 .jpg "> < img src =" 13 .jpg "> < img src =" 14 .jpg "> < img src =" 15 .jpg "> </ body > </ html > === === === === === === 【 例 ４ 】 最後 の 画像 を 最初 に 回す ( ローテーション ) < html > < head > < title > Sample 4 </ title > < script type =" text / javascript "> var pics = new Array (); window . onload = function (){      for ( var i = 0 ; i <= 14 ; i ++){          pics . push ( document . getElementsByTagName (" img ")[ i ]. src );      }      pics . unshift ( pics . pop ());      for ( var i = 0 ; i <= 14 ; i ++){          document . getElementsByTagName (" img ")[ i ]. src = pics [ i ];      } }; </ script > </ head > < body > < img src =" 1 .jpg "> < img src =" 2 .jpg "> < img src =" 3 .jpg "> < img src =" 4 .jpg "> < img src =" 5 .jpg "> < img src =" 6 .jpg "> < img src =" 7 .jpg "> < img src =" 8 .jpg "> < img src =" 9. jpg "> < img src =" 10 .jpg "> < img src =" 11 .jpg "> < img src =" 12 .jpg "> < img src =" 13 .jpg "> < img src =" 14 .jpg "> < img src =" 15 .jpg "> </ body > </ html > === === === === === === 【 例 ５ 】 最後 の 画像 を 最初 に 連続 で 回す ( 連続 ローテーション ) < html > < head > < title > Sample 5 </ title > < script type =" text / javascript "> var intId ; var pics = new Array (); function rotareSrc (){      pics . unshift ( pics . pop ());      for ( var i = 0 ; i <= 14 ; i ++){          document . getElementsByTagName (" img ")[ i ]. src = pics [ i ];      } } window . onload = function (){      for ( var i = 0 ; i <= 14 ; i ++){          pics . push ( document . getElementsByTagName (" img ")[ i ]. src );      }      intId = setInterval (" rotareSrc ()", 1000 ); }; </ script > </ head > < body > < img src =" 1 .jpg "> < img src =" 2 .jpg "> < img src =" 3 .jpg "> < img src =" 4 .jpg "> < img src =" 5 .jpg "> < img src =" 6 .jpg "> < img src =" 7 .jpg "> < img src =" 8 .jpg "> < img src =" 9. jpg "> < img src =" 10 .jpg "> < img src =" 11 .jpg "> < img src =" 12 .jpg "> < img src =" 13 .jpg "> < img src =" 14 .jpg "> < img src =" 15 .jpg "> </ body > </ html > 
InputBox MsgBox If ～ Then ～ ElseIf ～ Then ～ Else ～ End If 辺り 習っ て いる 筈 で 、 VBA が 分かっ て いれ ば 出来る 。 習っ て い て 二 十 歳 近く な のに 出来 ない なら 、 もう 根本 的 に 不可 認定 さ れる べき か と 。 
addMemo で は 、 Data [] の 末尾 に 追加 し ます から 、 Data [] 末尾 の インデックス 「 19 」 が Memo [] に 格納 さ れ ます 。 Data [] の 末尾 は 、 Data [] 内 の 要素 の 個数 と 一致 し ます から 、 DataLen が 答え です 。 
> vvkv 65885 さん 2016 / 8 / 623 : 15 : 55 > submit の ボタン を 押し た とき の 処理 と 画面 を ポップアップ ウインドウ で やっ て 、 その あと その 画面 を 自動 で 閉じる よう に は でき ます か ？ 出来 ます よ 。 
> 分かり やすく 説明 も し て いただける と より 助かり ます 。 判り やすく 説明 する に は 習っ た こと を 開示 する 必要 が あり ます 。 まずは 、 そこ から 始め て み て ください 。 
アルゴリズム の 基本 が 分かっ て い て 、 他 の 言語 を 知っ て いる 状態 なら ば 、 ネット で 調べれ ば 十分 かも しれ ませ ん 。 命令 の 置き換 えと 、 VBA に 特 化 し た 命令 を 調べる だけ で 済み ます から 。 しかし 、 何 も 下地 が ない 状態 で は 、 かえって 混乱 を 招き かね ませ ん 。 せっかく 教本 が ある の です から 、 まずは 全部 読ん で 、 試し て みる の が 良い と 思い ます 。 その後 で 、 扱い 慣れ た と 思っ たら 、 自分 で 適当 な 例題 を 定め て 作っ て み て ください 。 そこ まで 来れ ば 、 効率 良く ネット で 調べ られる と 思い ます 。 例題 です が 、 知恵袋 で 回答 を 試みる の も 一案 です よ 。 
> oshieteyo 649 さん 2016 / 8 / 613 : 20 : 03 > Movable Type Pro version 4 . 27 - ja で 行間 を 狭く する 方法 を 教え て ください 。 これ だけ しか 開示 でき ない 場合 は 、 フォント サイズ を 小さく する 事 くらい だ と 思い ます 。 
囲碁 は 終盤 ( 終局 ) にかけて 序盤 戦 より 変化 が 狭まっ て き ます な ので 質問 に ある よう に ソフト や ハード が 発達 すれ ば 水源 から 何処 へ 水 が 流れ て いく の か 後 を 追える かも しれ ませ ん が 将棋 で 逆算 と は 海 から 水源 を 探す よう な もの で 正しい もの を 追える と は 思え ませ ん 
表示 し ない の で は なく 、 更新 し ない の です 。 つまり 値 の 変更 が あっ て も ノー ケア です 。 何 か の 理由 で 変に なっ て も そのまま です 。 タイトルバー は おそらく 手 は ない と 思い ます 。 
お はこん ばん に ち ゎ o (＾－＾＊ ■ ■ ■ リアルタイム で 監視 ■ ■ ■ 監視 し たい 変数 が 、 どういう 使わ れ 方 を し て いる の に より ます が 、 大抵 の 場合 は 、 その 変数 が 変更 さ れる コード が 書か れ て いる 位置 で 監視 でき ます 。 まず 、 変数 の 値 を 表示 する ため の ブロック を 、 HTML で 適当 な 位置 に 用意 し ます 。 style 属性 で 「 position : fixed 」 を 使え ば 、 変数 の 表示 を 左上 に 固定 でき ます 。 / ─ ─ ─ ─ ─ ─ ─ ─ < div id =" variable _ view " style =" position : fixed ; left : 0 px ; top : 0 px ; z - index : 9999 ;" ></ div > ─ ─ ─ ─ ─ ─ ─ ─ / あと は 、 Java script の コード で 、 変数 が 変更 さ れる コード が 書か れ た 場所 で 、 / ─ ─ ─ ─ ─ ─ ─ ─ document . getElementById (" varialbe _ view "). innerHTML = 変数 ; ─ ─ ─ ─ ─ ─ ─ ─ / これ で 、 リアルタイム で 変数 の 変化 が 監視 でき ます 。 ■ ■ ■ 確認 し たい とき だけ 監視 ■ ■ ■ リアルタイム で 監視 する 必要 が ない の で あれ ば 、 Google Chrome や FireFox の 開発者 ツール で も 、 変数 の 値 を 確認 でき ます 。 Google Chrome で あれ ば 、 [ F1 2 ] キー で 開発者 ツール を 開い た あと 、 いちばん 上 の メニュー で 「 source 」 の タブ を 開け ば 、 「 Watch 」 っていう 欄 が 見つかる ので 、 その 「 Watch 」 の タブ を 開き ます 。 そこ に は 、 ページ で 使わ れ て いる 変数 の 一覧 が 、 階層 ツリー 状 に 表示 さ れ て いる ので 、 監視 し たい 変数 を 探し ましょ う 。 監視 し たい 変数 が そこ に ない 場合 は 、 「 Watch 」 欄 の 上側 に ある 「+（ add expression ） 」 の ボタン から 、 監視 し たい 変数 を 追加 し ましょ う 。 「 Watch 」 欄 に 表示 さ れ て いる 変数 は 、 リアルタイム で 値 の 更新 は さ れ ませ ん 。 欄 の 上側 に ある 更新 ボタン を 押し た とき だけ 、 その 表示 値 が 更新 さ れ ます 。 
お はこん ばん に ち ゎ （＾－＾＊ それ は fluff _ loves さん の PC の バグ じゃ ない です 。 あと 、 Chrome 以外 でも 、 bo x1 の CSS しか 適用 さ れ ませ ん 。 ■ ■ ■ 原因 ■ ■ ■ CSS コード 内 の <!-- ------- --> の 位置 で エラー が 起き て いる ので 、 その あと の CSS が 無視 さ れ て しまっ て い ます 。 その ため 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ . box 2 { width : 100 px ; height : 100 px ; background-color :# dddddd ; } ─ ─ ─ ─ ─ ─ ─ ─ ▲ が 適用 さ れ て い ない の です ' d ( ・ ω ・ ＊ ■ ■ ■ コメントアウト の 挙動 ■ ■ ■ まず 、 <!-- --> は HTML の コメントアウト として 使わ れる コード です 。 CSS の コード 内 で は 、 基本的 に は 使え ませ ん 。 ▼ ─ ─ ─ ─ ─ ─ ─ ─ < style type =" text / css "> <!-- . bo x1 { width : 100 px ; height : 100 px ; background-color :# cccccc ; } . box 2 { width : 100 px ; height : 100 px ; background-color :# dddddd ; } --> </ style > ─ ─ ─ ─ ─ ─ ─ ─ ▲ の よう に 記述 し た 場合 、 CSS に 対応 し て い ない ブラウザ で 閲覧 し た 場合 は 、 CSS が 機能 し ない が ため に 、 <!-- ～ --> の 範囲 は HTML の コメントアウト として 扱わ れ 、 CSS の コード 部分 ～ が ページ に そのまま 表示 さ れる の を 防い で くれ ます 。 いっぽう 、 CSS が ちゃんと 機能 する ブラウザ で 閲覧 し た 場合 は 、 < style >～</ style > の 範囲 は CSS の コード として 扱わ れる ので 、 HTML の コード で ある <!-- と --> は 無視 さ れ ます 。 では 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ < style type =" text / css "> <!-- . bo x1 { width : 100 px ; height : 100 px ; background-color :# cccccc ; } <!-- - - ------------------------- --> . box 2 { width : 100 px ; height : 100 px ; background-color :# dddddd ; } --> </ style > ─ ─ ─ ─ ─ ─ ─ ─ ▲ って 書い た 場合 は どうでしょう 。 まず 、 CSS に 対応 し て い ない ブラウザ で み た 場合 は 、 HTML の コメントアウト <!-- --> の中 に さらに <!-- ------ --> が 入っ て 入れ子 に なっ て いる ので 、 この 部分 は 文法 と なり 、 正しい 表示 が さ れ ませ ん 。 コメントアウト <!-- --> は 入れ子 に でき ませ ん 。 いっぽう 、 CSS に 対応 し て いる ブラウザ で は 、 < style >～</ style > の中 は CSS コード として 扱わ れる ので 、 <!-- と --> は すべて 無視 さ れ ます 。 その 結果 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ . bo x1 { width : 100 px ; height : 100 px ; background-color :# cccccc ; } - - ------------------------- . box 2 { width : 100 px ; height : 100 px ; background-color :# dddddd ; } ─ ─ ─ ─ ─ ─ ─ ─ ▲ っていう コード が CSS として 読み込ま れ ます 。 CSS の コード 内 で 裸 の 「 -」 は 使え ない ので 、 ---------- の 部分 で エラー に なり ます 。 その ため 、 それ 以降 の CSS コード は 処理 さ れ ず 、 適用 さ れ ませ ん 。 つまり 、 CSS に 対応 し て いる ブラウザ で 、 . box 2 の CSS が 適用 さ れ ない の は すべて 、 CSS コード 内 の ---------- が 原因 です ＊ ・ ω ・ ) b ' な ので 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ < style type =" text / css "> <!-- . bo x1 { width : 100 px ; height : 100 px ; background-color :# cccccc ; } <!-- --> . box 2 { width : 100 px ; height : 100 px ; background-color :# dddddd ; } --> </ style > ─ ─ ─ ─ ─ ─ ─ ─ ▲ って 記述 すれ ば 、 CSS 対応 の ブラウザ で は エラー に は なり ませ ん が 、 CSS 非 対応 ブラウザ で は 、 やはり <!-- --> が 入れ子 に なっ て いる ので ダメ です 。 っていう か 、 いま は 「 CSS 非 対応 の ブラウザ 」 なんて 存在 し ない ので 、 CSS の コード 内 の <!-- --> は 必要 あり ませ ん 。 <!-- --> を 記述 する の は やめ て 、 ▼ ─ ─ ─ ─ ─ ─ ─ ─ < style type =" text / css "> . bo x1 { width : 100 px ; height : 100 px ; background-color :# cccccc ; } . box 2 { width : 100 px ; height : 100 px ; background-color :# dddddd ; } </ style > ─ ─ ─ ─ ─ ─ ─ ─ ▲ っていう ふう に し ましょ う 。 . bo x1 と . box 2 の 間 に どうしても ---------- を 入れ たい なら 、 CSS 用 の コメントアウト /* */ で 囲っ て 記述 する と イイ です 。 ▼ ─ ─ ─ ─ ─ ─ ─ ─ < style type =" text / css "> . bo x1 { width : 100 px ; height : 100 px ; background-color :# cccccc ; } / * - - - - -----------------------*/ . box 2 { width : 100 px ; height : 100 px ; background-color :# dddddd ; } </ style > ─ ─ ─ ─ ─ ─ ─ ─ ▲ 
1 . 23 という 数 は 二 進数 で は 割り切れ ない 数 で 循環小数 に なる 。 それ を 単精度 の 有限 桁 で 切る ので 、 どうしても 誤差 が 出る 。 それ が 最後 に ２ が 付く 理由 で ある 。 2 / 3 という 数 を 十進法 で 書く と 、 0 . 6666 .... と なる が 有限 桁 で 切っ て 四捨五入 すれ ば 0 . 6666667 と なる よう な もの で ある 。 IEEE 754 で 検索 すれ ば 分かる が 、 単精度 実数 の 場合 、 符号 に １ ビット 、 指数 部 に ８ ビット 、 仮数 部 に 23 ビット 割り当て て いる 。 1 . 23 の 場合 、 指数 部 による シフト は 無く 、 1 . 0 は 暗黙 の 内 に 勘定 さ れ て いる ので 、 23 ビット で 0 . 23 を 表す こと に なる 。 23 ビット は 、 先頭 から 十 進 表記 で 0 . 5 , 0 . 25 , 0 . 125 , 0 . 0625 , 0 . 03125 , 0 . 015625 .... という 数 を 表わし て いる ので 、 今 の 場合 0 , 0 , 1 , 1 , 1 , 0 .... という 表記 に なる 。 24 ビット 目 で 丸め 処理 を 行っ て いる が 、 丸め の ルール は 複雑 で ある 。 1 . 23000002 1 . 2300000190734863 0 01111111 00111010111000010100100 0 01111111111 0 0 1 1 1 0 1 0 1 1 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0000000000000000000000000 0 0 1 1 1 0 1 0 1 1 1 0 0 0 0 1 0 1 0 0 1 0 0 1 0 . 500000000 0 . 00000000 E + 00 0 . 00000000 E + 00 2 0 . 250000000 0 . 00000000 E + 00 0 . 00000000 E + 00 3 0 . 125000000 0 . 125000000 0 . 125000000 4 6 . 25000000 E - 02 6 . 25000000 E - 02 0 . 187500000 5 3 . 12500000 E - 02 3 . 12500000 E - 02 0 . 218750000 6 1 . 56250000 E - 02 0 . 00000000 E + 00 0 . 218750000 7 7 . 81250000 E - 03 7 . 81250000 E - 03 0 . 226562500 8 3 . 90625000 E - 03 0 . 00000000 E + 00 0 . 226562500 9 1 . 95312500 E - 03 1 . 95312500 E - 03 0 . 228515625 10 9. 76562500 E - 04 9. 76562500 E - 04 0 . 229492188 11 4 . 88281250 E - 04 4 . 88281250 E - 04 0 . 229980469 12 2 . 44140625 E - 04 0 . 00000000 E + 00 0 . 229980469 13 1 . 22070312 E - 04 0 . 00000000 E + 00 0 . 229980469 14 6 . 10351562 E - 05 0 . 00000000 E + 00 0 . 229980469 15 3 . 05175781 E - 05 0 . 00000000 E + 00 0 . 229980469 16 1 . 52587891 E - 05 1 . 52587891 E - 05 0 . 229995728 17 7 . 62939453 E - 06 0 . 00000000 E + 00 0 . 229995728 18 3 . 81469727 E - 06 3 . 81469727 E - 06 0 . 229999542 19 1 . 90734863 E - 06 0 . 00000000 E + 00 0 . 229999542 20 9. 53674316 E - 07 0 . 00000000 E + 00 0 . 229999542 21 4 . 76837158 E - 07 4 . 76837158 E - 07 0 . 230000019 22 2 . 38418579 E - 07 0 . 00000000 E + 00 0 . 230000019 23 1 . 19209290 E - 07 0 . 00000000 E + 00 0 . 230000019 参考 プログラム program hello implicit none real :: a , f , g real ( kind ( 0 . 0 d0 )):: d character ( len = 80 ):: text 1 , tex t2 integer :: i , m ( 23 ) a = 1 . 23 d = a Print *, a , d write ( text 1 , '( b 32 . 32 )') transfer ( a , 0 _ 4 ) write ( tex t2 , '( b6 4 . 64 )') transfer ( d , 0 _ 8 ) print '( a , 1 x , a , 4 x , a )', text 1 ( 1 : 1 ), text 1 ( 2 : 9 ), text 1 ( 10 :) print '( a , 1 x , a , 1 x , a )', tex t2 ( 1 : 1 ), tex t2 ( 2 : 12 ), tex t2 ( 13 :) ! read ( text 1 ( 10 :), '( 23 i 1 )') m print '( 23 i 2 )', m f = 0 . 0 g = 1 . 0 do i = 1 , 23 g = g / 2.0 f = f + g * m ( i ) print *, i , g , g * m ( i ), f end do end program Hello 
