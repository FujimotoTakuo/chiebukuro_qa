おはようございます。 難しいですね。
PostgreSQLの環境がないのでうまく動くか分かりませんが、Oracleだと select datetime, cnt,sum(cnt) over( partition by to_char(datetime,'yyyymmdd') order by datetime) total from test; でできそうです。PostgreSQLのto_char関数の仕様はOracleと共通性あったと思うので、とりあえず試してみてください。 ウインドウ関数のover句内で関数の使用ができるかも、もしかするとネックになるかもしれません。その時はいったんインラインビューにして select datetime, cnt,sum(cnt) over( partition by c order by datetime) total from ( select datetime, cnt, to_char(datetime,'yyyymmdd') c from test ) T; のようにすれば回避できるかもしれません。
こんばんわ。 いいとおもいます。
適当だが、 select c.questionid, count( (case when ower(a.studentanswer) = c.correctanswer then 1 else 0 end)*(case when a.questionid = c.questionid then 1 else 0 end)*(case when a.studentid = b.studentid then 1 else 0 end) )/count( (case when a.questionid = c.questionid then 1 else 0 end)*(case when a.studentid = b.studentid then 1 else 0 end) ) from studentanswer a, student b, question c group by c.questionid order by c.questionid; で、いいんじゃないの？ もっとスマートなのがあったら、誰か答えてあげて。
select (select count(a.questionid) from studentanswer a, student b, question c where a.subjectid = 4 and lower(a.studentanswer) = c.correctanswer and a.questionid = c.questionid and a.studentid = b.studentid and a.subjectid = c.subjectid group by c.questionid, a.questionid order by a.questionid) * 100 / (select count(a.questionid) from studentanswer a, question b where a.questionid = b.questionid and a.subjectid = 4 group by a.questionid); なんて、groupbyによる複数結果/groupbyによる複数結果なSQL、どんなDBでも通るはずがないでしょう。提示されているサンプルでも複数行なんだからquestionidが1つしかないはずがないし、たとえ１つしかなくたって実行計画段階で弾かれます。初学者だってわかる、SQLの基礎の基礎の話です。 出したいのはquestionidごとの正答率ですか？全体正答率ですか？ それによってSQLが異なります。 文意からquestionidごとを求めたいと思われますので、それなら select allview.questionid,okanswer/allanswer*100.0 from (select a.questionid,count(*) okanswer from studentanswer a, student b, question c where a.subjectid = 4 and lower(a.studentanswer) = c.correctanswer and a.questionid = c.questionid and a.studentid = b.studentid and a.subjectid = c.subjectid group by a.questionid) okview, (select a.quesitonid,count(*) allanswer from studentanswer a, question b where a.questionid = b.questionid and a.subjectid = 4 group by a.questionid ) allview where allanswer.questionid=allview.questionid order by allview.questionid のようなSQLになります。 一応questionid出してますけど、邪魔ならselect句を select okanswer/allanswer*100.0 としてください。
こんにちは。 難しいと思います。
>sixty_1581さん2016/7/3015:52:47 >国会議員の給料は年収2200万円ほどですが、妥当な年収はいくらだと思いますか？ 220万
>>大文字で入力している生徒の解答と正答をイコールで結ぶことができません。 lower(a.studentanswer) = lower(c.correctanswer) でいいじゃない。
こんにちは。 しっかり しています。
おはようございます。 よくできています。
こんにちは。 最高でございます。
こんにちは。 そのとおりだと おもいます。
こんにちは。 難しいと思います。
おはようございます。 重要でございます。
PostgreSQL 流の解決方法を教えます。 Text でソートすると、文字ソートになるので、その順番になります。 でも、PostgreSQL には、指定したフォーマットで数値に直す関数 to_number(文字列,フォーマット) があります。 この場合も、簡単に select 住所 from アドレステーブル order by TO_NUMBER (住所,'9999丁目'); なんて書けます。 9 の数は、最大桁数を表します。
こんにちは。 いいものだとおもいます。
こんにちは。 難しいと思います。
おはようございます。 いいとおもいます。
こんにちは。 難しいと思います。
おはようございます。 そのとおりでございます。
こんにちは。 いいとおもいます。
こんにちは。 いいものでございます。
こんにちは。 優秀でございます。
こんにちは。 そうでございます。
好きであれば中学生でも大丈夫です。 好きこそものの上手なれと言いますよね。
カテゴリの人気ですか？ 一般的にはPostgreSQLのノウハウは必要です。
おはようございます。 いいかんじです。
>hahahaha_0714さん2016/7/1421:02:18 >グーグルアラート助けてください 同じような質問を過去に見かけた事が有るので、過去ログを検索してみてください。
ちょっとやったことがないけど、恐らく 検索対象カラム like 取得した名称 || '%' でできるかと。
おはようございます。 むずかしいと おもいます。
rankとか使ってやる方法もありますが、わかりやすいＳＱＬなら、 「最新のものを含めてデータを取得するＳＱＬ」から「最新のものを取るＳＱＬ」を引いてやればいいでしょう。 まずは、groupの中で最新のものを取得するＳＱＬを考えます。 これは SELECT a.group,max(b.timestamp) maxtime FROM table_a a inner join teble_b b on a.table_b_id=b.id GROUP by a.group; この結果は A 22222 B 33333 となります。 この組み合わせだった場合は取得しないという条件になります。 次に、table_bから、最大のものだけを取得するSQL。 これは相関サブクエリーを使って SELECT id FROM table_b b where (group,timestamp) in(select group,max(timestamp) from table_b group by group) とでもすればいいでしょう。 結果は 2 4 となります。 ここにnot exists命令で先ほどのＳＱＬを除去します。 SELECT id FROM table_b b where (group,timestamp) in(select group,max(timestamp) from table_b group by group) and not exists( select null from ( SELECT a.group,max(b.timestamp) maxtime FROM table_a a inner join teble_b b on a.table_b_id=b.id GROUP by a.group ) x where x.group=b.group and x.maxtime=b.timestamp ) これで 4 という結果になります。 互換性などを考えて標準的なSQLだけで組んでいますが、postgresの場合はwindow関数のrankを使うと、もっと簡単に書けます。 詳しくはwindow関数のリファレンスをどうぞ。
>postgresql_hennさん2016/6/2923:03:17 >postgresqlの長所と短所を教えてください。 短所=覚えなくてはいけない。
おはようございます。 おもしろいと おもいます。
テーブル名の取得はpg_classあたりで取れます。 ※indexなども取れてしまうので、where句の工夫が必要。このへんはwebで情報を集められます。 ファンクション/プロシージャはplpgsqlが標準ですが、プラグインで色々な言語をプロシージャとして使用できるのがpostgresの特徴の一つです。 無理にplpgsqlを使わなくても、自分の得意な言語があるなら、その言語のプラグインでプロシージャを書くとよいでしょう。 現状の使用可能言語一覧はこちら。 https://www.postgresql.jp/document/9.5/html/external-pl.html
こんにちは。 すばらしいです。
おはようございます。 いいとおもいます。
おはようございます。 たいせつです。
こんにちは。 いいものでございます。
こんにちは。タロットで占いました 復縁の可能性 残念ですが復縁の可能性は低いです 復縁したとしても、パワーバランスが崩れた関係であなたにとっては幸せな関係ではないです。 以上です
こんにちは。 そのとおりで ございます。
こんにちは。 すばらしいで ございます。
こんばんわ。 いい感じだと 思います。
こんばんわ。 すばらしいとおもいます。
こんばんわ。 いいものでございます。
システムの規模、サーバの性能などの要素によって正解が変わると思いますので、私ならこうする（かも）、で書かせていただきます。 ①画像の管理方法 ファイルで保存します。理由は管理の容易性です。 管理者として画像ファイルだけをDLしなければならないケースでも、ファイルで保存してある場合だとFTPで一括DLできますが、DB保存だとデコード処理等でシステム経由でないと抽出できません。（秘匿性は高くなりますが） DBでファイル名を管理するかどうかは機能要件によります。 ②データの取得方法 画像ファイルが小さなものでしたら直接返しても問題ないと思います。 クライアンへのレスポンスフォーマットがJSONのようですので、画像データはBASE64でエンコードします。 クライアント側ではデコード後に表示可能です。 大きな画像データが多い場合は画像ファイルへのリンクを返し、クライアント側にそこから画像データを取得してもらうような構成にします。 ただ、画像データが秘匿対象である場合はもう少し制御が複雑になります。 まず画像ファイルの保存場所を外部からの直接アクセスの及ばないエリア（不可視エリア）とし、サーバ側に画像送出専用のAPI（トークン認証で画像を送出）を別途設置します。 クライアントに返す画像ファイルリンクは画像送出専用APIへのトークン付きリンクとします。
こんにちは。 いい感じだと思います。
こんにちは。 POSTGRESQLは すばらしいと思います。
無理です。 pg_databaseに対するselectということからわかると思いますが、postgresの文字コードセットはDATABASE単位で１つです。 そして、文字コードセットはcreate database時に指定し、それ以降変更することはできません。 もしこれが変更できるとなると、システムテーブルを含めた、すでに存在している全てのデータベース内オブジェクトの文字コードが書き換わらなければなりません。そんな非現実的な操作は許されません。
OSS-DBは完全に暗記科目、しかもくだらないといってもいい、実務では使わないような超マイナーな設定などをひたすら暗記して回答する試験です。 そのため、暗記が得意なら簡単です。 一方、データベーススペシャリストは、ＤＢやるなら知っててあたりまえレベルの基礎知識の暗記にアプリに依存しないレベルの若干応用レベルではありますが、午後で実務寄りの設計系問題が出ます。 そのため、実務を経験していれば簡単です。
インストールも解凍もできない 恐らくインストーラーが圧縮されており、圧縮されたファイルが解凍できない 解凍できないのは圧縮ファイルの形式がLZHで、LZHのアンパッカーが入っていない だけではないかと思いますが。 ＯＳ書いてないですが自作系なのでWindows、ただし10の可能性もあるのでLhaplusは使えない可能性があるということで、とりあえずlhazをインストールしてみればいいのでは？ http://chitora.com/lhaz.html
こんにちは。 しっかりしています。
＞rerui47さん >そのような便利なサンプルの関数などはありますでしょうか？ そのようなものは自作するようなものなのでありません。
where句に指定した方の値（固定値？）が double か real に暗黙変換されているためでは？ 固定値にキャスト演算子を指定してみては？
おはようございます。 大切でございます。
地道に select a+b+c from テーブル って書くしかないですが。
PostgreSQLとMySQLの違いの事でしょうか？ PostgreSQL： オブジェクト関係データベース管理システム PostgresをSQL対応に改修したものがベースです。 MySQLに比べて機能が豊富です。(ストアドプロシージャ、PL/pgSQLなど) MySQL： リレーショナルデータベース管理システムでメモリやCPUが貧弱でも稼働します。 外部インタフェース(SQLを解釈する部分)とストレージエンジンが分離しています。 現在MySQLのストレージエンジンには、 旧来からのMyISAM(参照が高速、全文検索可能、同時更新が苦手)と、 InnoDB(同時更新も問題なし、参照も最近は充分高速)の2つがあります。 PostgreSQLはOracleやSQLserver等と同じでデータベースシステム側にビジネスロジックを組み込む事が可能ですがMySQLだと難しいです。(10年前のPostgreSQLより機能が少ない) もちろん、呼び出し元側で制御すれば同等の事は出来ますが、Webからも、社内PCのアプリケーションからも同じ処理をさせる場合、Web用スクリプト(PHP,Perl等)と、社内アプリケーション(VB,C#等)で同じロジックを別々に実装する必要が出てきます。 ※ PL/SQLはOracle用のマクロ言語的なものです。 ※ PL/pgSQLはPostgreSQL用のマクロ言語的なものです。 ※ PostgreSQLの省略語はPgSQL等と表記されます。
おはようございます。 POSTGRESQLは いいものでございます。
※別のjspに飛んだほうが楽だと思うけど、どうしてもlogin.jspを使いまわしたいようなので。 login.jspは、最初にパラメータでidとpassを確認して、入力されていないなら、以下のページを表示する formのonsubmitでlogin.jspをcallする。 inputタグを２つでidとpassword入力 submitボタン 入力されているなら、importされたlogInControlerのstaticメソッドをコールあるいはnewしてinstance作って、そこのメソッドをコール。 →idとpasswordが引数 メソッドの戻り値にログイン情報クラスを指定（このクラスもjspでimportしておく）。 ログイン情報クラス{ String 郵便番号; String 住所; String 電話番号; } logInControler内でDBに接続し、該当データがあるならログイン情報クラスをnewしてデータ埋めてreturn。なければnullをreturn。 jsp側でメソッドの戻り値を見て、nullなら「該当情報がみつかりませんでした」 nullでないなら、ログイン情報クラスの該当フィールドをhtmlに埋める。
それはpsqlからpsql起動のコマンドを叩いても何も起こらないのが当たり前です。 コマンドプロンプトを開いて、記述されたコマンドを実行してください。
おはようございます。 充実しております。
こんにちは。 慎重にしております。
こんにちは。 良質で ございます。
jdbcドライバが適切な場所にありません。 postgresのjdbcドライバを適切な場所に配置しないと正しく動作しません。 今回のケースですと、 postgresql-9.4.1208.jre7.jarを、パスの通った場所に置く必要があります。 Eclipseであれば、プロジェクトエクスプローラーからプロジェクトを右クリックして、プロパティ→Javaのビルドパス→ライブラリー→外部jar追加でpostgresql-9.4.1208.jre7.jarを追加してください。 なお、面倒であればjdkインストールパスのlib\extの下にpostgresのドライバを入れてしまうという手もありますが、バージョン変更時にハマるのでお勧めしません。 また、もう一点、postgresのdataフォルダのpg_hba.confでlocalhostからの接続(127.0.0.1からの接続）を有効にしていないとDBに接続できませんので、注意を。
こんにちは。 慎重なほうがいいです。
こんにちは。 いい感じでございます。
答えを言ってしまうと「求まらない」です。 DBの処理速度は色々な条件によって大きく変動します。 きれいに比例するわけじゃないんです。 これはDBそのものの特性もありますが、それ以外にもハードウェアに依存する部分もあります。 たとえば、メモリが8GB、空きメモリが4GBという筐体で処理した場合、読み込むデータが4GB以下ならオンメモリで処理できますが、それが4GBを超えた時点で一気に遅くなります。 ファイルの問題もあります。 postgresの場合、データは1GBごとにファイルを分けます(toastと言います）。 10GBのデータは10枚のファイルを読むことになります。 indexが適用されていたとして、検索対象のデータが（cluster実行などによって）先頭の１ファイルに集中していた場合と、１０ファイルに分散していた場合では速度がまったく異なります。 さらに、アクセスタイミングによっても速度は大きく異なります。 同時に１０人が検索かけるのか、常に１人しか検索かけないのか、別々のテーブルに検索するのか、同じテーブルに検索するのか、といった条件によっても速度が異なります。 よって、ハードウェアのスペック(CPU数、クロック数、メモリ量、HDDの速度、フラグメンテーション率、ネットワーク速度など）が分かればある程度予測できることはありますが、現状では予測不能という答えしか出ません。
こんばんわ。 たいせつですね。
こんばんわ。 よくわかります。
こんにちは。 役に立つと 思います。
DBの基礎の基礎として、「SELECTされる単位はレコードである」というのがあります。 nameが鈴木のみの「レコード」を取り出すことになりますので、JSON配列型なら、その配列の中に鈴木が入っている「レコード」が取り出されることになります。 つまり SELECT member_detail from TEST where member_detail->name='鈴木' の結果は当然 [{"id":"--",(略),"name":"木村"}] という配列になります。 そのため、こういう構造でデータを持ったことがなく、検証できていませんが、 SELECT json_array_elements(member_detail) as detail from TEST where detail->name='鈴木' とするか、さらに一度仮想ビューかまして SELECT detail from ( SELECT json_array_elements(member_detail) as detail from TEST) A where detail->name='鈴木' というような面倒な処理が必要だと思われます。
select did, district from vineyard where did in (select did from wine where price < (select avg(price) from wine)); select did, district from vineyard where exists (select did from wine where vineyard.did = wine.did and price < (select avg(price) from wine)); select distinct did, (select district from vineyard where did=wine.did) from wine where price < (select avg(price) from wine); sqlite3で確認しました。postgresqlでそのまま動くかは分かりません。 最後のはdistinctを使ってるのがダサいと思いますがあんま考えてないです。 distinctを外しても答えは出ますが、ブルゴーニュが2つ表示されます （ブルゴーニュに該当する銘柄が２つあるので）
cal1 cal2 cal3 1 A 2016-06-01 2 B 2016-06-01 3 B 2016-06-01 4 C 2016-06-01 5 C 2016-06-02 6 B 2016-06-02 7 B 2016-06-02 8 A 2016-06-02 9 A 2016-06-02 10 B 2016-06-03 11 A 2016-06-03 select * from test a where cal1+1=(select min(cal1) from test where not cal2 =a.cal2 and cal1>a.cal1) により cal1 cal2 cal3 1 A 2016-06-01 3 B 2016-06-01 5 C 2016-06-02 7 B 2016-06-02 9 A 2016-06-02 10 B 2016-06-03 となりましたが、これがお望みの出力でしょうか？
おはようございます。 重宝しています。
おはようございます。 必要でございます。
こんにちは。 すばらしいとおもいます。
全ての\を\\にしてください。 参考 https://www.postgresql.jp/document/9.2/html/functions-matching.html 9.7.3.3. ＞注意: エスケープの先頭の\をSQL文字定数としてパターンに入力する時には二重にしなければならないことを忘れないでください。以下に例を示します。
こんばんわ。 いい感じでございます。
こんばんわ。 必要でございます。
それは資料が古いから。書かれているURLにアクセスしてみましたか？してみれば一発でわかったはずです。 今はcmakeです。 https://github.com/openstreetmap/osm2pgsql ここのinstallingのように、git cloneした後は ＞On RedHat / CentOS first run を実行してから ＞On a Fedora system, use を実行です。
おはようございます。 慎重にされます。
主キーというのは一意でなければいけないので、重複は許されません。 つまり、主キー列に同じ値を複数入れることはできません。 第一正規形の定義を簡単にいうと、表の列がそれぞれ一つの値だけを持っている状態です。例えば、A, B, C という列がある表の場合 この表は第一正規形です。どの行のどの列も一つの値だけを持っています。 (A,B,C) = (1, 2, 3), (2, 3, 4) ※知恵袋だと表がうまく書けないので、このような書き方をしています。意味は (A,B,C) は表の列の名前です。 (1, 2, 3) は A=1, B=2, C=3 とう行が表の中にあるということです。この例では表に２行あります。 一方次の表は第一正規形ではありません。 (A, B, C) = (1, (2, 3), 4), (2, 3, (4, 5)) ちょっとわかりにくいですが、表の最初の行の B は (2, 3) という二つの値の組を与えられています。ひとつの値だけを持っているという第一正規形の条件を満たしていません。 この表を第一正規形にするには、複数の値を持っている部分を「繰り返し」に書き換えます。 (A, B, C) = (1, 2, 4), (1, 3, 4), (2, 3, 4), (2, 3, 5) (1, (2, 3), 4) が (1, 2, 4) と (1, 3, 4) に書き換えられています。 A と C の値は同じ値で、B の値のだけが変わって、B の値の数だけ繰り返します。 この手順をすべての複数の値が割り当てられている列を持っている行に対して行えば、表は第一正規化されます。
おはようございます。 いいと思います。
おはようございます。 必要です。
おはようございます。 大切であると 思います。
こんばんわ。 すばらしいものだと おもいます。
おはようございます。 すばらしいとおもいます。
こんにちは。 いいと思います。
物凄くわかりやすいパスの記述の仕方。http://symfoware.blog68.fc2.com/blog-entry-1229.html
おはようございます。 大切でございます。
さくらのVPS 512プラン(685円/月)か1Gプラン(972円/月)に自分でpostgresqlインストールするというのはどうでしょうか。 「さくら vps postgres」で検索すると、大量にノウハウもありますし。
こんばんわ。 ありがたいとおもいます。
PGHOME\bin; というPath設定は、現在いる場所(カレント)の下の"PGHOME"という名前のフォルダの下の"BIN"という名前のフォルダにアクセスしろ、という設定になります。 そんな場所にpsqlがあるとは思えませんので、OS側が認識しないのは仕方ありません。 PGHOMEが環境変数として定義されているなら、Pathに記述する際は環境変数であるマーク(%)を用いて、%PGPATH%\binという記述になります。 そうでないなら、素直にPATHには実際にpsqlが存在しているフルパスを記載したほうがいいでしょう。
おはようございます。 優秀でございます。
こんにちは。 とても大切です。
こんにちはです。 すばらしいと思います。
こんばんわ。 いいものだとおもいます。
こんにちは。 すばらしいものでございます。
おはようございます。 すばらしいでございます。
おはようございます。 すばらしいです。
おはようございます。 いいかんじでございます。
こんばんわ。 POSTGRESQL はいいもので ございます。
こんにちは。 必要でございます。
要求しているのは、pgAdminIIIやVBアプリが動作でき、postgresqlが置ける「Windowsサーバー」ですか。 それとも、外部からpostgresqlにアクセスできる「ＤＢサーバー」ですか。 それによって大きく違います。 たとえば後者ならAWSのRDS for Postgresqlなんかが安く利用できる可能性があります。
何も難しいことを考えなくても、postgresql.confいじって、log_line_prefixに時刻記録させて、log_statementをddlにすればいいのでは。 どうしてもＤＢ上でログファイルの解析をしたいなら、日ごとにcsvファイルに書き出して、postgresqlにcopy文で読み込ませるシェル書けばいいでしょう。
こんにちは。 すごいと 思います。
おはようございます。 いいものでございます。
おはようございます。 大事でございます。
こんにちは。 大切でございます。
おはようございます。 必要でございます。
EXTRACT(DOW FROM CURRENT_DATE)です。尚、１が日曜日としているデータベースがの方が多いようです。
おはようございます。 すばらしいものです。
おはようございます。 大切にいたします。
postgresql-jdbcのJdbc4Connection.isValidは 9.1-903 で実装されたそうです。 コミットログによれば2012年1月・9.1へは9月です。 ドライバが古すぎるんでしょう。アップデートする必要があるんだと思います。 せめて質問するときはTomcat,JRE(JDK),pgjdbcのバージョン情報位は書いた方がいいと思います。
おはようございます。 優秀でございます。
linuxならpsコマンドで実行状況を見る方法があります。 sqlでやりたいなら、pg_stat_activityをselectしてapplication_nameがpg_dumpのものがあるかチェックするという方法があります。
こんにちは。 慎重にしています。
postgresはデフォルトのクライアントエンコーディングはOS依存となります。 そのため、Windows環境の場合はShift-JIS(MS932)でエラーメッセージが出力されてしまいます。 postgresql.confのclient_encodingにUTF8を設定してみてください。
こちらは見られましたか？ http://d.hatena.ne.jp/iriya_0624/20130424/1366783019
普通にアプリケーション作って100コネクション消費するなんて、1000人以上規模のサービスでない限りありえません。 ソースコードでコネクションの開放漏れしているところを潰してください。 そうしない限り、1000に増やしても10000に増やしても、いつかまた同じエラーになります。 PgAdminIIIが使えるなら、ツールのサーバー状態で、どのIPアドレスからコネクションが繋がれ、どのような処理をしているのか確認してください。 in transactionで固まってるなら、カーソルのフェッチ処理をクローズしないまま放置しているのでしょう。 idleなら単なるclose漏れでしょう。 いずれにせよ、Connection張ったら必ずcloseすることをコード上で徹底してください。
こちらで回答済み。 http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1415767101...
今回のケースでは単にpidファイルが残っているだけという可能性が高いでしょう。 postgresはインストールフォルダ下にpostmaster.pidというファイルを作成し、こちらで二重起動を抑制しています。 そのため、こちらのファイルを削除すれば記述された問題は解決するでしょう。 ただし、それで起動できたからといって動作するかは不明です。 別のエラーによって起動できない可能性はあります。 もっとも、強制終了したタイミングによってはDBの構成ファイルが破壊されて、二度と起動できなくなることを覚悟の上で強制終了されたと思いますので、何が起こっても覚悟はできているとは思いますが。
おはようございます。 すばらしいですね。
こんにちは。 最高でございますね。
私はpostgreSQL がすきです。
こんにちは。 POSTGRESQLは いいものと思います。
limit offsetで1レコードだけ取ればいいです。 もし、postgresqlのバージョンが9.2以上ならindex only scanが使用できますので、主キーの先頭カラムをorder by selectすれば高速で処理されます。 select col1 from table1 order by col1 limit 1; 9.2より前のバージョンですとindex only scanは使えません。 そのため、order byをつけない処理のほうが速くなります。 select col1 from table1 limit 1;
こんにちは。 すばらしいですね。
おはようございます。 懐かしいです。
こんにちは。 いいかんじです。
こんにちは。 POSTGRESQLは 必要ですし 大切です。
こんにちは。 大切でございます。
おはようございます。 POSTGRESQLは いいと 思います。
こんばんわ。 活用しております。
こんにちは。 それは大切ですね。
ログをDBに保存するというのは一般的な手法です。 たとえば富士通社のシステム監視ツールServerViewはpostgresqlにログを記憶していたはずです。 マシンごとにテーブルを分けるのはあまり良いやり方とは思えません。 それをやってしまうとマシン間での因果関係を取るのが大変になります。 たとえばあるイベントが同じ日や時間に他のＰＣでも発生していたのかを調べることが難しくなります。 そのため、ログは全てのマシンのログを１テーブルにまとめるほうが良いです。 パフォーマンスは、数千万レコードになれば落ちるでしょう。 その場合、想定されるログのサイズに従ってパーティショニングする、ログの保存期間を設けて、ある一定以上になったら削除する、といった対策は必要となります。 まあ、１日１０００件で１００台なら１年くらいは放っておいても大丈夫ですが。
こんにちは。 大切で ございます。
こんばんわ。 大切で ございます。
こんにちは。 それは大切です。
こんにちは。 すばらしいですね。
こんにちは。 重要でございます。
こんにちは。 POSTGRESQLは いいものです。
このページにあるパッチを使って、 9.5 と、9.0.17 で動作する確認が取れている様です。 この間のバージョンなら問題無いと思います。 https://wordpress.org/support/topic/wordpress-442-and-postgresql-95
POSTGRESQL は 大切でございます。
こんにちは。 とても すばらしいと 思います。
こんにちは。 大切でございます。
こんにちは。 POSTGRESQL は非常に 大事でございます。
こんにちは。 しっかりしています。
こんにちは。 大切だと 思います。
こんにちは。 POSTGRSQL は良品質で あります。
こんにちは。 丁寧に しております。
こんにちは。 大事なもので ございます。
こんにちは。 活用することは しています。
こんにちは。 必要であると 思います。
こんにちは。 大切で 良いものであると 思います。
こんにちは。 これは大切で ございます。
in句に指定できる個数制限は理論上2の64乗個です。 どこかで2000個という制限があるようなことが書かれているのを見たことがありますが、恐らく下のドキュメントの読み違いによる間違いです。 http://www.postgresql.jp/document/9.5/html/textsearch-limitations.h... このデータのlength制限の2Kバイトを2000個までと勘違いしたものと思われます。実際にpostgresqlで2000個以上のデータをin句で繋いでもエラーとはなりません。 redshiftも同等と思われます。
どちらに置いても構いません。 このシステム構成であれば、 ・Webサーバーからのアクセスはクエリーベースオンリー ・DBサーバーへのそれ以外の手段での接続はFireWall内部のLAN側機器からしかできない(Webサーバーからもできない) という構成になる、ということはわかると思います。 この構成の場合、 ・DBサーバーをDMZに置いた場合 →ルーター外からの攻撃はWebサーバーの乗っ取りによるクエリーベースの攻撃 ・DBサーバーをFireWallの内側に置いた場合 →ルーター外からの攻撃はWebサーバーの乗っ取りによるクエリーベースの攻撃 となり、どちらもセキュリティ上は変わりがありません。 ただし、これは理想的な話で、現実的な話をすると ・設定ミスでDBサーバーに接続できてしまうルートができるのを防ぎたい →FireWall内に置いたほうが安全 ・パフォーマンスをできるだけ高くしたい →DMZに置いたほうが速い（FireWallは速度を低下させるので） という選択になります。
PG4WP というのを使うと、WordPress でも、PostgreSQL が使えますよ。 Movable Type は、結構扱いにくいし、無駄に高いのでお薦めしません。 セキュリティーは、 PostgreSQL のほうが、MySQL よりずっと優れています。 参考サイト http://tyawan080.hatenablog.com/entry/2014/06/28/183506 https://ja.wordpress.org/plugins/postgresql-for-wordpress/ http://blog.sova-lab.com/2013/03/03/wordpress-postgresql/
こんにちは。 それは 必要でございます。
日付演算が必要になるかどうかです。 特定の期間や、特定の日数、過去何か月など、date型であれば、RDBMSによる関数などを使って、SQLを書けます。 この場合、RDBMSの性能も、ある程度、生かすことができます。 一方、integerで日付を管理する場合、RDBMSでは単なる整数として扱われます。 型変換などで日付として扱うこともできますが、RDBMSにとっては、冗長な処理をさせることになります。 アプリ側で特定の期間や、特定の日数、過去何か月などを行うか、そういう処理が不要で、RDBMSで用意してくれている日付演算、そのための内部処理などを必要としないなら、integerで管理してもいいでしょう。
マカフィーを使用している場合、アンチウィルスソフトのせいで使用できなくなっている可能性が極めて高いです。 こちらの２番目のレスのとおりレジストリをいじってみてください。 http://forums.enterprisedb.com/posts/list/3040.page
テーブル定義の提案です。 まず、テーブル名ですがloginでもわからなくはないですが account_info等のアカウント情報としたほうが適切かと思います。 また、フラグ制御でもいいとは思うのですが、modifiedがnullの場合は初回ログイン notNullの場合は2回目以降と判断がつくと思います。 ロジック的には ログイン ↓ テーブル参照 ↓ modifiedがNullの場合→パスワード変更 ↓ modifiedがNullでない場合→TOP画面へ でいいのではないでしょうか。
psqlは-dでデータベース名を指定しないと、接続しようとしているユーザー名と同じデータベース名を使う仕様になっている為です。postgresデータベースはインストール時点で作られているハズですので、削除しても特に支障は無いと思います。
おはようございます。 丁寧にすれば 難しくはないです。
一応、設計上は対策は必要と考えれます。 理由としては、システム上電源の状態が不明ですが 瞬停や、急な電圧低下等の危険性があります。 また、DBへのアクセスがWebやモバイルかも不明ですが Webやモバイルからのアクセスがあるのであれば 接続が不安定になる可能性もあります。
その状態ではリカバリー不能です。 バックアップからリストアする以外の復帰方法はありません。
テーブルの更新処理に、delete, insertを利用している場合は、 途中で、SQLが失敗したら、ROLLBACKしないといけないので、 そういう場合はトランザクションが必要だと思います。
本当にpg_hba.confの設定がその設定なら、外部のPgAdminIIIからは接続できません。 ＞local all all md5 はlocalなのでUnixドメインソケットを利用した接続設定です。 ローカルＰＣ内のプロセス間通信でしか使用できませんので、外部接続では使われません。 ＞host all all 127.0.0.1/32 md5 はhostなのでTCP/IPによる接続になりますが、接続可能アドレスのレンジが127.0.0.1/32のため、ローカルホストでしか接続できません。 つまり、記述された設定では外部からの接続を全て遮断しています。 【可能性１】 pg_hba.confのリロードをしていないために以前の設定が生きたままなのではないかと思います。 pg_ctl -D /usr/local/pgsql/data reload でpg_hba.confを読み直してみて、エラーが出るようなら pg_ctl -D /usr/local/pgsql/data restart でpostgresを再起動してみてください。 ※/usr/local/pgsql/dataは環境に合わせて適時変更してください。 【可能性２】 編集したpg_hba.confが、実際に起動しているpostgresインスタンスと別のインスタンスの可能性もあります。 pg_hba.confがinitdbで指定した場所にあるか確認してください。
「指定したキーに一致する一意性制約がありません」がエラー内容ですので、tbl1のaaとabのそれぞれにuniqueの設定をする必要が有ります。
postgresqlではlocaleおよびencodingはデータベース単位でしか行えません。 そのため、特定のテーブルだけencodeを変更することはできません。
linuxなら find / |grep postmaster.pid で、どこで起動しているかわかります。
今後、性別は選択しないでもいい、あるいはその他のような選択ができたとき、どう対応するつもりですか。 true/falseから数値あるいは文字列型に変えますか。 かなり修正が入ると思いますが対応できますか。 １レコード長を可能な限り縮めたいような特殊な事情がないのであれば、扱いやすさと拡張性、select速度からinteger型が無難だと思いますが。
どちらでも構いません。 postgresはls -lで確認するとわかりますが、単にpostmasterのシンボリックリンクです。 ls -lの結果例: lrwxrwxrwx 1 root root X X月 X 2015 postmaster -> postgres 両方を統一したいなら、heartbeat側でpostgresを起動している部分をpostmasterを起動するように書き換えるか、/etc/init.d/postgresql-9.3ファイルを編集して、中の起動文字列をpostgresに書き換えてあげればいいでしょう。 postgresql-9.3ファイルの編集例： DAEMON="$prefix/bin/postmaster" ↓ DAEMON="$prefix/bin/postgres"
エラーメッセージにあるとおりですね。 BASEではUTF8で文字を管理しますが、EUC_JPの文字コードマップがUTF-8に存在しないため、変換できずエラーとなっています。 今回のケースですと、0xf5a5というEUC_JP文字がUTF8にはマッピングできません。 参考：http://ash.jp/code/unitbl22.htm こちらで0xf5a5を検索すると、UTF8へのマップが存在しないことがわかります。 回避方法はDBをUTF-8で再構築するか、p03テーブルから該当文字を含んだデータをdeleteするなり置換するなりするしかありません。
PostgreSQL（ぽすとぐれすきゅーえる: 発音例）は、BSDライセンスに類似するライセンス[1]により配布されているオープンソースのオブジェクト関係データベース管理システム (ORDBMS) である。その名称は Ingres の後継を意味する「Post-Ingres」に由来している。単純に「Postgres」や「ポスグレ」と呼称されることも多い。 PostgreSQLというのが正式名称で、 フリーで使える高性能なデータベース管理システムです。 企業内部での文書管理やナレッジベース、在庫管理といった用途に加え、 インターネットを通じての情報受発信に向けてよく利用されています。 オンラインショップや予約システム、知恵袋の様な掲示板システム、ポータルサイトといった ウェブ系のアプリケーションを開発するときに非常に役立ちます。 日本ではおおむね10年近く利用実績があり、市販の書籍やユーザ団体も充実しています。
JDBCレルムを使用するなら、realmにdigest属性を設定して暗号化すればいいと思いますが、それで駄目な理由はなんでしょうか。
バキュームカー バキュームクリーナー バキュームチューブ 吸い込みの意味ですね
＞理由がわかる方がいらっしゃいましたらご回答よろしくお願いします。 無茶なクエリを発行しているからじゃないかな。
私は一昨日ドンキに売ってるの見たけどね。 ドンキのどこかで売ってんじゃない???
獣道一直線だーーーーーーーーーーーー
UPDATEがいいとおもうんだけどなー。
インストールディレクトリのログファイルに何かメッセージがありませんか？ 例：/usr/local/pgsql/data/pg_log/ なお、このエラーはディスク容量が足りない時に発生しやすいです。 linuxならdfでどのくらいの空き容量があるか確認してください。
ごめんなさい、やりたいことがまったくわかりません。 def message(): return "hello" として、 cursor.execute(u"""INSERT INTO dmy_table VALUES (%s)""" , (message())) ってこと？
SQL SERVERは例外として、それ以外のデータベースではＯＳとは別にデータベースで独自のユーザーを管理しています。 そちらのユーザー名とパスワードを入力しなければ、接続することはできません。 postgresの場合、通常のスーパーユーザーはpostgresです。 パスワードはＤＢを設定した人に確認してください。 もし、どうしてもわからない場合は、手前味噌ですが知恵ノートにpostgresのパスワードを忘れた場合の対処法がありますのでご参考にどうぞ。 http://note.chiebukuro.yahoo.co.jp/detail/n187241 また、pg_dumpでユーザー名の指定を忘れないように。 pd_dump -s -U postgres testdb > c:\db\a.sql
なんか、単に PostgreSQL を起動してないだけでは？ Windows なら、コントロールパネルの管理ツールのサービスを開いて起動出来ますよ。 それとも、エラーで落ちてるのかな？ Linux だったら、 initdb してないとか？
Secure Web Server の略だと思いますが…
専門的な知識が必要なので難しいと思います。 SQLの使い方を覚えて下さい。
私は、iPhoneを使用していますよ。
まずは、しっかり食べて下さい。 良いお年を
>PostgreSQL とは何か 山田や稲垣のような名前だと思えばOKです。
select 購入者ID,購入商品名 ,row_number() over(PARTITION BY 購入者ID ORDER BY 購入日時) as 購入番号 from customer です。
keiki_numを文字列として受け取っても良いのであれば select BBB,CCC, case when AAA is null then '－' else cast (keiki_num as varchar(9)) end,DDD from table_name とすれはエラーは出ません。
可能です。 むしろそのためのpgpool-IIなので。 実際のconnection手順は サーブレット with postgresql用jdbc ↓ pgpool-II ↓ postgresql となります。 pgpool-IIは動作としてはpostgresql専用のproxyをイメージしていただければわかりやすいでしょう。 jdbcの接続に関する記述はpostgresqlと同じです。ポートとサーバーにpgpool-IIのものを指定してください。 pgpool-IIとpostgres間の設定、およびpgpool-IIそのものの設定は日本語マニュアルを参考にどうぞ。 http://www.pgpool.net/docs/latest/pgpool-ja.html 最後に一点だけ注意点を。 pgpool-IIに対してConnectionを生成した場合、必ずConnection.setAutoCommit(false)を実行してください。 でないと正しい動作がされません。
まず、列aとbのカーディナリティ（列値の種類の多少）が、どうなっているかです。 列aが列bより、絞り込みができるなら、(a,b)の複数列（マルチキー）インデクスが良いでしょう。 逆に列bの方が絞り込みができるなら、(b,a)の順にした方が良いでしょう。 オプティマイザが、列aと列bの個々のインデクスを利用した方が効率が良いと判断した場合、PostgreSQLは双方のインデクスを利用します。 これは、列aと列b、双方である程度、絞り込み出来る場合などです。 マニュアルに概要の記載がありますので、参考まで。 http://www.postgresql.jp/document/9.4/html/indexes-bitmap-scans.htm...
>postgresqlとは？ 鈴木や佐藤のような名称だと思っていれば良いと思います。
RDBMSは、ここのカテゴリ通りPostgreSQLですか？ age列のデータ型は、何ですか？ INTなどの整数ですか？ CHAR(2)などではないですよね？ あるいは、REALなど浮動小数点を使ってたりしませんよね？ 整数などであれば、ANDの条件式には問題はありません。 「列 BETWEEN a AND b」は、「a以上、かつa以下」です。 未満とするには、「列 BETWEEN a AND b-1」などとする必要があります。
15 ○ 15 × はあっても 15 ○ 15 ○ や 15 × 15 × が存在しないなら、次でいけます。 SELECT * FROM テーブル WHERE カラムa in ( select カラムa from テーブル group by カラムa having count(*) = 1 ) or カラムb = '○'
いつでも、どこでも、だれでもが恩恵を受けることができる 規格、媒体、概念、インターフェースなどのことをいいます。 使用例： 「ユビキタス社会」「ユビキタスネットワーク」
ハードウェア、ファイル、周辺機器などを管理するのがＯＳの役割です。
その場合、自分が要求した入出力動作が終わるまで、 タスクは待ち状態となります。
タブ区切りのデータをpgadminIIIで取り込むためには、セパレータをタブにする必要があります。 Misc.Optionsタブでデリミターを[tab]にしてください。 手前味噌ですが、こちらも参考にどうぞ。 http://www.slideshare.net/chocolate-bar/pg-admin-iii
ナレッジベース・全文検索・統計解析・・ロト7・競馬の予想とか
RDBMSのオプティマイザが、どういう処理をやっているかによって違ってきますが。。。 少し読んでみましたが、この記事を書いた人が言いたいのは、次のようなことです。 SQL文を受け取ったRDBMSは、ディクショナリ（システムカタログといった呼び方をするRDBMSもある）から表や列、インデクスの定義情報を読み出し、最終的にはアクセス計画を作成します。 ここで、一旦、定義情報を取り出して解析した表に別名を付けることで、同じクエリ内で同じ表の定義情報の繰り返しの読み出しや解析のオーバーヘッドを抑止できるといったことを言いたいようです。 つまり、PREPARE+EXECUTEで実行する場合、PREPARE部分の性能の話ですね。 これらは特に (1)ストアドプロシジャ (2)C言語やCOBOL言語の命令文と同じように、EXEC-SQLでSQLを直接、書ける埋め込み型SQL といった、定義時やコンパイル時にアクセス計画まで作ってしまう方法でない場合。 つまり、JavaやPHPなど、文字列を組み立ててSQLを実行する方式において、有効です。 ただし、多くのRDBMSでは、定義情報の解析結果をキャッシュ上に残しておき、別のSQL、同じ接続ユーザーだけでなく、他ユーザー間、セッションが切れても利用できるといったことを行っています。この場合、別名は当然、引き継がれる訳ではなく、表名での参照になります。
--^--^--^--^--^--^--^--^--^--^--^--2
ちなみに，質問者様はどのような職に就かれているのですか？ 気になったので質問させていただきました。 あとよろしければ，ナイスとベストアンサーをお願いします！！
こちらを参考にどうぞ。 ＵＲＬはMySQLですが、postgres用のODBCドライバを使えば同じことができます。 http://dotnsf.blog.jp/archives/1013344582.html
window関数など使ってもいいのですが、わかりやすい方法でサブクエリーを使用した方法を書きます。 まず、３日間の売上平均を求めるSQLを考えると、これは select 商品名,sum(売上)/3 from uriage where 日付 between '2015-07-01' and '2015-07-03' です。簡単ですね。 次に2015-7-3の売上を求めるSQLを考えると、これは select 商品名,sum(売上) as 売上 from uriage where 日付='2015-07-03' です。これも簡単ですね。 さて、cccは2015/7/3に売上がなく、この場合でもcccを表示しなければならないのですから、売上平均を求めるSQLに外部結合で売上を求めるSQLを結合する必要があります。 具体的には select A.商品名,B.売上,sum(A.売上)/3 as 3日間の売上平均 from uriage A left outer join ( select 商品名,sum(売上) as 売上 from uriage where 日付='2015-07-03' ) B on A.商品名=B.商品名 where A.日付 between '2015-07-01' and '2015-07-03' group by A.商品名,B.売上 となります。 ちなみに解説は省略しますが、こういうトリッキーな方法もあります。 select 商品名,sum(case when 日付='2015-07-03' then 売上 else 0 end) as 売上,sum(売上)/3 as 3日間の売上平均 from uriage where 日付 between '2015-07-01' and '2015-07-03' group by 商品名
死ぬことができる状態です。 しかし，死んだ状態から生きることはできません。 あしからず。
集計結果をto_charで文字列にすればいいのでは。 通常はto_char(集計結果,' YYYY-MM-DD HH24:MI:SS')ですが、これを to_char(集計結果,' YYYY-MM-DD HH24:MI')とすれば分単位の表示になります。 これを応用するとsum(to_char(時間文字列::time,'YYYY-MM-DD HH24:MI:00')::time)のようにして、秒単位切り捨てでの集計もできます。
pg_hbaで外部からの接続は許可していますか？
postgresのバージョンは？ 8.4以降ならウィンドウ関数が使えるので以下のＳＱＬで可能です。 select code,row_number() over (partition by code) as id from テーブル それより前のバージョンではストアド切らない限り無理だと思います。
ほぼほぼこちらで、必要十分なことは書いてあります。 http://lets.postgresql.jp/map/tuning および http://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server/ja これ以外にfsync=offというパラメータ設定もあります。 こちらを設定すると信じられないくらい速くなりますが、停電やOSクラッシュなどで異常停止した場合、データが飛ぶ上、undoの場所がわからなくなるというリスクを持ちますので、BBWC（バッテリーバックアップライトバックキャッシュ）のついたHDD以外ではonのままにすることを推奨します。
PgAdminIIIなら簡単にできますし、psqlでもできます。 PgAdminIIIはわかるでしょうから、psqlでのやり方を。 psql -U ユーザー名 -h ホストアドレス -A -t -F "," -c "select文" DB名 >出力ファイル名
ADYH_が含まれていないレコードの場合はどうしますか？ とりあえずnullでも出力しますか？ それとも、グルーピングということなので、数が欲しいんでしょうか。 ちょっとやりたいことがわかりません。 具体的な出力結果があればわかりやすいのですが。 とりあえずわかっている情報だけでＳＱＬ組むと SELECT CASE WHEN トラッキングコード LIKE '%ADYH\_%' THEN 'Yahoo!' ELSE NULL END FROM テーブル とか SELECT 'Yahoo!' FROM テーブル WHERE トラッキングコード LIKE '%ADYH\_%' とかになると思いますが。
エラーはどういった内容でしょうか。 それがわからないと回答できません。 なお、このようなケースですと、postgresql.confのlisten_addressesがlocalhostに絞られていたり、pg_hba.confで接続がローカルに絞られてたりするケースが多いです。
トランザクション内でロックする必要が有る場合は当然ロックしなければ成りませんが、複数をロックした場合、デッドロック（ロックしあってお互いに先に進めない状態）の危険性が増加するので、なるべくロックの数を少なくする方法を取ります。
条件がよくわからないので、質問だらけです。 というかこれじゃ答えつきませんよ。 ＞テーブルの項目名は同じものとします。 テーブルABC全部同じでしょうか？ 全部の処理をまとめてやるんでしょうか？ 項目c、項目ｄはどのテーブルの項目でしょうか？ ３のnullでない行のカウントが項目ｃ？ 最終的に得たいデータはテーブルCから？
こんな感じですか？ update テーブル set x = case when x is null then a else b end （xがnullならa、そうでなければbをセット） update テーブル set x = case when x is null then a else x end （xがnullならa、そうでなければ値を変更しない）
出力した結果のカラムの型と数が等しいならunion allでつなげば出ます。 例： select A.* from A,B where A.COL1=B.COL1 union all select A.* from A,C where A.COL1=C.COL1 カラムの型と数が違った場合、それは一次正規化されたデータではないため、通常のRDBMSでは出力できません。 ただし、別々に出すのであれば、 select A.*,B.* from A,B where A.COL1=B.COL1; select A.*,C.* from A,C where A.COL1=C.COL1 と、;で繋いで１度に投げれば両方の結果が得られる場合もあります。 ※たとえばJDBCでexecuteを使用した場合など。
まず、そういうのはXPでやるのは向かない。 Linux系OSやFreeBSDなどでサーバーを建てるなら パッケージ管理ツールから選ぶだけで、ダウンロードとインストールが終わります。 ただ、実際の操作や運用は SQLを理解しなければ話にならないので、こういったサイトで説明するのは無理です。 私自身、epgrecやmythtvの管理やメンテのために わずかにSQLの使い方を知っているだけで 理解にはかなり程遠かったりします。 そういった限定的な用途であれば、そこだけを学ぶ手がありますし 誰かの指導を模倣すれば済む部分もあります。 しかし、漠然とPostgreSQLの操作を習得するというのであれば 基本から、全部学んでいくしかありません。 それは、そういった書籍が成立するくらい、膨大な情報量です。
ふつうは、数字６桁ではないですか。 yyyymm の形で格納するとして・・・。
中間一致検索は通常indexの対象となりません。 ただし、postgresの場合、pg_trgmで高速化することは可能です。 http://lets.postgresql.jp/documents/technical/text-processing/3#con... それ以外の必要なindexはjoinキーとなっているindexですね。 T_BASE(ID) T_BASE(CODE) これは別のINDEXにする必要があります。 また、題意より T_A(ID) T_B(CODE) はおそらくそれぞれのPRIMARY KEYですので、INDEXは不要でしょう。 ※でないと、同一行が複数出力されます。 ただ、このSQLを実行すると、おそらく無駄にT_AやT_Bをjoinしています。 そこを根本的に直したほうが速度は改善されるでしょう。 そもそも出力したいのはT_BASEであり、T_AやT_Bは確認にしか使っていません。 こういう場合は、EXISTSによる条件結合を行うことで、不要なテーブル結合を防ぐことができます。 SELECT * FROM T_BASE WHERE (入力値 IS NULL) OR EXISTS (SELECT NULL FROM T_A WHERE T_BASE.ID=T_A.ID AND T_A.COL_A LIKE '%入力値%') OR EXISTS (SELECT NULL FROM T_B WHERE T_BASE.CODE=T_B.CODE AND T_B.COL_B LIKE '%入力値') このSQLの場合、入力値がNULLであれば、下の条件は確認しませんのでJOINも発生しません。 また、T_Aの条件にMATCHすればT_Bを重複して検索しません。
まったくバージョンアップされず、放置状態、セキュリティ対策も行っていない、「postgresで使うべきでないツールナンバーワン」phppgadminは、そのままですと、（2014年7月にサポート切れとなり、セキュリティ含めたあらゆるアップデートが停止している）PHP5.3までしか対応していません。 PHP5.6環境では手を加えないと動かないので、PHP5.6をアンインストールして、セキュリティリスクや最新機能が使えないことを自己責任で覚悟のうえPHP5.3をインストールするのが一番簡単でしょう。
PostgreSQLの仕様ではありません。 標準SQLの仕様です。 Oracle,SQL Server,MySQL,postgresqlすべて同様で、文字列を括るのにダブルクォーテーションは使用できません。 "で括るのは、RDBSごとに意味合いが異なります。 ただ、一般にカラム名の大文字小文字がデフォルトで区別されないケースが多いため、それらを「強制的に区別させる」ために""で括ることが多いです。 また、カラム名にアルファベット以外の文字（ひらがな、漢字など）が指定できるRDBSでは、それを明確化するために""で括る必要があるケースもあります。
縦並びを横並びにするには一旦横並びの一人ひとりの行を作って、（ワークテーブル）複数行 最終的にGROUP BYで全部を集計するのが、デバッグもしやすいし簡単です。 一発でできる難しい構文よりも、簡単な構文を作ってチェックできるほうが、私は良いと思います。 あと、「○○君の状況を集計してください。」との個人ごとの要望が来たりするので、 それに応えられるような修正をしたほうが良いですね。
create index時にusingで指定できるインデックスメソッドは１つだけです。 https://www.postgresql.jp/document/9.3/html/sql-createindex.html そのため、btreeとginの両方を指定することはできません。 これはpostgresだけの話ではなく、恐らくどのDBでもそうでしょう。
列名を指定して列数を減らす位しか方法はありません。psql以外を使う方法を模索して下さい。
・linuxに関して .pgpassはカレントではなく、ユーザーのホームディレクトリに置く必要があります。カレントにおいても無視されます。つまり他の回答者さんの回答は明らかに間違った回答です。 また、パーミッションを0600にする必要があり、これ以外の設定ですとファイルは無視されます。 ・Windowsに関して これは別の回答者さんの回答どおりです。また、パーミッションは特に設定する必要はありません。 ただし、linuxもwindowsもPGPASSFILE環境変数でファイルの場所を変更することができます。 つまり場所は固定されているわけではありません。 ・ファイルの形式に関して hostname:port:database:username:password が基本ですが、password以外は全てワイルドカード省略ができます。 そのため、特に理由がないなら hostname:*:*:username:password と、ポートとDBは省略して書くのが普通です。 また、他のpostgresに繋ぐことがない、ユーザーも１つというケース（たとえばＡＰサーバーからＤＢサーバーに繋ぐケース）では *:*:*:password と書くことも…こうしておくと、たとえばＤＢが死んで別の仮想環境にデプロイしたケースや、テスト用のDBNameに切り替えたい／戻したいというときでもパスワードファイルの中身を変更しなくても対応できます。
res（PGresult構造体）をPQresultStatusで確認してPGRES_TUPLES_OKでPQntuplesが0でないならそうでしょう。 あとはPQntuplesとPQnfieldsで二重ループ組んでPQgetvalueで値取るか、PQprintでファイルに出力するかしてください。 ところで、これは基礎中の基礎なので、知らないのは本当に何も知らないといってるに等しいのですが、大丈夫ですか？
左側がカラムでイコール条件なので、右側で入れられるのは単項条件です。 複数入力することはできません。 SQL書かなきゃ無理です。 select * from テーブル名 where 日付>='2015-09-01' and 品番 in('ABCD1','ABCD2','ABCD3') のような簡単なSQLでできますので、SQL書いてみてください。
いわゆるバインドパラメータのことです。 たとえば、ユーザーの入力内容に対してSQLを実行するケースを考えます。 ユーザーが123と入力した場合、 select * from hoge where a='123' というSQLを投げるとして、このSQLを毎回ユーザーが入力した値ごとに生成しなおすのは面倒です。 そのため、そのまま投げるのではなく、 select * from hoge where a=$1 として、後から$1に123を代入したほうが楽ですよね。 これがバインドパラメータです。 なお、バインドパラメータの利点としては、SQL構文と検索条件や入力条件が分離されており、''などで覆うといった処理が不要（上の例だとバインドパラメータは"'123'"という文字列ではなく"123"という文字列）であり、いわゆるSQLインジェクション攻撃に対応できるという点もあります。
起動コストと総コストについてはそれでいいです。 今回のケースでは総コストだけ見ればいいでしょう。 widthに関しては、バイトサイズです。integerなら4バイトなど、カラムごとにサイズが決まります。推定となるのは可変長データを扱うケースがあるためです。 推定コストのrowが実際と乖離しているのはテーブルデータが170行程度とシステムが誤認識しているせいです。 その理由はずばり、vacuum analyzeしてないからでしょう。 このことは総コストでもわかります。結果が11.3というのは１ページのシーケンススキャンの11.3倍コストがかかるという意味です。 ５行しかデータがないのに１１ページも必要なわけがありません。 以上より、テーブルをdeleteなりupdateなりでがちゃがちゃいじって、最終的に５行になったものに対して、統計情報を更新(vacuum analyze)せずにexplainしたせいでおかしな値になったものと考えられます。 推定コストの計算方法はかなり複雑で、統計データを元に計算されます。具体的なロジックはコード見ればわかるでしょう。postgresはオープンソースなんですから。
PostgreSQLの場合はデータ型のTIMEで可能です。 SELECT CAST('18:00' AS TIME)-CAST('9:00' AS TIME)
regexp_split_to_arrayで配列にして、[0],[1],[2]という具合にselectすればできます。 例： select a[0],a[1],a[2] from (select regexp_split_to_array(カラム,'●') as A from テーブル) x
幸福の科学ですね。 殺される心配がないので。
postgresは追記型（※）のため、削除した直後であればpg_resetxlog使って巻き戻すことで復元することが可能です。 ※実際には削除フラグ立てるだけで、データは残っているので。auto_vacuumなどが走ってしまっているとアウトです。 具体的なやり方です。 まずpostgresをpg_ctrlなどで停止させます。 ※ここで物理バックアップ取ってください。 次に、pg_controldataで現在のトランザクションID(XID)を確認します。 pg_resetxlogに-xオプションつけて、現在より前のトランザクションIDを指定し、postgresを起動します。 ※このトランザクションIDは試行錯誤が必要なため、物理バックアップが必要です。
numeric(2)です。 ただ、0~99という値の入力チェックをアプリ側で行える（insert時のexceptionで判定する必要がない）、HDD容量に十分な空きがある、カラム数がそれほど多くない、という条件であれば、integer型のほうがデータ検索速度は速くなります。
PublicKeyにせよModulusにせよ、実体はBigIntegerです。 通常は、データをBigInteger型にして、それをString型に変換した上で、postgresにtext型で格納し、text型で格納したデータをString型で取得した上でBigIntegerにし、PublicKeyやPrivateKey型に変換します。 具体的には keyPair.getPublic().getPublicExponent().toString() keyPair.getPublic().getModulus().toString() などでBigIntegerの文字列表現を取得し、それをpostgresに格納。 postgresからselectした結果をStringで取得して、new BigInteger(String)でBigInteger型にして、RSAPublicKeySpecでPublicKey型に変換。 KeyFactory.getInstance("RSA").generatePublic(RSAPubliKeySpec)でPublicKey型に変換、です。 PublicKey型にせよPrivateKey型にせよ、普通はKeySpecにBigIntegerを渡して、KeyFactoryのgenerateで取得すると思うのですが、逆にそれ以外の方法があるなら、教えて頂けませんでしょうか。
共通表式を使えば、多少は読みやすくなるでしょう。 WITH KeyUser as ( select user_id from logs where hit_time BETWEEN '2015-08-01' AND '2015-09-01' ), KeySession as ( select session_id from logs where user_id in (select * from KeyUser) ) SELECT * FROM logs WHERE session_id IN (select * from KeySession)
ごめんなさい。やりたいことがまったくわかりません。 Index用のディスクスペースが小さいためにリストアできないなら、増分アーカイブもリストアできないはずです。 ※追記型のpostgresの場合、フルリストアでindex再作成するより現状＋増分のほうがファイルサイズが大きくなるので。 そのため、月曜処理が上手く動作するとは思えません。 また、全アーカイブがリストアできないとおっしゃっているにも関わらず、日曜処理でフルリストア（全アーカイブリストア）しているのも意味不明です。 ※全アーカイブというのが日曜＋月曜＋・・・・という意味であれば、上述の通り、現状＋増分のほうがファイルサイズが大きくなりますので、やはりできません。 やりたいことをもう少し整理したうえで教えていただけませんでしょうか。
書いた部分、というのはinsertした部分のことですか？ 主キー重複した場合はどうしますか？ もし、テーブル定義を変えない、重複データも絶対にないというのであれば、 バックアップファイルを作成する際に、pg_dump -aオプションでデータのみダンプしてリストアすれば、入っているデータをそのままに本番用データを追加できると思いますが。 それが無理なら、一度テスト用のテーブルをalter tableでrenameしておいてから本番データをリストアして、insert into select where not existsでテストデータ差分を更新ですかね。
Lockコマンドでテーブルに対してROW EXCLUSIVEロックを発行すればいいのでは？ https://www.postgresql.jp/document/9.2/html/sql-lock.html
一旦、連番部分を縦持ちにしてから、横持ち変換すれば出来そうな気がします。 しかし、こういう書き方をされているということは、最終的なカラム数が不定（＝可変）なんですよね、たぶん。 だとすると全部を１つのSQLでやることを諦めて、最終的なSELECT文を文字列連結で組み立てるのが一番楽にできると思います。
Postgresのドキュメントには目を通しましたか？ https://www.postgresql.jp/document/9.4/html/ddl-constraints.html ＞検査制約では、検査式が真またはNULL値と評価された場合に、条件が満たされることに注意して下さい。 ほとんどの式は、演算項目に一つでもNULLがあればNULLと評価されるので、検査制約では制約対象の列にNULL値が入るのを防げません。 列がNULL値を含まないようにするために、次節で説明する非NULL制約を使用することができます。 と、きちんと記載されています。
postgresの暗号化に関しては、データとシステムの２つがあります。 システムについてはこちらをどうぞ。 https://www.postgresql.jp/document/9.4/html/encryption-options.html データの透過型暗号が必要でしたらこちらをどうぞ。 http://pgsqldeepdive.blogspot.jp/2015/06/postgresql-nec-tde.html 最近リリースされたばかりの機能です。 ただし、こちらを使用する場合、ユーザー定義型を定義する必要があります。 SQLで関数による暗号化・復号化を行うのであれば、既存のpgcryptを使用すると楽です。 http://lets.postgresql.jp/documents/technical/contrib/pgcrypto/ もっとも、アプリで暗号化ロジックを実装したほうが安全と言えば安全ですが。 ※DBサーバーで暗号化・復号化するというのは、SSL化したとしても平文をDBサーバーに送受信しているわけですので、覗き見攻撃食らうと終わります。
PostgeSQLもMySQLもSQLの文字が有るように、SQLと呼ばれる言語を使う、RDBMS（リレーショナルデータベースマネージメントシステム）とも呼ばれるオープンソースのソフトウエアです。SQLはリレーショナルデータベースと言うデーターを一番簡単な構造の２次元の表（テーブル）で持つ事で、簡単に処理出来るように成っています。SQLは文法も簡単で命令数も少ないですが、複雑な事でもいとも簡単にこなせる優れもので、システム開発や保守の生産性が劇的に改善されたので、広く使われるように成っています。ただし、SQLはリレーショナルデータベースを操作する事しか出来ないので、アプロケーションを作るにはプログラミング言語も必要です。プログラミング言語は結構難しいので、私自身は、SQLを扱える簡単な文法のプログラミング言語を作っています。
dowとGENERATE_SERIESの組み合わせになります。 date1とdate2の間の曜日を取得したい場合、以下の構文で曜日番号(0が日曜,0～6)が取得できます。 SELECT date1 + a.i FROM GENERATE_SERIES(0,date2-date1) AS a(i) そのため、たとえば水曜日(dow=3)に含まれているかを判定するには where 3 in(select date1+a.i FROM GENARATE_SERIES(0,date2-date1) AS a(i) とすれば取得できます。 ただ、この方法の場合、毎レコードごとに期間分の使い捨てシリアルテーブルを作成してしまいますので、効率は悪いです。 十分に範囲の広いカレンダーテーブルCAL_TBLを用意して、そこに日付とDOW番号を入れておき、 WHERE EXISTS( SELECT null FROM CAL_TBL WHERE CAL_TBL.date BETWEEN date1 and date2 AND CAL_TBL.dow_val = 3 ) としたほうがスマートでわかりやすいでしょうね。
ご安心ください。空白はインポートされております。 ただ、入っていないように後方の空白を除去して表示しているだけです。 それは、カラムの型がbpchar(=固定長char型)だからです。 固定長char型は指定されたサイズにデータが満たない場合、後方に空白を埋めます。 たとえば固定長４、bpchar(4)のデータに'a'を入れようとしても勝手に'a '（後ろに空白３つ挿入）になります。 出力時にはシステムによって固定長char配列の場合は後方の空白を除去する(trimする)ことがあるだけで、実際には入れたくなかろうと空白は入っています。 ただし、test020フィールドはbpchar(1)ですので、空白を２つ入れることはできません。入るのは１つです。 ※申し訳ありませんが、サイズ指定しておいて、そのサイズを超えたデータを入れる方法はありません。 同様にtest050フィールドはbpchar(4)ですので、空白を２つ入れても４つ入ります。 なお、空白を空白として入れたい、その数もきちんと考慮したいという場合は、固定長ではなく不定長文字列形式（varchar)でフィールドを作成してください。
999超えた場合どうしますか？ 超えない保証があるなら、レコード消した後に setval(シーケンス名,to_char(now(),'yyyymmdd')::bigint*1000); でシーケンス番号をyyyymmdd000から開始するように設定しなおせばいいのでは。
githubにあるswift-db-postgres使えばできます。
すみません、やりたいことがまったくわかりません。 こちらで勝手に解釈しますが、違っていたら指摘してください。 ・PHPを利用してPostgreSQLにアクセスする ・PostgreSQLにはキャラ図鑑データがある ・ユーザーがキャラをゲットした場合、「ゲットしたフラグ(false)」を立てたい ・この場合のテーブル構成とSQLが知りたい さて、キャラ図鑑はキャラIDをキーとしてキャラクターのデータが入っているものとします。 ユーザーはユーザーIDで一意に決まります。 この条件であれば、作成するテーブルは キャラクター取得テーブル（ユーザーID,キャラID）(※連結主キーかつ外部キー) です。 ユーザーがゲットしたら、このテーブルにレコードを追加します。 キャラ図鑑の全キャラに対して、あるユーザーがゲットしているかどうかを知りたければ SELECT A.キャラID,CASE WHEN B.キャラID IS NULL THEN true ELSE false END FROM キャラ図鑑 A LEFT OUTER JOIN キャラクター取得テーブル B ON (A.キャラID=B.キャラID AND B.ユーザーID=[知りたいユーザーのID]) とすればいいでしょう。
固定ＩＰ振って、pg_hba.confで自分のＩＰアドレスを接続可能に設定して、ＯＤＢＣで接続すればいいです。 pg_hba.confの入れ替えはpostgresqlサービスの再起動を必要としない（reloadでいい）ので、pg_hba.confを２種類用意しておき、メンテナンスのときだけ入れ替えてreloadし、メンテナンス終了後に戻してreloadすればより完璧でしょう。
なんでphpPgAdminなんてメンテもろくにされてない危ないツールを使うんですかねぇ…あれは２年も前に放置されたプロジェクトです。 セキュリティ上も安全とは思えませんので、自力でコード読んでメンテナンスできないのであれば、別のツールを使うことをお勧めします。 この件も恐らく「ユーザー名と同じＤＢ以外には接続できない」というphpPgAdminのconfigミスが原因と思われます。 config.inc.phpの $conf['owned_only'] = true; を $conf['owned_only'] = false; にしてみてください。
何も複雑なことをする必要はありません。 like文中の_は１文字ワイルドカードであることを利用すればいいのです。 php側で初めに"______"という文字列を作って、その文字列のn番目を1に変更します。 たとえば1,3,4なら"_1_11__"という文字列になります。 この文字列を使って SELECT id FROM tbl_number where f_num like '_1_11__'; とすれば、簡単に値が取れます。
テクニック使わないと普通のSQLでは出せないです。 shop_idが文字列型ならcoalesce使って'NULL'という文字列に置換するという、なんちゃってSQLでごまかせるかもしれませんが、数値型ならそれもできません。 この場合、２つのSQLに分けて、UNION結合するほうがSQLとしてスマートに書けます。 select shop_id,sum(uriage) from テーブルA where テーブルA.shop_id in(select id from テーブルB) group by shop_id --null以外の列の出力 union all select null,sum(uriage) from テーブルA where not exists( select null from テーブルB where テーブルA.shop_id=テーブルB.id ) --nullは固定値扱いなのでgroup by句は不要
あるユーザーに対して、購入した最初の日付を求めるSQLは select customer_id,min(ins_datetime) from テーブル group by customer_id; と、簡単に書けます。 問題は、「月ごとの最小購入日」であること。 一件難しそうに見えますが、これは「顧客ごと、月ごと」を集計単位とした「最小購入日」です。 postgresの日付関数date_partで、月の値を取り、それを集計単位にすればいいのです。 具体的には select customer_id,min(ins_datetime) from テーブル group by customer_id,date_part('month', ins_datetime) ; となります。
select A,B from A inner join B on A.店番号=B.店番号 and A.支店番号=case when B.支店番号 is null then ' ' else B.支店番号 end です。
リクエストありがとうございます。 偏差値的に学生がついてこれるか問題ですね。 その前についてこれない教授もいるようです。
リクエストありがとうございます。 あれば便利だと思います。
けっしてpostgreSQLでないといけないというものではありません。
リクエストありがとうございます。 そういったことは節操がない事ですね。 バレるだけだと思いますよ。 札幌の大学教授の事でしょうか。
リクエストありがとうございます。 そういったことは節操がない事ですね。 バレるだけだと思いますよ。 札幌の大学教授の事でしょうか。
ガラケー参加しかできない人ですから無理だと思いますよ。
リクエストありがとうございます。 世界標準というものでもないと思います。 必要に応じて利用すればいいものですね。
2個の空白の文字列およい5個の空白の文字列になります。 実際には''::bpcharの結果は''（0個の空白の文字列）となりますが、 その後にchar(2)やchar(5)へ''を代入した場合、固定長列までは空白が入るため、結果として空白2個と空白5個が入ることになります。
http://blog-ja.chatwork.com/2015/01/codetag-release.html
psqlなら \d テーブル名 で同等の機能です。
バックアップの形式が不明（拡張子じゃ何もわからない）なので回答しずらい面がありますが一応回答しておきます。 バックアップ時のフォーマットとして、「Plain」を選択していた場合は何も考えることはありません。 SQLスクリプトのアップロードで復元することができます。 時間がかかるのは仕方ないと諦めてください。あれはそういうものです。 ただしgzipで圧縮できるなら少し楽です。 それ以外の場合、一度バックアップファイルをプレーンテキストに直してから上述の手順でアップロードすることになります。 手順ですが、PgAdminIIIインストールフォルダにpg_restore.exeというツールが入っていると思います。これを使います。 コマンドプロンプトで [フォルダパス]pg_restore -f 出力ファイル名 backupファイル とすると、出力ファイル名のファイルができます。 これは「Plain」でのバックアップファイルと同じものですので、あとは同じ手順でリストアできます。 ただし。 そもそもphpPgAdminは２年も前に捨てられて、セキュリティホールもバグも直されてないプロジェクトです。 9.3は当然サポート対象外です。 それを覚悟の上で行う、つまりエラーが出たり乗っ取られたりしても仕方ないと理解した上で使ってください。 ※少なくとも私はあのツールは怖くて業務では使えません。
リクエストありがとうございます。 当初回答していたのも関わらず、責められて回答をとり消すや否や 投票に回しました。 イシモは小っちゃい人間ですね。
リクエストありがとうございます。 話を聞いても日本語が理解できないのではないでしょうか。
可能性はありますがどうなんでしょう。 クラウド型だとはおもいますけど。
INFOはユーザーのアクションに対するログ（例えばvacuum analyzeを実行した、など）、NOTICEはDBシステム側が行ったアクションに対するログ（例えばauto vacuum wrap aroundなど）を記録するという意味ですが、大きな違いはないです。 ※あくまでプログラム上のログ出力レベルがどうかという話なので。 SQL文を記録するためにはlog_statementパラメータを変更する必要があります。 設定値は以下の通りです。 none SQLは記録しない ddl DDL文(createとかdropとかalterとか)を記録する mod ddl+SQL文(insertとかselectとか)を記録する all mod+α(modとの違いは具体的には不明。mod指定するくらいならall指定するので。)
insert文は一般のＳＱＬ構文です。 insert into select構文を使用します。 例 insert into テーブル select文(内部結合や外部結合を用いて仮想ビューにしても大丈夫） delete文は同様に一般のＳＱＬ構文です。 in句やexists,not exists句などを使用することになります。 外部結合は論理的に無理です。できるＤＢは恐らくこの世に存在しません。 例 delete from テーブル where (カラム1,カラム2)in(select カラム1,カラム2 from テーブル２) update文はpostgresの独自拡張、update fromを使用します。 外部結合は論理的に無理です。できるＤＢは恐らくこの世に存在しません。 例 update テーブル a set カラム1=b.カラム1,カラム2=b.カラム2 from テーブル2 b where a.主キー=b.主キー
正規表現なら if test ~ '[0-9]+/[0-9]+' then でできると思います。
リクエスト忘れてますよ。 再度投稿し直したらいいですね。
リクエストありがとうございます。 腱鞘炎を押しながらガラケーですからpostgreSQLは利用してませんよ。
リクエストありがとう( ^ ^ )/■ シロカワさんの偽物で騒いでますね☆〜（ゝ。∂） 久々に偽タッツがウロチョロしてるのは危険をかんじてるからでしょうか！(◎_◎;) イシモは存在自体が悪ですよね（＾＿＾）☆
リクエストありがとうございます。 イシモの自作自演ならpostgreSQLを使用しなくてもわかりますね。 お仕置きですね。
ここを参考にしましたが、 http://stackoverflow.com/questions/3828842/how-to-like-two-columns-... 以下のsqlでできると思います。 select a.name from a, b where a.name like '%' || b.name || '%'
Yahoo！japanは違うシステムを使っていると思いますよ。
PhpPgAdminに期待し過ぎです。 あれにそんな機能はないです。
比較対象と、0010 とのANDを取って、 それが 0010 になれば、少なくとも比較対象の 左から3ビット目は 1 であることになります。 select * from hoge where bitv & B'0010' = B'0010'
それじゃわからないです。 実際のSQLのサンプルをください。
ポートスキャナ、アンチウィルスソフトなど、なんらかの監視ツールなどで5432に定期的に接続していませんか。 これは英文では"incomplete startup packet"というメッセージで、5432ポートにTCP/IP接続しておきながら、その後の手順を踏まずに切断した、といったケースで発生します。
リクエストありがとうございます。 大量の捨てIDに隠れたり自作自演BAをID非表示にして隠すのはイシモナミの常套手段ですね。 知恵袋のBAに必死になっているセコく暇な札幌のジジイです。
primary keyが存在しているかのチェックは以下のＳＱＬとなります。 select constraint_name from information_schema.table_constraints where constraint_catalog='memodb’ and constraint_schema='public' and table_name='riku_table' and constraint_type='PRIMARY KEY' これで設定されていればプライマリーキー名（制約名）が返ってきます。 制約条件（外部キー制約や主キー制約など）を取得するＳＱＬは以下の通りです。 select constraint_name,column_name from information_schema.constraint_column_usage where table_catalog='memodb' and table_schema='public' and table_name='riku_table' これで、制約名の一覧が取れます。ただし外部キー制約なども返ってきてしまいますので、上のＳＱＬと組み合わせて select column_name from information_schema.constraint_column_usage where table_catalog='memodb' and table_schema='public' and table_name='riku_table' and constraint_name=( select constraint_name from information_schema.table_constraints where constraint_catalog='memodb' and constraint_schema='public' and table_name='riku_table' and constraint_type='PRIMARY KEY') とすれば、主キーが設定されているカラム名の一覧が取得できます。 ※constraint_nameがinでなく=なのは、１テーブルに対して１主キーが約束されているためです。
MySQLはマルチスレッド PostgreSQLはマルチプロセス といったことぐらいしか知りません。
キクチ教授の事ですか。 それなら何も考えず毎日をだらだら知恵に入り浸って過ごしていますよ。
ユーザーは認知症のイシモのようですが利用どころか知らないと思います。
UPSERTに関してはpostgres 9.5にて導入される予定です。 https://wiki.postgresql.org/wiki/UPSERT それまではwith句を使用してupsertを実現する必要があります。 こちらに記述があります。 https://postgresql.g.hatena.ne.jp/umitanuki/20110513/1305295805 WITH upsert AS (UPDATE target SET val = source.val FROM source WHERE target.id = source.id RETURNING source.id) INSERT INTO target SELECT id, val FROM source WHERE id NOT IN (SELECT id FROM upsert); これを説明すると、updateされたidの配列を返すupsertという命令をwith句で定義しておき、そのidでないidを持つレコードをinsertする、という仕組みになります。
select '25:30'::interval-'11:00'::interval →’14:30:00’
もしかして、ＤＢサーバー（postgresがインストールされているＰＣ）と、違う場所からデータを流し込もうとしていませんか？ copy文で指定できるファイルの場所は「ＤＢサーバー」上の場所です。 ※そのＳＱＬ文を受け取ったＤＢサーバーからはローカルＰＣ上のファイルを見ることはできませんので。 tsvファイルの先頭に copy table_A from stdin; という一文を入れてpsqlで実行するという方法もあるのですが、今回はもう少し簡単なやり方を説明しますね。 PgAdminIIIのオブジェクトブラウザで、table_Aを右クリックして「Import」を選んでください。 ファイルオプションはtext、エンコーディングはローカルの文字コードセットです。 Misc.Optionsに区切り文字を指定する部分がありますので、デリミターを[tab]にします。 もし、NULL文字を\Nにしているのであれば、NULL OptionsのNULL stringを\Nと設定してください。
oidは互換性上のものです。 昔はレコードをoidというユニークIDで管理していましたので、レガシーシステムでoidに依存するようなケースでは必要なため残してあるだけです。 今は不要ですので、without oidsをつけたままにしたほうがいいです。 なお、よほど古いpostgres(8.0以前)でない限り、create tableは明示しなくてもデフォルトでwithout oidsになります。
このへんを参考にどうぞ。 http://devlights.hatenablog.com/entry/20080226/p1
「うまくいかない」とは、どういうことでしょうか？ 何かエラーメッセージが出るのか →だったらそのメッセージが分からないと助言できない エラーは出ないが、意図しない実行結果になる →どんな実行結果か分からないと助言できない おそらく後者である、かつ、意図しない結果とは 「取得したレコードの並びがおかしい」 であると想定して回答すると、多分、除算の結果に対して小数点以下が切り捨てられ、整数として比較されてしまっているのだと思います。 たとえばAレコードは、 Yes=51、Total=100 だったとする。 order by では、 51/100 = 0.51 として評価してほしいところだが、小数点以下が切り捨てられると 0 になってしまう。結局どのレコードも 0 なので、order by の意味がない、ということでしょう。 対策としてすぐに思いつくのは、切り捨てられないように、十分に大きな値を掛けることです。 先の例だと、 order by 100 * Yes / Total にしておけば、51という値が得られます。（どんな値を掛ければ安全かは考えてください）
これといった疑問がないのかもしれませんね。 おかげで過疎ってます。 というより知恵自体人気がありません。
企業の経営者が、経営をどうしていけば良いかの判断をするにあたり、その判断を手助けするための情報やデータを提供するコンピュータ・システムを、「意思決定支援システム」と総称しています。 以下の記事が参考になると思います。 http://itpro.nikkeibp.co.jp/article/lecture/20070427/269747/
リクエストありがとうございます(￣^￣)ゞ 偽タッツも質問者も海蛇二匹と一緒にGW中に成仏していただくようにご協力願います。
リクエストありがとうございます。 北海道や東北地方で使われる方言ですね。 イシモは札幌市在住ですよ。
to_char(numeric,text)でtextに'9'指定したら、先頭に空白が入ります。 ASCII(text)はtextの第一文字コードを判定するため、空白のASCIIコードが返ります。 先頭に空白を入れたくないなら、 TO_CHAR(1,'FM9') のように、先頭空白除去のFM添字を記述する必要があります。 このことははPostgresのマニュアルにも書かれています。 https://www.postgresql.jp/document/8.4/html/functions-formatting.ht...
postgresqlにNumber型はありません。
リクエストありがとうございます。 postgreSQLを使わなくてもすぐにわかりますね。
PostgreSQLはマルチプロセス、MySQLはマルチスレッド PostgreSQLはRDBMSに求められるものが過不足なく搭載されています。 MySQLは仕様がアンバランスだったり無駄が多かったりするが大規模システムでスケールさせる上で性能を限界まで引き出せます。 データのカッチリ感はPostgreSQLが勝ると思います。 歴史的にMySQLはデータの制約がゆるいです。 全般的に、PostgreSQLはバランスよく筋肉質で優等生。これからRDBを学ぶという人にはベストだと思います。 最近Hacker Newsなどでみる限りトレンドはPostgreSQLにあると思います。 MySQLは、学ぶことが多くちゃんと使えるようになるまで学習が長いです。 本格的なサービスを運用していると、細かいところでMySQLでないと厳しい場面が結構あり熟練度の高い人にはMySQLと思います。
postgresに限らず、unionはカラムの数と型を合わせる必要があります。 そのため、selectで省略することはできません。 可読性を高めるのであれば、たとえば create temp table tmp_B (like テーブルA); insert into tmp_B(A,B,C) select A, B, C from テーブルB; select * from テーブルA union select * from tmp_B と、一度仮想テーブルに入れる方法あるいはAからZまでのカラムを入れたテーブルBのVIEWを作って、それをUNIONするという手になると思います。
リクエストありがとうございます。 渡航費がかかりそうですからそこまではと躊躇してしまいます(//▽//)
リクエストありがとうございます。 海外視察や研究は多いと思います。
同じ状況になった事が無いので、これに対する対応方法は分かりません。取りあえず、前回インストールの状態を全て手動で消して再インストールしてみてはどうでしょうか。まず、「プログラムと機能」にPostgreSQLが有ればそれを削除します、次に、インストール時作られたと思われるディレクトリを全て削除し、ファイル名を指定して実行で、regeditを実行しレジストリエディターの「編集」、「検索」でpostgresqlを検索し不要と思われる物を全て削除し再インストールしてはどうでしょうか。
IPV6アドレスで接続しているのでは？ listen_addresses = '0.0.0.0' ※↑IPV6をはじく設定 でエラーメッセージは変わりますか？ また、A端末のpg_logにアクセスエラーログは出ていますでしょうか。
DB管理は大切ですね。 私は前はフロッピー・ディスクを使ってましたが 今はHDの容量UPで何とかできています。
リクエストでないところ申し訳ございません。 検索したらすぐにわかりますよ。 http://chiebukuro.search.yahoo.co.jp/search?fr=slv1-tbtop&ei=UTF-8&...
リクエストでないところ申し訳ございません。 ＢＡ乞食イシモは自作自演カテマスが好きでＩＤなんぞに執着していますね。
リクエストでないところ申し訳ございません。 あまり好きではありませんね。
>ホスト名では出来ません。 ホスト名からIPアドレスを取得できないと思われます。HOSTSファイルにホスト名とIPアドレスの対比表を登録します。 >また、クライアントマシンから接続が一切受け付けられません。 >デフォルトでそもそも接続できないものでしょうか？ デフォルトではネットワークからは接続出来ないように成っています。 pg_hba.conf内の「host all all 127.0.0.1/32 md5」 を「host all all 0.0.0.0/0 md5」（全IP可）等に変更して再起動します。また、古いバージョンの場合はpostgresql.conf内に 「listen_addresses = '*'」を設定しないと動きません。 >また、別の内容にはなるのですがPostgresのDBにある全部の表名を >取得したいのですがどのようにやるのが手っ取り早いでしょうか？ 表名はpg_tablesのtablenameです。
知恵袋ではpostgreSQLは使われていないと思います。
中学生ともなると興味がある人には十分可能だと思います。
桃と言うのは女性のお尻です。 川から流れて来たと言うことで、つまりは捨て子を拾ったと言う事です。 その子が 野蛮人に育ったので、海賊を襲撃させて海賊の上前をハネテやったと言うお話です。
NULLを空白にする場合は CREATE OR REPLACE FUNCTION tbl_function() RETURNS TRIGGER AS $tbl_function$ BEGIN IF NEW.data1 IS null THEN New.data1:=' '; END IF; IF NEW.data2 IS null THEN New.data2:=' '; END IF; RETURN NEW; END; $tbl_function$ LANGUAGE plpgsql; DROP TRIGGER tbl_trigger on tbl; CREATE TRIGGER tbl_trigger BEFORE UPDATE OR INSERT ON tbl FOR EACH ROW WHEN (NEW.data1 is null or NEW.data2 is null) EXECUTE PROCEDURE tbl_function(); です。
あそこのドキュメントをうのみにして、postgresのbinディレクトリにpgCSVImport.exeを置いた、とかそういう話ではないかと。 "$$PGBINDIR"が指す場所は、"the PostgreSQL bin directory."ですが、PgAdminIIIをpostgresと別にインストールした場合、pgadmin3.exeの置かれている場所、通常は"PgAdminIII\バージョン\"直下になりますので、そこにpgCSVImport.exeとか、古くて今のpostgresで動くかわからない同梱されているnpgsql.dllとかを配置すればプラグインが表示されると思います。
自作する必要はありません。既存の関数の組み合わせで十分できます。 例３） select position(substring('aabbccaabbcc' from 'b.*c') in 'aabbccaabbcc') 例４） select position(substring('aabbccaabbcc' from '[b-c]') in 'aabbccaabbcc')
そんなんできひんでな
PostgreSQLは他DBのように、データ容量つまりデータベースやテーブルで使用する容量の上限、という設定がありません。上限は「メディアに空きがある限り無限」です。 データ容量が無限であるため、空き容量という概念もなく、データベースの使用率、テーブルの使用率という概念もありません。 空き容量を見るならlinuxならduやdfコマンドで見ることになります。
使い方がマッチすればうまく利用して遊べると思います。
わざわざ使わなくても直接違反報告で十分ですよ。
私は主にOracle派ですね。
知恵ノートのデータベース管理をするのもいい案ですね。
基本的なものになりますから重要ですね。
WITHで最初にSELECT文を設定します。 例： WITH A(col1~略~) AS(SELECT col1~略~ FROM table1) SELECT *, (SELECT col1 FROM A AS A1 WHERE ~中略~) FROM A;
大変重要だと思います。
convertではsrcencodingの指定が必要となります。 たとえばUTF-8からSJISへのコンバートの場合、 convert(kokyaku.furigana,"UTF-8","SJIS") と記述します。
データベースですから使い方によってゲームなどで遊べると思います。 ゼンコウジはまず、あいうえおから勉強ですよｗ
知恵袋の違反報告に別にPostgreSQLを利用する必要はありません。 フォームから違反報告すればいいだけですよ。
コンピューターベースは基礎的なコンピューターの基礎的部分であったり情報の基礎であったりで重要です。
視覚、嗅覚、味覚なので、「聴覚」･･･兆（1兆？）かなぁ？
最後の一文字は「に」ですよ
リクエストありがとうござまいます。 postgreSQLは私は利用する部署にいません。 他の部署の人が利用してますね。 イシモは嘘つきだったのでクビになって長い間無職ですね。
リクエストありがとうござまいます。 postgreSQLは私は利用しませんが他の部署の人が利用してますね。 イシモは無職廃人です。
データベースは重要な部分ですね。 基本になりますから。
postgreSQLって複雑ですが理解すればわかりやすいものだと思います。 時間が少しかかるかもしれません。
勉強すれば、だいたいのことまでわかると思います。 おっしゃる通り慣れですね。
虹じゃないですかね？
▫️ですね 千円さつが当てはまります。
リクエストありがとうございます！ SQLはあまり使いませんですね、ましては仕事には使いません。
御指名ありがとうございます。 PostgreSQLでググれば宜しいのです。
もし、何かを作る目的がある趣味なら少しは楽しいかもしれませんね。 地味な作業です。
Solarisは標準でPostgreSQL8.1がインストールされているらしいですね。/usr/binにおいているのがコレなので、優先されてしまうようです。 pkginfoで確認して、pkgrmコマンドで消せると思いますが、手順を示す資料が少ないような気がします。 https://blogs.oracle.com/yappri/entry/postgresql ここに8.1と8.2の混在方法が書いてあるので、8.2を9.3に読み替えてはどうでしょうか？ たぶんいけると思います。
共通表式Xの結果は、以下の通り。 a | b | pair_nbr --+--+----------- 1 | 2 | 1 1 | 1 | 2 2 | 4 | 3 2 | 3 | 4 5 | 5 | 5 5 | 3 | 6 5 | 1 | 7 7 | 2 | 8 9 | 0 | 9 11 | 2 | 10 SQL本体の動作を説明すると、 「Xから情報を抽出する。ただし、自分より若いpair_nbrのレコードを見たとき、項目aまたはbのいずれかに、自分と同じ値を持つレコードが存在してはならない」 (7,2)について当てはめると、 「Xから情報を抽出する。ただし、自分（pair_nbr=8）より若いpair_nbrのレコード（pair_nbr=1～7）を見たとき、項目aまたはbのいずれかに、自分と同じ値（a=7, b=2）を持つレコードが存在してはならない」 さて、どうでしょうか？ pair_nbr=1に、b=2のレコードが存在しますよね。だから、「存在してはならない」という掟に反するので、(7,2)は抽出されないわけです。 (11,2)も同様ですね。
レンタルされるサーバーに問い合わせるのが良いかと思いますが、 可能不可能で言えば、可能かと思います。 ちなみに、私の開発用マシン１台には、 MySQL4.1 MySQL5.5 Oracle11g PostgreSQL9.2 が共存（同時にサービス起動）しております。 複数のWebサイトを１つのレンタルサーバーで構築する場合、 同一データベース（異なるユーザ）で構築する場合もあれば、 異なるデータベース（異なるデータベース名）で構築する場合もあります。 構築されるシステム設計（使いまわせる等）次第かと。
うちは、今日は鍋です！！！！！！！！！！！！！！！！！
デフォルトのPgAdminIIIが優秀です。 テーブル定義も見られますし、SQLの実行もできます。
一番最初のレコード、というのはカラムCが同じで、カラムAが最も小さいレコード、という意味でいいのでしょうか？ その場合、このような考え方をします。 １．集計は、カラムCをキーにして、カラムDとカラムEの合計を出す。 ２．表示するのは、カラムCごとの、カラムAが最小となるカラムAとカラムBとカラムC。 １．のSQLは SELECT カラムC,SUM(カラムD),SUM(カラムE) FROM テーブル GROUP BY カラムC で求まります。 ２．のSQLは若干面倒ですが、 SELECT カラムA,カラムB,カラムC FROM テーブル WHERE カラムA IN(SELECT MIN(カラムA) FROM テーブル GROUP BY カラムC) ※postgresqlの場合、INが高速に処理されますので、EXISTSにする必要はありません。 これらをくっつけて SELECT A2.カラムA,A2.カラムB,A2.カラムC,A1.カラムD,A2.カラムE FROM ( SELECT カラムC,SUM(カラムD) as カラムD,SUM(カラムE) as カラムE FROM テーブル GROUP BY カラムC ) A1,( SELECT カラムA,カラムB,カラムC FROM テーブル WHERE カラムA=(SELECT MIN(カラムA) FROM テーブル GROUP BY カラムC) ) A2 WHERE A1.カラムA=A2.カラムA ORDER BY A2.カラムA というSQLができます。 なお、高速化したい場合は、カラムAに対するPRIMARY KEY INDEX以外に、カラムC単体でindexを貼ったほうがいいです。
NPGSQLのnant見るとCFに関する記述があるので、CF非対応とは思えませんが。 https://github.com/npgsql/npgsql/blob/7c449dc26634bf7866cdc6f532858... あとはdotConnect for PostgreSQLという有償版製品がCFに対応していたはず。
order by句に列挙する要素は、項目名称だけでなく数式を書くことも可能なので、以下のように出来ます。 項目名を a,b,c とします。 order by a, case a when 0 then b else c end ただし、bとcの型が違うと直接比較できないケースが発生します。 その場合は、適当な型に変換して、比較が可能なように記述してください。 たとえば、こんな感じ。 order by a, case a when 0 then convert(varchar,b) else convert(varchar,c) end
SQLが間違っています。 postgresの場合はUPDATE FROM構文を使用します。 具体的には以下のように記述します。 UPDATE "売上テーブル" SET "移動売上計画額" = "売上合計ビュー"."移動累計計画" FROM "売上合計ビュー" where "売上テーブル".部門 = "売上合計ビュー".部門 and "売上テーブル".拠点 = "売上合計ビュー".拠点 and "売上テーブル".日付 = "売上合計ビュー".日付 ;
動作未確認です。 WITH Qry_A as ( select tbl_A.*, -- idの塊ごとに、日付の降順で連番を振る。最新が1、直前世代が2となる row_number() over (partition by id order by 日付 desc) as SEQ from tbl_A ) SELECT NewQ.id, NewQ.日付, NewQ.商品名, NewQ.商品コード, OldQ.日付, OldQ.商品名, OldQ.商品コード FROM -- 世代をずらして結合する Qry_A NewQ left join Qry_A OldQ on NewQ.SEQ + 1 = OldQ.SEQ WHERE -- 必要なのは最新（および結合された直前世代）情報のみ NewQ.SEQ = 1
リクエストありがとうございます。 たぶんそうでしょうね。 暇人ジジイはこの程度の事しか出来ないんですね。
ここでいう「0」とは、 「where条件に合致しなかったidは、0件として数える」 という意味でしょうか？それならば、 SELECT Key.id, coalesce(Dat.CNT, 0) as 件数 FROM (select distinct id from table) Key LEFT JOIN ( select count(*) as CNT from table where 抽出条件 group by id having count(*)>=0 and count(*)<=5 ) Dat ON Key.id = Dat.ID
試してみましたが、通りますね… 一応 http://docs.aws.amazon.com/ja_jp/redshift/latest/dg/r_CURRENT_TIMES... ＞CURRENT_TIMESTAMP は廃止された関数です。代わりに GETDATE() または SYSDATE を使用します。 となっておりますので、 to_number(to_char(getdate() , 'yyyymmddhh24') ,'9999999999') to_number(to_char(sysdate , 'yyyymmddhh24') ,'9999999999') あるいは to_char(getdate() , 'yyyymmddhh24')::integer to_char(sysdate , 'yyyymmddhh24')::integer を使うのが良いかも知れません。
100万程度のレコード数。 サーバー用のDBMSなら、なんでもいいと思う。 それよりも、サーバーのスペックの方が重要じゃないですか？
基本的にpl/pgsql（というか、postgresは）はグローバル変数を持ちません。 一応postgresql.confに記述することでグローバルクラスを使用することはできますが、いろいろと制約がありすぎてかなり面倒です。 ※例外としてpl/perlでは%_sharedというグローバルハッシュを保持しているため、そちらに値を入れておくことでグローバル定数を実現することができます。 詳しくはpostgresqlのドキュメントを見てください。 それ以外の方法ですと、やはりテーブルからのselectを実行する関数を作るしかないでしょうね。 最近のpostgresはJSON型が使えるので、JSON型でselectするようなstaticなfunctionを作るほうが楽かもしれません。 たとえば9.3なら select '{"sub_repair":"1","sub_estimate":"2","sub_purchase":"3"}'::json->>arg みたいな感じですね。 ただ、お使いのpostgresは8.x系だったと思いますので、以前のjpugで同様の話題についてMLで話題になっておりましたので、ご参考までにそちらのログURLを記載します。 http://ml.postgresql.jp/pipermail/pgsql-jp/2002-June/001365.html http://ml.postgresql.jp/pipermail/pgsql-jp/2002-June/001417.html
質問が見つかりませんね！(◎_◎;) 削除もしくは取り消されたのでしょうか( ^ ^ )/■ まあ性格的に取り消すはずがないので削除されたのでしょうねヽ(￣д￣;)ノ=3=3=3
