んーと…まず、イベントハンドラはhead内のスクリプトで設置しているので、onclick属性は必要無いですよね。 > data : { > //ここに何かを入れる > } ここで通信先に送るデータを指定できますので、 data : { val: 2015 } このようにkeyとvalueを入れておけば、データとして送られます。もし、例えばp要素が複数あって、clickするp要素によって送るデータを変えるのであれば、 <p data-val="2015">2015</p> <p data-val="2016">2016</p> <p data-val="2017">2017</p> 例えばこのようにdata-*属性を使って独自のデータを埋め込んでおき、 data : { val: $(this).data("val"); } 送るデータをclickされたp要素から取り出すとかとか。
> for (var i = 1; i <= school.length; i++) { > $('#gakkou').append('<option value="' + i + '">' + data[school[i]]+ '</option>'); > } オブジェクトを走査するときはfor...inを使ってください。配列と違い、lengthを得られないからです。 jQueryには$.eachがあるので、これを使っても構いません。 $.each(data[school], function(i, v) { $('#gakkou').append('<option value="' + i + '">' + v + '</option>'); }); とか、 for (var i in data[school]) { $('#gakkou').append('<option value="' + i + '">' + data[school][i] + '</option>'); } こんなんでいかがでしょうか。
こんにちは <form>で囲むと<form>のネームと<select>や<input>のネームを組み合わせてvalueを取得します。 取得した値とセレクトボックスで選択した値をif文やスイッチ文などで比較します。 比較して合っていればインプットボックスの値を代入します。 <!DOCTYPE html> <html> <head> <title>select name="omosa"</title> </head> <body> <form name="selbox"> <select name="omosa" onchange="ch()"> <option label="選択してください" value="">選択してください</option> <option label="10kg以下" value="103">10kg以下</option> <option label="25kg以下" value="102">25kg以下</option> <option label="50kg以下" value="101">50kg以下</option> <option label="75kg以下" value="100">75kg以下</option> <option label="100kg以下" value="99">100kg以下</option> <option label="125kg以下" value="98">125kg以下</option> <option label="150kg以下" value="97">150kg以下</option> <option label="175kg以下" value="96">175kg以下</option> <option label="200kg以下" value="95">200kg以下</option> <option label="225kg以下" value="94">225kg以下</option> <option label="250kg以下" value="93">250kg以下</option> <option label="275kg以下" value="92">275kg以下</option> <option label="300kg以下" value="91">300kg以下</option> </select> <p>このセレクト内容で91を選択したときは</p> <p>このセレクト内容で92を選択したときは</p> <input type="hidden" name="product_id" value=""> <input type="hidden" name="category_id1" value=""> </form> <script type="text/javascript"> function ch() { //セレクトボックスの値を取得 var sentaku = document.selbox.omosa.value; //比較してinput type="hidden"に値を代入 switch (sentaku) { case "91": document.selbox.product_id.value = "27 /"; document.selbox.category_id1.value = "102"; break; case "92": document.selbox.product_id.value = "26 /"; document.selbox.category_id1.value = "103"; } //alertでinputのvalueを確認 alert(document.selbox.product_id.value); alert(document.selbox.category_id1.value); } </script> </body> </html>
>oshieteyo649さん2016/8/613:20:03 >Movable Type Pro version 4.27-jaで行間を狭くする方法を教えてください。 これだけしか開示できない場合は、フォントサイズを小さくする事くらいだと思います。
おはこんばんにちゎo(＾－＾＊ ■■■ リアルタイムで監視 ■■■ 監視したい変数が、 どういう使われ方をしているのによりますが、 大抵の場合は、 その変数が変更されるコードが書かれている位置で監視できます。 まず、 変数の値を表示するためのブロックを、 HTML で適当な位置に用意します。 style 属性で「position:fixed」を使えば、 変数の表示を左上に固定できます。 /──────── <div id="variable_view" style="position: fixed; left: 0px; top: 0px; z-index: 9999;" ></div> ────────/ あとは、 Javascript のコードで、 変数が変更されるコードが書かれた場所で、 /──────── document.getElementById("varialbe_view").innerHTML = 変数; ────────/ これで、 リアルタイムで変数の変化が監視できます。 ■■■ 確認したいときだけ監視 ■■■ リアルタイムで監視する必要がないのであれば、 Google Chrome や FireFox の開発者ツールでも、 変数の値を確認できます。 Google Chrome であれば、 [ F12 ] キーで開発者ツールを開いたあと、 いちばん上のメニューで「source」のタブを開けば、 「Watch」っていう欄が見つかるので、 その「Watch」のタブを開きます。 そこには、 ページで使われている変数の一覧が、 階層ツリー状に表示されているので、監視したい変数を探しましょう。 監視したい変数がそこにない場合は、 「Watch」欄の上側にある「+（add expression）」のボタンから、 監視したい変数を追加しましょう。 「Watch」欄に表示されている変数は、 リアルタイムで値の更新はされません。 欄の上側にある更新ボタンを押したときだけ、その表示値が更新されます。
コードの初歩的な間違いがたくさんあります。 html,JavaScriptの勉強をして修正してください。
無償ということなら IDE（統合開発環境） ・Visual Studio 2015 Community ・netBeans ・Eclipse Editor ・vi ・Emacs ・Atom ・SAKURA Editor ・EmEditor Free 好き好きもあるので気に入ったものでいいと思います。 自分的にはWindowsの「メモ帳（Notepad）」はあまりおすすめしません。 HTMLの文字コードは「UTF-8」が基本になってきてますが、「メモ帳」で「UTF-8」で保存すると必ずBOM（Byte Order Mark」というものが先頭につき、これをオプションで解除できません。 「UTF-8」自体BOMは不要な仕様で誤動作の原因になる場合があります。 http://www.solidpanda.com/book/article/944/ あと、エディタとしても「メモ帳」の機能は貧弱です。「正規表現」で検索・置換もできない。行番号の表示もジャンプもできない。 無償で使えるエディタがあるのに、あえて「メモ帳」を使う理由はないと思います。
表示してソースを確認した際のこの部分とは、 <script>～</div>の部分がすべてソース内に存在しない状況なのでしょうか。 そうなると、ここのコードが悪いのではなく、 $arrRet.category_image に値が設定されなくなっていることが原因になりますので、その原因を特定しなくてはいけなくなります。
消すことだけを考えるのでしたら tr.append('<td>' + '<label class="hiduke'+v+'">'+$("#tekisuto").val()+'</label>' + '<input type="button" id="sakujo" value="削除" class="sakujo'+v+'"></td>'); 上のように↑書かれていらっしゃる部分を 次のように↓書き換えれば良いだけのようですよ。 tr.append('<td>' + '<label class="hiduke'+v+'">'+$("#tekisuto").val()+'</label>' + '<input type="button" id="sakujo" value="削除" class="sakujo'+v+'" onclick="$(this.parentNode.parentNode).remove()"></td>'); ただ， class名(連番の部分)は，その後どうするのか知りませんが。。。
>study_cat39さん2016/8/1322:28:48 >jQueryはライブラリの一種ですか？ はい。
ダブルクオーテーション内は、ドットじゃなくてカンマなんですよね？ （少数扱いするなら、CSVの時点でドットにするべきだと思うんだけど...） で、カンマである前提ですが、 matchを使い、正規表現で"数値,数値"を抽出し、 それを、数値.数値に置き換えて作成し、さらに元の文字列から、 抽出した文字列と、作成した文字列を置き換えています。 で、１行中に複数存在する可能性もあるので、ループでmatchしなくなるまで 処理します。 var str=の文字列がCSVで読み込まれた文字列の想定。 var str = "10,12,30,\"40,1235\",10,11,\"1,234\""; while(1){ var match_str = str.match(/"[0-9]+,[0-9]+"/) + ""; if(match_str == "null") break; var replace_str = match_str.replace(/\"/g, "").replace(",", "."); str= str.replace(match_str, replace_str); }
bodyに対してtouchリスナーをセットしているから $$() を使っているので quo.jsをインクルードしているのでは? であればtouchリスナーのセットアップそのものも不要なはず HTMLとセットでないと やりたいことがみえないのでこの質問内容ではこれが精一杯
年中祭日祝日ノ休暇日ヲ定ム - Wikipedia https://ja.wikipedia.org/wiki/%E5%B9%B4%E4%B8%AD%E7%A5%AD%E6%97%A5%... 休日ニ関スル件 - Wikipedia https://ja.wikipedia.org/wiki/%E4%BC%91%E6%97%A5%E3%83%8B%E9%96%A2%... 国民の祝日に関する法律 - Wikipedia https://ja.wikipedia.org/wiki/%E5%9B%BD%E6%B0%91%E3%81%AE%E7%A5%9D%... 振替休日 - Wikipedia https://ja.wikipedia.org/wiki/%E6%8C%AF%E6%9B%BF%E4%BC%91%E6%97%A5 国民の休日 - Wikipedia https://ja.wikipedia.org/wiki/%E5%9B%BD%E6%B0%91%E3%81%AE%E4%BC%91%...
for...inでオブジェクトを回した際に「出てきてしまう」ということです。 -------------------- Object.prototype.test = "test"; var myObj = { hoge: "hoge", fuga: "fuga" }; for(var i in myObj) { console.log(i + ": " + myObj[i]); //hoge: hoge //fuga: fuga //test: test ← } -------------------- こうなって嬉しいケースより、戸惑うケースのほうが多いように思います。 Object.prototypeはあらゆるオブジェクトのprototypeですから、同じことがすべてのオブジェクトで起こり得ますので、危険性が高い拡張です。 もちろん、こうした状況下であっても、 (1) 自身のプロパティかどうかをチェック for(var i in myObj) { if(myObj.hasOwnProperty(i)) { console.log(i + ": " + myObj[i]); } } (2) Object.keysを使用 for(var i = 0, k = Object.keys(myObj); i < k.length; i++) { console.log(k[i] + ": " + myObj[k[i]]); } などなど、プロトタイプチェーンを無視するようにすればtestは列挙されませんが、危険な橋を渡っていることに変わりは無いと思いますので、私個人もObject.prototypeの拡張は避けるべきという立場でした。 ただし、現在では、オブジェクトにプロパティを定義する際、for...inなどで列挙されるかどうかを含めて設定することができますので、上手に使えば危険性は和らぎます。 -------------------- Object.defineProperty(Object.prototype, "test", { value: "test", enumerable: false }); var myObj = { hoge: "hoge", fuga: "fuga" }; for(var i in myObj) { console.log(i + ": " + myObj[i]); //hoge: hoge //fuga: fuga } -------------------- このあたりを理解して使う分には、まぁいいのかなと思います。もちろん、自分以外が開発に携わるような場合には、注意が必要でしょう。
cwinはグローバル変数で間違いありません。 そのうえで、 function(cwin){ } のcwinを変数名を変えてみてください。 グローバル変数の名称と、ローカル変数の名称（functionの引数）が同じ 名称になっていますので、予期せぬ動作をしている可能性があります。
>ikaros2016さん2016/8/421:02:07 >何かお心あたりありましたらご協力していただきたいです。 自分で作るのなら画像が何枚増えようと料金は変わらないので、何か勘違いしていると思います。
目的としているものができるかどうか、 わかりませんが、 フリーソフト 9VAe（きゅうべえ）を使えば以下のことができます。 １．イラストレータで作成したSVGグラフを読み込めます。 ２．自由自在に動かすことができます。 単純なマスクだけでなく、線が伸びていくとか、 線の太さや色が変わるとか自由自在に動かせます。 ３．作成したアニメを、HTML5の規格である SVGアニメーション出力することができ 直接ブラウザで再生できます。 Windows版（9va-win）、Mac版（9va-mac）、ラズベリーパイ版（9va-pi）があります。 ■ソフトの入手と使用法はこちら 無料ソフトでアニメを作ってみよう（9VAe きゅうべえ） http://qiita.com/danjiro/items/253e5a33a38599098274 イラストを読み込んでアニメを作った例がこちら 「9VAeきゅうべえ」で絵を描かずに作れるGIFアニメ http://qiita.com/danjiro/items/7fa584a4336cda9c0a05
{keyword:"カレー",applicationId:"",imageFlag:"1"}, を {keyword:keyword,applicationId:"",imageFlag:"1"}, で行けそうですが。 もし、うまく動作しないようでしたら、 {"keyword":keyword,"applicationId":"","imageFlag":"1"}, としてみてください。
今のソースを書いてください。 この情報だけではわかりにくいどころか意味が全く分かりません。
ルートnの整数部分を返すプログラムですね。オーダーは十分に大きいデータが入力された時のことをいいますから、オーダーは「n - ルートn」になります。項が一番大きくなるnを使って「O(n)」と表します。
>karaage617さん2016/8/415:07:57 >JSについて無知なため、詳しいかたいらっしゃいましたら教えてください。 無知で学習すると言う選択をしない場合は、外注するしか有りません。
サイ本（第5版）だと9.3項でクラスの説明が出ていましたが、 -------------------- var Par = function(x, y) { //インスタンスプロパティ //インスタンスを生成した際にコンストラクタによって初期化 //各インスタンスが自身のプロパティとして持つ this.x = x; this.y = y; } //クラスプロパティ //コンストラクタそのものが持っているプロパティ Par.MAX = 5; Par.MIN = 0; //インスタンス生成 var chi1 = new Par(2, 3); var chi2 = new Par(1, 2); //同じ名前のプロパティでも結果が異なる //インスタンスごとにプロパティを持っているため console.log(chi1.y); //3 console.log(chi2.y); //2 //インスタンス自身もMAXというプロパティは持ってない、 //プロトタイプチェーンを辿っても見つからない console.log(chi1.MAX); //undefined //値が必要なときはコンストラクタからアクセスする console.log(Par.MAX); //5 -------------------- 区別としてはこういうことなのかなと思います。
getEx関数を見る限り、 > aaa() > .then(bbb()) > .then(getEx()) > .then(ccc()) ↓ aaa() .then(bbb) .then(getEx) .then(ccc) ではないのでしょうか？.thenに渡すのは関数オブジェクトですので。 もしbbbやcccが関数オブジェクトをreturnするのであれば話は別ですが、少なくてもgetExについては、promiseをreturnしているので、.thenに渡す前に実行してはいけないかと思います。
<script type="text/javascript" src="../js/jquery.min.js"></script> <script type="text/javascript" src="../js/js_main.js"></script> こんな感じになっているかと思いますが、実際にどのように書いているかと、できれば、htmlのフォルダの場所、jsファイルの場所を記載していただければ、なおわかりやすいです。
おはこんばんにちゎ♪ 質問のコードをまるまるコピーして、 以下のコードで実験しました。 ▼──────── <input type="date" id="ex" onChange="ex()"> <script type="text/javascript"> function ex(){alert("日付が変更されました")} </script> ────────▲ その結果、 以下のブラウザすべてで、 日付を変えるとアラートが表示されましたヽ(・ω・＊ ▼──────── ・IE11 ・IE8～10（ IE11 のエミュレーション ） ・Chrome ・Opera ・FireFox ・Comodo IceDragon ・Windows Safari（開発終了のため旧バージョン） ────────▲ コードを見た感じでも、 まったく問題は見つかりません。 Javascript の「;」は、 １つ１つの命令を区切るためのものなので、 実行するコードが alert() のみの関数内で、 ▼──────── function ex(){ alert("～") } ────────▲ のように「;」をつけていなくても、まったく問題なしです。 HTML の onChange についても、 「onchange」と小文字で書くのが好ましいですが、 「onChange」でも間違いではないし… <script> タグの「script」でスペルミスとかしてないですか？ 終了タグの「/」をわすれて ▼──────── <script> ～ <script> ────────▲ ってなっているとか…；・ω・) それ以外だと、 「ex」っていう識別子を他で重複して使っているとかは 無いでしょうか。 単純に ▼──────── <input type="date" id="ex" onChange="ex()"> <script type="text/javascript"> function ex(){alert("日付が変更されました")} </script> ────────▲ のコードだけなら正常に動いているので、 ほかの部分のコードに問題があって阻害されている可能性があります。 正常に動作しないコード全体か、 実際の URL を教えてもらえたら、 もうすこし具体的な原因が探れると思うのだけど…
おはこんばんにちゎ（＾－＾＊ Javascript のエラーは、 ページをプレビューする Web ブラウザでそのままチェックできますよ♪ コーディングしたページを IE または Chrome でプレビューすれば、 キーボードの F12 キーで開発者ツールが開きます。 開発者ツールを開いている間は、 Javascript にスペルミスや括弧の閉じ忘れなどのエラーがあると、 赤い文字でエラーコンソールが表示されてスクリプトの実行が停止します。 エラーメッセージは、 Chrome は英語表記なので、 日本語でエラーの内容が表示される IE の方が分かりやすいですね。 ブラウザの開発者ツールは、 スクリプトの処理を好きなところで停止させて、 変数の値をチェック出来たり、 メモリの消費状況をチェックしたりもできるので、 エラーや動作のチェックにはかなり使えます。 エラーチェックだけならほんと簡単で、 F12 で開発者ツールを開くだけで、 エラーがあれば赤く [x] マークが表示されてエラーコンソールがでるので、 すぐ分かりますよ＊゜▽＾)b' ■■■ エラーのサンプル ■■■ エラーのサンプルとして、 ▼──────── function myFunc( value ){ if( !value ){ alert( "値が指定されていません" ); } ────────▲ のように、 わざと if() の括弧を閉じ忘れているコードを記述したとき、 ブラウザの開発者ツールで表示されるエラーを提示します♪ [ Chrome の場合 ] Uncaught SyntaxError: Unexpected end of input ------ ○.html : 行数
サーバ側にあるデータでしたら、ajaxを使用して読み込み、配列化します。 [JavaScript] /** * CSV読み込み処理 */ function loadCsv(){ // 変数を初期化 csv = []; // Ajaxで読み込み var httpObj = new XMLHttpRequest(); httpObj.open("GET", "data/1.csv", true); httpObj.onreadystatechange = function(){ if (httpObj.readyState == 4) { // 読み込み成功 var csv = makeArrayList(httpObj.responseText); // csvが読み込んだCSVデータの二次元配列になっているので、このあとに必要な処理を記述する console.log(csv); } } httpObj.send(null); } /** * CSVから配列生成 */ function makeArrayList(data){ // 配列 var result = []; // 文字列→行単位に変換 var list = data.split("\r\n"); // １行を配列に変換 for(var i=0;i<list.length;i++){ result.push(list[i].split(",")); } return result; } [html] <!DOCTYPE html> <html lang="ja"> <head> <meta charset="UTF-8"> <script type="text/javascript" src="javascript/script.js"></script> </head> <!-- とりあえず、ページ表示時にCSVを読み込んでみる --> <!-- ボタンを押したときにとかの時は、onclick="loadCsv();"とかにする --> <body onload="loadCsv();"> </body> </html>
eventオブジェクトには「どのボタンを押したか」という情報が無いので、どこか外にその情報を持っておくことになるかと思います。 グローバル変数でも何でもいいのですが、 > var recognitionja = new webkitSpeechRecognition();//音声機能 ↓ var recognitionja = new webkitSpeechRecognition();//音声機能 recognitionja.tButton = null; ちょうど使えそうなオブジェクトがあるので、押されたボタンを参照するためのプロパティを用意しておき、 > <button value="音声入力" class="record_btn" onClick="record()" type="button">音声入力</button> ↓ <button value="音声入力" class="record_btn" onClick="record(this)" type="button">音声入力</button> ボタンを押したときに押したボタンがイベントハンドラに渡るようにして、 > function record() { > recognitionja.start(); > } ↓ function record(button) { recognitionja.tButton = button; recognitionja.start(); } 録音開始前に押されたボタンをそのプロパティに入れておき、 > $(".voice_text").val(text); ↓ $(recognitionja.tButton).prev().find("input").val(text); そのプロパティからボタンを特定、目的のinput要素に書き込むという処理で試してみてはいかがでしょうか。
>ivry1994さん2016/8/1613:00:01 >方法を教えていただける方のみお答えいただけると助かります 良いですよ。 詳しく書いてリクエストでもあれば、そちらに回答を付けます。
sample: auto-scroll in an element - JSFiddle https://jsfiddle.net/sii_side/d61nqoLc/ HTML要素にはscrollTopというプロパティがあり、ここからスクロール量を設定することができます。
プロパティの追加はObject.definePropertyを使います。複数追加するときに使えるObject.definePropertiesもあります。 例えば、oオブジェクトにfooプロパティを追加する場合は、 -------------------- var o = Object.create(Object.prototype, { name: { value: "aaa", enumerable: true }, bar: { value: function() { return this.name }, enumerable: true } }); Object.defineProperty(o, "foo", { value: "foooo", enumerable: true }); console.dir(o); -------------------- 一例としてこのような処理となります。なお、console.logやconsole.dir、あるいはfor...inで列挙した際にプロパティが表示されるよう、enumerableをtrueにしています。 継承は最初の生成と同じでObject.createです。第1引数が、生成されるオブジェクトのプロトタイプオブジェクトになりますので、 -------------------- var p = Object.create(o, { hoge: { value: "hogehoge", enumerable: true }, fuga: { value: "fugafuga", enumerable: true } }); -------------------- このような処理を加えると、oがpのprototypeとなりますから、 console.log(p.bar()); //aaa console.log(p.foo); //foooo p自身のプロパティではないbarやfooを、プロトタイプチェーンにより参照することができるようになります。
◎対処法１ (対処法と言うかピリオドの有無に関わらず本来こう書くべき) <script> var a= document.forms["fm"].elements["hoge.moge"].value; alert('The text you inputted is ' + a ); </script> ◎対処法２ <script> var a= document.fm["hoge.moge"].value; alert('The text you inputted is ' + a ); </script>
リクエスト感謝（＊＾人＾＊） kuro_neko_g_san さん、いつも回答楽しく拝見してますよぅ♪ ▼──────── ^ で集合体の否定となって、 スペース、タブ、全角スペース以外が存在したら マッチするという認識でよろしいでしょうか。 ────────▲ ですです♪ その通りっ'd(＾ー＾＊ ▼──────── var ok = value.match(/[^\s\t ]/); ────────▲ ってやれば、 value に \s, \t, 全角スペース以外の文字が１文字でもあると、 フラグの ok が true になります。 なので、 ▼──────── if( ! ok ){ ～ } ────────▲ は、ok じゃないときに実行されます。
私はそういう統計学的な関数の中身など知りませんが JavaScript で実装したいのでしたら とりあえずの例になるかと↓。 「Compute the quantile function for the normal distribution. - like Excel NORMINV · GitHub」 https://gist.github.com/kmpm/1211922/ ↑ただ，，， このスクリプトはいくつか間違っています。 まず127行目    127 // normInv(0.2, 3.5, 0,707106781); この関数名と引数の数が違っています。 例えば // normInv(0.2, 3.5, 0,707106781); ↓変更例↓ normsInv(0.997862568, 30, 1.4); ↓その検証例↓ alert(normsInv(0.997862568, 30, 1.4)); のように変更した上で さらに81行目    81        r = Math.Sqrt(-Math.log(r)); この Math.Sqrt は Math.sqrt に修正すべきです。 上のように変更すれば Excel と "近い値" が出ることが確認できると思います。 ※ 少し違う値になるのはなぜかわかりません。
複数の空白やタブを考慮した場合、入力された文字から、空白、全角空白、タブを削除した時の長さが0の場合にエラーとする処理にすると、いいかと思います。 // 入力文字列を取得 var str = document.frm.txtName.value; // チェックのために、タブ(\t)、スペース(\s)、全角スペース（ ）を削除 var check_str = str.replace(/[\t\s ]/g, ''); if(str == ""){ // 名前未入力 }else if(check_str.length == 0){ // チェックの文字が長さ0なので、スペース系のみだったと判断。 alert("match!"); }
おそらく、 var stop = document.getElementById("stop"); が、window.stop() var reset= document.getElementById("reset"); が、form.reset あたりと混同されてしまっている可能性があります。 var o_stop var o_reset として実行したところ、動作しました。（IE11） 変数名は予約語やwindowオブジェクトのメソッドやプロパティ、documentオブジェクトのメソッド、プロパティと同一の名前はやめておいた方が吉です。
おはこんばんにちゎ（＾－＾＊ target 要素の style 属性に指定されている枠線であれば、 ▼──────── Event.target.style.borderColor ────────▲ で取得できます。 CSS などで設定された枠線を含めるのであれば、 getComputedStyle() を使います。 getComputedStyle() は、 ブラウザによって実装が異なっているので、注意が必要です。 ▼──────── [ Chrome, Opera などの モダンブラウザ ] window.getComputedStyle( 要素, "" ).borderColor または document.defaultView.getComputedStyle( 要素, "" ).borderColor [ Safari 系 ] document.defaultView.getComputedStyle( 要素, "" ).borderColor [ IE ] 要素.currentStyle.borderColor ────────▲ これらに注意して以下のようにコードをつくると、 一般的なブラウザのほぼすべてで、 変数 borderColor に取得することができます'd(・ω・＊ ▼──────── var style = Event.target.currentStyle || document.defaultView.getComputedStyle( Event.target, "" ); var borderColor = style.borderColor; ────────▲ 以下、 実際的なソースコードの実施例です＊＾－＾)ﾉ⌒★ ▼──────── <!--── スタイルシート ──--> <style type="text/css"> div{ border: solid 1px #fe2; } </style> <!--── 枠線ブロック ──--> <div onclick="alertColor( event )">テスト</div> <!--── スクリプト：枠線を取得 ──--> <script type="text/javascript"> function alertColor( evt ){ var target = evt.target || evt.srcElement ; var style = target.currentStyle || document.defaultView.getComputedStyle( target, "" ); var borderColor = style.borderColor; alert( borderColor ); } </script> ────────▲
ええと、質問の内容通りにできている気がするのですが... <script> var test=document.getElementById("test"); window.onload = function(){ test.innerHTML="after"; </script> test はグローバル変数です。 test.innerHTML="after"; で、ローカル関数内で、グローバル変数 test を参照してます。 なにか問題あるんでしょうか？
奇数 for i in `find -name '*.jpg' | sed 's@./@@' | sort -r`; do mv `printf "$i %03d.jpg\n" $(( ${i%.jpg} * 2 - 1 ))`; done 偶数 for i in `find -name '*.jpg' | sed 's@./@@' | sort -r`; do mv `printf "$i %03d.jpg\n" $(( ${i%.jpg} * 2 ))`; done
タブの作りがどうなっているかはわかりませんが、formを２つに分けて、hidedenフィールドに識別を入れてみてはどうでしょうか。 [HTML] 便宜上、divをタブとして、 <div class="tab1"> <form name="frm1" action="search.php" method="POST"> <input type="hidden" name="type" value="1"/> <input type="select" name="sle"> <option value="1">ほげ</option> ・ ・ ・ </select> <input type="submit" value="検索"/> </form> </div> <div class="tab2"> <form name="frm2" action="search.php" method="POST"> <input type="hidden" name="type" value="2"/> <input type="select" name="sle"> <option value="1">ほげ</option> ・ ・ ・ </select> <input type="submit" value="検索"/> </form> </div> [PHP] if(isset($_POST['type')){ if($_POST['type'] == "1"){ /* 検索して、１タブの方にデータ反映 */ }else{ /* 検索して、２タブの方にデータ反映 */ } }
タブの作りがどうなっているかはわかりませんが、formを２つに分けて、hidedenフィールドに識別を入れてみてはどうでしょうか。 [HTML] 便宜上、divをタブとして、 <div class="tab1"> <form name="frm1" action="search.php" method="POST"> <input type="hidden" name="type" value="1"/> <input type="select" name="sle"> <option value="1">ほげ</option> ・ ・ ・ </select> <input type="submit" value="検索"/> </form> </div> <div class="tab2"> <form name="frm2" action="search.php" method="POST"> <input type="hidden" name="type" value="2"/> <input type="select" name="sle"> <option value="1">ほげ</option> ・ ・ ・ </select> <input type="submit" value="検索"/> </form> </div> [PHP] if(isset($_POST['type')){ if($_POST['type'] == "1"){ /* 検索して、１タブの方にデータ反映 */ }else{ /* 検索して、２タブの方にデータ反映 */ } }
http://query700.hatenablog.com/entry/2016/04/12/214826 adobe Flash Playerの設定を確認してください。
単純な例(いかに単純化するかのコツ例)を。 ◎「game.html」↓ <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>じゃんけん</title> <script type="text/javascript" src="game.js"></script> </head> <body> じゃんけん<br> <input type="button" value="グー" onclick="janken(0)"> <input type="button" value="チョキ" onclick="janken(1)"> <input type="button" value="パー" onclick="janken(2)"> </body> </html> ◎「game.js」↓ var hands = ["グー","チョキ","パー","グー"]; function janken(n){     alert("あなた…" + hands[n] + "\n"         + "PC…" + hands[n+1] + "\n\n"         + "あなたの勝ちです！"); }
tableをどのように追加しているのかにもよるけど document.writhでhtmlに書き出しているなら class部分を任意の文字列変数にしてclass名を代入すればいいのでは どうやって表示させたいのか解らないのこれが精一杯
おはこんばんにちゎo(＾ー＾＊ ▼──────── document.new02_1.isbn.style.backgroundColor = "peachpuff"; alert("ISBNを入力して下さい。"); ────────▲ のように処理を実行したとき、 処理の順序としては、 ▼──────── [ 背景色の指定値を変更 ] . . ↓ [ アラート表示 ] ────────▲ っていう順番で行われますが、 「背景色の指定を変更」～「アラート表示」までは、 タイムラグがほとんどなく、ほぼ同時です。 いっぽう、 ▼──────── document.new02_1.isbn.style.backgroundColor = "peachpuff"; ────────▲ の時点で背景色の「指定値」は変更されますが、 指定値が変更されたあと、 その指定値に従って「描画（レンダリング）」の処理を行うので、 背景色の指定値が変更されてから、 指定された背景色が実際に表示に反映されるまでには、 わずかにタイムラグがあります。 そのため、 ▼──────── [ 背景色の指定値を変更 ] . . │ . . . . . . ↓ . (描画) . . [ アラート表示 ] . . ↓ [ 背景色の指定値が反映される ] ────────▲ っていう順番でそれぞれの動作が完了するので、 背景色が変わる前にアラートが表示されています'd(・ω・＊ 背景色が画面に反映されたことを検知して、 アラートを出せればいいのだけど、 画面への描画完了を検知する方法は今のところありません。 背景色がかわってからアラートを出す、いちばん簡単な方法は、 setTimeout() でアラートを遅らせる方法です。 どれくらいで描画が完了するかは ブラウザや閲覧環境の描画能力に依存するので特定はできませんが、 <input> の背景色の変更なら、 どのブラウザでもほんの一瞬だと思います。 0.1 秒も遅らせれば充分すぎるとおもいます♪ ▼──────── document.new02_1.isbn.style.backgroundColor = "peachpuff"; setTimeout( function(){ alert("～") }, 100 ); ────────▲
IE11で確認してみました。 コメント行（<!-- -->）について、コメントして認識はしているようです。 開発者ツールでもエラーとはなっていませんでした。 （他のブラウザにつては未確認） ですが、自分の場合は、外部ファイルでは、JSコメントとしています（/* */,//） 理由としては、 ・JavaScriptのみ記載のファイルなので。 ・コメントかどうか、ファイル単位で見た時に、混乱しないように っていうような理由です。 HTMLファイル内に記述する場合でも、 <!-- scriptタグの外ならHTMLのコメント --> <script type="text/javascript"> /* 中なら、JavaScriptのコメント */ </script> と明確に分けて使っています。 こちらは特に、コメントを混ぜちゃうと見づらくなるので。
おはこんばんにちゎ（＾－＾＊ appendChild() で追加するときって、 ▼──────── 要素.appendChild( document.createTextNode( "～" ) ); ────────▲ みたいにしていますか？ document.createTextNode() は、 そのメソッド名の通り、 引数に指定した文字列は「HTMLコード」ではなく、 「テキスト」としてそのまま表示できるようにコードを生成します。 なので、 ▼──────── document.createTextNode("果物 &gt; リンゴ") ────────▲ ってやってしまうと、 「果物 &gt; リンゴ」がそのまま表示されます。 内部的には、 「果物 &amp;gt; リンゴ」っていう HTML コードが生成されていますね。 appendChild() でテキストノードを追加するときは、 HTML コードに変換せずに、 そのままのテキストを指定しましょう'd(゜▽＾＊ ▼──────── 要素.appendChild( document.createTextNode( "果物 > リンゴ" ) ); ────────▲
>liquorice66さん >他に似たようなエディタを実装するにはどういった方法があるのでしょうか。 JavaScript、Flash、Flex、ColdFusion、Java、AcriveX等 目的、予算、納期、精度、要件によって使い分けます。 >こういったエディタはプログラマーなど専門の人に依頼しない限り実装は難しいでしょうか。 一般的にはプログラマーではなく「専門業者 or コンサルタント」が依頼先です。自身で探しても見つけられないと思います。 自作方向で行くのなら、要件だし＆勉強法を習い素質、期間が有る事が必須になります。 >取り急ぎフリーや低価格で入手出来るプログラムやAPIの類があると大変ありがたい状況です。 仕事として「作ってくれ or 要件出し」してくれと言うのなら可能ですが、フルスクラッチで作るようなものなので探して出てくるようなものではありません。 >呼び方（通称）があれば教えてください。 ASP
スライドショーを具体化すると、 画像の管理・スライドアニメーション・時間 が必要な要素になります。正直JavaScriptのコードはどうでもよくて、 メソッド自体は検索すれば幾らでも出てきます。 重要なのはアルゴリズム(目的を達成するまで手順)でこれをいかに上手く 組む事が出来るかが重要です。 ・画像の管理 2通りの方法で画像は管理出来ます。 1.配列に画像パスを入れ管理する 2.HTML要素に直接画像要素を入れ管理する JavaScriptから見るとどちらも配列を扱う形式で管理出来ます。 [1.]の方法の場合は、動的にHTML要素の生成が必須となります。 アルゴリズム自体は多少複雑になりますが、経験としてとてもいいと思いますね。 [2.]の方法は単純に親要素内で画像を整列して、スライドするだけです。 cssである程度の初期設定が必要ですが難易度は低いですし、こっちの方が一般的と言えるでしょう。 ・スライドアニメーション スライドショーと言えば画像が切り替わる時のスライドですね。これを行うにも主に2つの方法があります。 1. CSSプロパティを小刻みに切り替えて行く 2. CSS3アニメーションを利用する 基本的には[1.]が一般的です。ただ対象ブラウザを絞れば[2.]のCSS3のアニメーションを使ってよりシンプルにする事が出来ます。 [1.]の主な方法としてはタイマーで一定時間経つと特定の関数の処理を繰り返させる方法で、その関数内では画像の位置(top, left)等の数値を徐々に変えて行くだけでスライドアニメーションの完成です。 [2.]ではCSS3のアニメーションですので、画像要素にアニメーションのスイッチを組み込むだけで簡単に実装出来ます。 例えばimg要素にtype="on"となっている場合cssではimg[type="on"]{〜}のプロパティが使われます。これを利用して、 img[type="on"]{〜} img[type="off"]{〜} の様にアニメーションする場合としない場合のスタイルを定義しておき、後はJavaScriptで要素のtype要素の中身を切り替えるだけでアニメーションしたり、アニメーションしなかったりで簡単です。
普通は <script type="text/javascript"> ですね。 ブラウザがかしこく解釈してくれると、””でも大丈夫ですが、 W3C（HTML、CSSの規格）でも ”text/javascript"のように、１つで記載されていますので、１つの方がいいかと思います。
サーバーからのレスポンスが多くなればそれなりに遅くなります。 またこういった物はサーバーを動かす限り、サーバーの能力により速度が変わります。PHPでもサーバースペックが原因でスムーズに動作しなかったり等ありますね。
おはこばんにちゎ＊＾－＾)o ■■■ 現状のコード ■■■ 現状のコードは、 /──────── var hogehoge = func1(); console.log( hogehoge ); ────────/ のようになっていますね'd(・ω・＊ func1() の中身は /──────── func1(){ var count = 0; var waitfunc = setInterval( ★, 100 ); ← 変数 waitfunc にタイマーID を代入 } ────────/ っていう処理内容になっていて、 戻り値として何も return されていません。 なので、戻り値は常に undefined です。 これを踏まえて、処理の流れを見てみると、 まず、 変数 hogehoge に func1()、つまり undefined が代入されます。 このとき呼び出された func1() の中では、 0.1 秒（ 100 ミリ秒 ）後に実行する処理 ★ がタイマー予約されます。 次に、 console.log() によって 変数 hogehoge の内容 undefined がログに出力されます。 そして、 0.1 秒が経過したときに、 タイマー予約されていた処理 ★ の１回目が実行されます。 この処理は、その後も 0.1 秒ごとに計５回実行されますね。 処理 ★ では、 0.5 秒が経過すると、 ログに "return!!" という文字列を出力したあと、 「12345」 という数値を戻りとして返しますが、 この戻り値は、 どこにも代入されていないので、 ただ無名関数 function(){} の戻り値として返されただけで、 処理の上では存在していないのと同じです。 現状の処理の流れは以下の通りです。 /──────── [ func1() を実行 ⇒ 戻り値 undefined ] . . ↓ [ 変数 hogehoge に func1() の戻り値を代入 ] . . ↓ [ 変数 hogehoge の値をログ ] . . │ . 0.1 秒 . . ↓ [ count+1 ] . . │ . 0.1 秒 . . ↓ [ count+1 ] . . │ . ・・・ . . ↓ [ "return!!" をログ ] ────────/ 以上の流れで、 /──────── ログ : undefined ログ : return!! （ 0.5 秒後 ） ────────/ っていう処理結果になっています。 ■■■ wait は不可能 ■■■ Javascript の中では、 他の一般的なプログラミングで実装されるような、 「処理を途中で止めて待機する」という手段はいっさい与えられていません。 質問では、 /──────── var hogehoge = func1(); ← ここで 0.5 秒間だけ処理を停止して待機 console.log( hogehoge ) ────────/ っていう処理をしたいという事ですが、 これは Javascript では、どんなコードを組もうと不可能な処理です。 Javascript では、 いちど走り出した処理は、 一連の処理をすべて完了するまで止まることは有りません＊・ω・)b' ■■■ じゃぁ、どうする？ ■■■ Javascript では、 処理を止めて待機することは不可能なので、 setTimeout() を使って、 「処理が走り始める時点を遅らせる」という選択肢以外はありません。 今回実行したい処理のフローは、 /──────── [ 変数 hogehoge を登場させる ] . . │ ( 0.5 秒後 ) . . ↓ [ "return!!" をログ ] . . ↓ [ 変数 hogehoge に func1() の戻り値を代入 ] . . ↓ [ 変数 hogehoge の値をログ ] ────────/ っていう流れなので、 /──────── [ "return" をログ ] . . ↓ [ 変数 hogehoge に func1() の戻り値を代入 ] . . ↓ [ 変数 hogehoge の値をログ ] ────────/ の部分をすべて setTimeout() でタイマー予約することになります。 実際のコードは以下のような感じですヽ(・ω・＊ /──────── var hogehoge; setTimeout( function(){ console.log( "return!!" ); hogehoge = func1(); console.log( hogehoge ); }, 500 ); function func1(){ return 12345; } ────────/ これで、 実行結果が以下のようになります。 /──────── ( 0.5 秒 ) ログ : return!! ログ : 12345 ────────/
おはこんばんちゎっ♪ どんなソースコードで実行していますか？ 以下のコードで試してみましたが、 IE8 ～ 11 で問題なく動くのが確認できています（・ω・＊ （ただし IE8 ～ IE10 は IE11 のエミュレーション） /──────── ■■■ index.html ■■■ <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN"> <html> <head> <title></title> </head> <frameset cols="20%,80%"> <frame src="page1.html"> <frame src="page2.html"> </frameset> </html> ■■■ page1.html ■■■ <!DOCTYPE html> <html> <head> <title></title> </head> <body> ページ１<br> <form name="setting" action="javascript:setFrame()"> <input type="submit" value="設定"> </form> <script type="text/javascript"> function setFrame(){ var frameset = top.document.getElementsByTagName("frameset")[ 0 ]; frameset.cols = "50%, 50%"; } </script> </body> </html> ■■■ page2.html ■■■ <!DOCTYPE html> <html> <head> <title></title> </head> <body> ページ２ </body> </html> ────────/ ちなみに、 HTML5 が主流になってもう結構な期間が経っています。 HTML5 では、 <frameset> は完全に廃止されてしまったので、 今後は <frameset> でのサイト構築は避けた方がいいと思います'd(・ω・＊ <iframe> は HTML5 でも元気バリバリで採用されているので、 <frameset> ではなく <iframe> で組んだ方がいいかと思います♪
varの変数宣言や、function文の関数宣言は、コードの実行に先立って評価されます。いわゆる変数の「巻き上げ」です。 > (function(){ > console.log(a1); > var a1 = 3;//関数内変数として定義 > })(); a1は関数内においてvarで宣言されていますので、関数の実行の前に、一旦ローカル変数として成立します。 ただし、代入は先に処理されませんので、console.logの時点ではa1はローカル変数として存在するだけです。 結果、console.logで出力される値はundefinedとなります。
前の質問で回答したかもしれませんが、Changeイベントの強制発生で何とかなるのではないでしょうか。ブラウザの場合は選んだ時点で発生しますが、マクロによる選択の場合は発生しません。 方法については、「Set ev～dispatch(ev)」で行なっている処理で行なえるはずです。 発生対象タグオブジェクトを変数に代入しておかないと使えませんので、セレクトボックス選択の部分を2行に分けてください。 Set mapnow=ie.document.getElementByID("mapnow_button") mapnow.selectedindex=2 'ここ以降で、「mapnow」を対象にイベント強制発生 もう片方のセレクトボックス選択については、最後でイベントを発生させているようですが、再度、対象タグを取得して、直接メソッドを発行していますね。これだと汎用性に乏しいですし、エラー時に対応がしづらくなりますので、その前の行できちんと変数に入れて、そちらを利用するようにした方が良いと思います。
オブジェクトのプロパティには内部的な属性がいくつかあり、その中の1つにDontDeleteがあります。他にはReadOnly、DontEnumなど。 DontDeleteは読んで字のごとくですが、そのプロパティが削除可能かどうかを設定するためのものです。 あるプロパティがDontDeleteである場合、delete演算子でそのプロパティを削除することはできません。今回もそのケースに該当します。 実際に、 console.log(delete x); //false このようにしてdelete演算子の返り値を確認してみると、falseが得られるはずです。これは、「対象がDontDeleteなプロパティであったため、削除に失敗した」という意味です。 ですので、結果としてxは削除されず、そのままxの値である1がreturnされます。 今回のような関数の引数もそうですし、varで宣言した変数や関数宣言時の関数名もDontDeleteなプロパティですので、これらはdelete演算子では削除できません。
おかしいな？？？ 「おかしい」って打てるのに、「新しい」「しかし」は打てないんですか？？？ キーボードじゃなくて、頭がおかしいんだろ？？？
＞tedfoanbjlsbvhlifwさん ＞これはかなり高度なjavascriptのスキルになりますか？ いいえ 陳腐なスキルです。
文字列中の ” の書き方がわからないって話なら 普通の文字列なら \" @" で始める形式なら "" https://msdn.microsoft.com/ja-jp/library/362314fe.aspx ＞@ と二重引用符で囲まれた文字列中に二重引用符を含めるには、二重引用符を二重にします。
node.jsが出てきてから急に進化が凄くなりましたね。 今ではnode.js+HTML5を使い、各プラットフォームに対応したデスクトップアプリケーションも作れる様になっています。 "Electron"と検索すれば詳細は分かります。 将来的にはElectronとかで、iOS/Androidアプリも作れるかもしれないと噂になっていますね。 また現状HTML5からAudioやVideo・Canvasが追加された以外にも、JavaScriptでGPS情報や音声の生成・認識・ジャイロセンサー取得・ゲームコントローラーの認識も出来る様になってもう大体の事が行える様になっています。
おはようございます。 これDOMを利用すると簡単ですがだめでしょうか？ <!DOCTYPE html> <html> <head> <title>年齢計算サンプル</title> <script type="text/javascript"> var _by;//年 var _bm;//月 var _bd;//日 function selectchy() { _by = document.getElementById("y").value; document.getElementById("txt").value = calculateAge(_by, _bm, _bd); } function selectchm() { _bm = document.getElementById("m").value; document.getElementById("txt").value = calculateAge(_by, _bm, _bd); } function selectchd() { _bd = document.getElementById("d").value; document.getElementById("txt").value = calculateAge(_by, _bm, _bd); } function calculateAge(by, bm, bd) { // 文字列型に明示変換後にparseInt var _birth = parseInt("" + by + bm + bd); var today = new Date(); // 文字列型に明示変換後にparseInt var _today = parseInt("" + today.getFullYear() + affixZero(today.getMonth() + 1) + affixZero(today.getDate())); return parseInt((_today - _birth) / 10000); } function affixZero(int) { if (int < 10) int = "0" + int; return "" + int; } </script> </head> <body> <dl class="cf"> <dt class="title"> 生年月日 </dt> <dd class="data"> <select id="y" class="" name="birthday:y" onchange="selectchy()"> <option value="">年</option> <option value="1996">1996年</option> <option value="1995">1995年</option> <option value="1994">1994年</option> <option value="1993">1993年</option> <option value="1992">1992年</option> <option value="1991">1991年</option> <!-- 以下省略 --> </select> <select id="m" class="" name="birthday:m" onchange="selectchm()"> <option value="00">月</option> <option value="01">1月</option> <option value="02">2月</option> <option value="03">3月</option> <!-- 以下省略 --> </select> <select id="d" class="" name="birthday:d" onchange="selectchd()"> <option value="00">日</option> <option value="01">1日</option> <option value="02">2日</option> <option value="03">3日</option> <!-- 以下省略 --> </select> </dd> </dl> <dl class="cf"> <dt class="title"> 年齢 </dt> <dd class="data integer"> <input id="txt" class="input " type="text" name="ages" value="" maxlength="10" style="text-align: right;"> </dd> </dl> </body> </html> value="1"→value="01"のように変更してあります。
おはこんばんにちゎo(＾－＾＊ document.write() では、 実行された場所に書き出されてしまうので、 書きだす場所を指定することはできません'd(・ω・＊ それをやるためには、 関数 nya() の内容を改造しないとダメですね。 document.write() のようにコードを書き出すのではなく、 document.createTextNode() または document.createElement() で、 「にゃん」と書かれたテキストノード または 要素を生成し、 その要素を、 ▼──────── 親要素.insertBefore( 「にゃん」要素, ボタン要素.nextSibling ); ────────▲ っていう感じで挿入します。 insertBefore( A, B ) は、 B の直前に A を挿入するメソッドで、 B.nextSibling は B の直後のノードです。 なので、 ▼──────── 親要素.insertBefore( A, B.nextSibling ); ────────▲ ってやると、 B の直後のノードの直前、 つまり、 B の直後に A が挿入されるっていう手筈です＊゜▽＾)b' これを使ってコードを記述すると、 以下のようになります。 ▼──────── <!--── スクリプト ──--> <script type="text/javascript"> function nya( elem ){ var nyan = document.createTextNode("にゃん"); var parent = elem.parentNode; parent.insertBefore( nyan, elem.nextSibling ); } </script> <!--── ボタン ──--> <input type="button" value="判定" onclick="nya( this );"> ────────▲ ただし、 これだと、 ボタンのあとに改行が入らないので、 ボタンの横に「にゃん」と出ますね。 この場合、 ▼──────── function nya( elem ){ var nyan = document.createTextNode("にゃん"); var br = document.createElement( "br" ); var parent = elem.parentNode; parent.insertBefore( nyan, elem.nextSibling ); parent.insertBefore( br, nyan ); } ────────▲ のように、 <br> も生成して「にゃん」の直前に入れれば、 「にゃん」がボタンの下に来ます。 あるいは、 ▼──────── function nya( elem ){ var parent = elem.parentNode; var div = document.createElement( "div" ); div.innerHTML = "にゃん"; parent.insertBefore( div, elem.nextSibling ); return; } ────────▲ のように、 <div> などのブロックに「にゃん」を入れて挿入すると、 ブロック要素なので、 <br> がなくてもボタンの下に来ますね♪
＞ジョブショップスケジューリング問題のガントチャートを作りたい 「jquery Gantt chart」などと検索すると実物が大量に出てきます あとは、それを読んで、真似ます テックノート – 【jQuery】手軽にガントチャートが作れるプラグイン(jQuery.Gantt) http://javatechnology.net/jquery/gantt/ GitHub - taitems/jQuery.Gantt: jQuery Gantt Chart https://github.com/taitems/jQuery.Gantt To Do をガントチャートで表示する – cybozu.com developer network https://cybozudev.zendesk.com/hc/ja/articles/202640940-To-Do-%E3%82...
http://dimsemenov.com/plugins/magnific-popup/ 上記プラグインのサイトの中に、Dialog with CSS animationという項目があります。 そこをクリックすると、アニメーション表示するときのパラメータの設定の仕方がでてますので、そちらを見てください。
HTML側にそのような仕組みは用意されていないみたいなので、 sample: set today as default value to input type=date - JSFiddle https://jsfiddle.net/sii_side/2w3hxqg6/ このように読み込み後にJavaScriptから設定したり、PHP等でvalue属性に埋め込むといった方法になるようです。
おはこばんにちゎo(・ω・＊ 相対パスで記述すればイイだけなので、 index.html と同じフォルダ内なら、 ▼──────── <script type="text/javascript" src="rgbcolor.js"></script> または <script type="text/javascript" src="./rgbcolor.js"></script> ────────▲ です。
① JFrame f = new JFrame();//フレーム作成 JPanel panel = new JPanel();//パネルを作成 JObject object = new JObject();//こんなのはないけど、仮のオブジェクトとして p.add(object);//パネルにオブジェクトを追加 Container contentPane = frame.getContentPane(); contentPane.add(panel);//フレームにパネルを追加 frame.setVisible(true);//フレームを表示 こんな感じのコードになると思います。 ④ 背景色の指定 object.setBackground(Color.BLACK);//直接色の指定 object.setBackground(new Color(150,150,150));//RGBの指定 前景色の指定 object.setForeground(Color.BLACK); ③イベントリスナーというものを使います。エンターに対して、クリックに対して、キーボード入力に対して、などの細かい違いがあるので、載せきれません。調べてください。 //...呼び出し側... object.addActionListener(this);//イベントの登録 //...処理側(メソッド)... public void actionPerformed(ActionEvent e) //objectのイベントで実行 { //独立したメソッドなのでobjectをメンバ変数にすべき int R = object.getBackground().getRed();//オブジェクトRGBを取得 int G = object.getBackground().getGreen(); ing B = object.getBackground().getBlue(); object.setBackground(new Color(R,G,B));//オブジェクト色を変える } 細かいニュアンスがそれぞれ目的に応じて変わってくるので、調べた結果と照らし合わせて何とかしましょう。
質問制限文字数を超えましたか？ 手前味噌ですが 「「Yahoo! 知恵袋」添付元画像(iraw)を開くブックマークレット(PC版) - Yahoo!知恵袋」 http://note.chiebukuro.yahoo.co.jp/detail/n390248 に書いたブックマークレットを使って画像を拝見いたしました。 上のブックマークレットを使って求めると 大きな画像の URL は http://ks.c.yimg.jp/res/chie-que-12162/12/162/248/542/iraw ですね。 . 細かい部分は色々ありますが， ご質問本題としては「最後の if文」に最大の問題があるのではないかと思います。 この部分ですね↓。     if(flg==false){         if(name=="s"){             if(jyu==""){                 alert("全ての項目を入力してください。");             }         }     } これだと     ラジオボタンやチェックボックスにチェック無しの場合で，         なおかつ「学生番号」が「s」だけの場合で，             なおかつ「氏名」が未入力の場合に，                 全項目を入力を促すメッセージ出す。 という意味になりますよ。 違うでしょう？ ご質問文から推測すれば，     ラジオボタンやチェックボックスにチェック無しの場合，         または「学生番号」が「s」だけの場合，             または「氏名」が未入力の場合に，                 全項目を入力を促すメッセージ出す。 のようにしたいのではないでしょうか？？？ つまり AND + AND + AND (なおかつ + なおかつ + なおかつ) ではなく， OR + OR + OR (または + または + または) だと思います。 ※参考【添付図】↓ したがって 次のように変更すべきかと思います↓。     if(!flg || name=="s" || jyu==""){         alert("全ての項目を入力してください。");     } とりあえず上の if文 だけ変更して動作検証してみてください。 ※下に書く他の箇所も一気に変えると，    どこか別の場所で不具合が発生する可能性があるため。 === === === === === === === 上に引き続き，他の変な箇所についてです。 (上の件とは切り離して考えてください。) 現状でも動作するかもしれませんが とりあえずこれ↓は変でしょう。 <input type="button" value="送信" onclick=check()> 次のように変更すべきでしょうね↓。 <input type="button" value="送信" onclick="check()"> それとこれ↓も変です。 <textarea name="kaizen" row="10" cils="100"></textarea> おそらく次のように変更でしょうね↓。 <textarea name="kaizen" rows="10" cols="100"></textarea> あと HTML に 本来入れるべき スペース がたくさん抜けています。 例えば <form action=""method="post"> や <input type="radio" name="reason"value="1">先端経営学科 <input type="radio" name="reason"value="2">システム情報学科 <input type="radio" name="reason"value="3">医療情報学科 などなど(他も多数)… 例えば <form action=""method="post"> ではなくて <form action="" method="post"> のようにすべきでしょう("" の後に半角スペースが必要)。 JavaScript の話に戻りますが， name という変数名↓を使うのもいかがなものかと...。 var name=document.getElementById("1").value; そもそも name は HTML 上でも name という意味がある言葉(属性)ですし JavaScript においても window オブジェクトに name という既存のプロパティがあります。 「window.name - Web API インターフェイス MDN」 https://developer.mozilla.org/ja/docs/Web/API/Window/name これとぶつかるので あまり(全然)良くない変数名だと思います。
FocusTabって(・ω・; )？ と思ってしまうのですが、FocusTabとはそもそも何を指しているんですか？ FocusTabという関数なり、オブジェクトなり、HTMのタグなりは存在しませんので、プラグインで追加している機能だとはおもうんですが。 そのへんもちょっと説明していただけると助かります。 で、できれば、この辺で色変えてるから、画像もかえれなかなぁ～ってところまで情報があればｗ
どこから説明すれば良いのか良くわかりませんし， 深くツッコまれても私も良くわからない部分が出てくるのですが。 まず (function(){ return typeof arguments; })(); のように () で括られている function は 他の方も書かれていらっしゃるように匿名関数(無名関数)で その後の後に続く () が， 「その匿名関数(無名関数)を実行せよ。」 という意味の () です。 . ◎匿名関数(無名関数)の即実行について 匿名関数を用意して即実行する最大のメリットは 「グローバル汚染の回避」であると私は思っています。 ご質問の場合は 「問題(クイズ上)」のスクリプトであって あまり意味はないのですが， ページに色々な JS とか読み込んだりすると どのグローバルな変数名が使われていて どのグローバルな変数名は使われていないか？ などがわからなくなってくるのです。 また関数名に関しても同じく。 すでに定義されている関数なのかそうでないのかがわからなくなる場合もあります。 関数の中にローカル変数を用意する場合は グローバル領域を汚染することはないので安心です。 また関数にも名前を付けなければ 他の関数が上書きされたりする心配もなくなります。 そこで匿名関数を作って その匿名関数を即実行させるというような手法が用いられる場合が出てきます。 手前味噌ですが 例えば先日私がココ(知恵袋)の画像閲覧のために作った ブックマークレット(お気に入りに登録する一行 JavaScript)があります。 「「Yahoo! 知恵袋」添付元画像(iraw)を開くブックマークレット(PC版)」 http://note.chiebukuro.yahoo.co.jp/detail/n390248 上の ブックマークレット 内にも var v や var b や var s などが出てきますが これらをもしグローバルに使うと， 「Yahoo! 知恵袋」ページ内の JavaScript の変数などと 干渉を起こす危険性が出てくるわけです。 (ブックマークレットはどのページで使われるかなど私は知りませんからね。) そこで ブックマークレット全体を匿名関数にして即実行させるようにしてあるのです。 匿名関数の中の var v や var b や var s などは ローカル変数ですからね。 Google などで「ブックマークレット」とか検索すると， 他にも沢山のブックマークレットが出てくると思いますが その多くは 匿名関数 で括ってあると思います。 なお匿名関数を () で括る必要性に関してですが これは function を文頭に書くと 関数定義の文だと判断されてしまい, JavaScript の文法上， 関数宣言の後ろにカッコを書くことができなくなり エラーになるためです。 逆に言えば function が文頭に来なければ良いわけで， 別に () で括る必要はない場合が多いです。 戻り値がない場合は +function(){}(); とか !function(){}(); とかいう書き方をしても良いです。 (戻り値がある場合は，その戻り値が数値化されたり，ブール値的に逆転したりします。) . ◎ご質問の問題(クイズ)の戻り値について arguments は関数に渡って来た引数のリストオブジェクトです。 「arguments - JavaScript MDN」 https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Func... ～引用～ > arguments は、関数へ渡された引数に対応する > Array のようなオブジェクトです。 ですから「Object」が返されます。 「Object」が返されるかどうかを調べるには <script type="text/javascript"> alert((function(){return typeof arguments})()); </script> とかすれば戻り値が確認できますよ。 <script type="text/javascript"> alert((function(){return arguments[0]})("あ")); </script> とかすればさらに理解が深まるかと思います。 上のように alert() で return 値を使った場合 その return 値は alert() 内で消化されますが alert() しなかった場合は 一旦 window オブジェクトに返るのだけれども その結果，参照を持つものがどこにも存在しないため， そのオブジェクトは自動的に消去されるでしょう。 実際， 戻り値を持つ既存のメソッドはたくさん用意されていますが 戻り値を使わないことも多いです。 配列を操作するメソッドとかを使用する際に そういう戻り値を受け取らないケースに遭遇することが多いです。 使わないなら使わないで， 自動消去されるので特に問題はありません。
URLからファイル名で判定するか、 writeNav()に引数で渡す、というのはどうでしょう。 nav.htmlは↓のようにidを付けておいて、 <ul> <li><a href ="#" id="page01">1</a></li> <li><a href ="#" id="page02">2</a></li> <li><a href ="#" id="page03">3</a></li> </ul> ・ファイル名で判定 ●js/common.js var url = window.location.href; var id = url.match(".+/(.+?)\.[a-z]+([\?#;].*)?$")[1]; function writeNav(rootDir){ $.ajax({ url: rootDir + "nav.html", cache: false, async: false, success: function(html){ html = $(html.replace(/\{\$root\}/g, rootDir)); html.find("#"+id).addClass('active'); $("section").append(html); } }); } ・引数でidを指定 ●sub/page02.html <section> <h1>01です</h1> <script type="text/javascript"> writeNav("../","page02"); //nav読み込み </script> </section> ●js/common.js function writeNav(rootDir,id){ $.ajax({ url: rootDir + "nav.html", cache: false, async: false, success: function(html){ html = $(html.replace(/\{\$root\}/g, rootDir)); html.find("#"+id).addClass('active'); $("section").append(html); } }); }
http://yokano-jp.blogspot.jp/2014/05/jquery-iframe.html <iframe id="ifrn" src="" name="hid-blank"></iframe> として、 $("#ifrm").on("load", function(){ $("*****").show(); });
$("h2").each(function() { $(this).nextUntil("h2").add(this).wrapAll("<section></section>"); });
phpにしろ、JavaScriptにしろ、null値をhtmlに表示するというのは、文字列型データに変換するという作業が必要で、自動では空文字列に変換されます。 'NULL' という文字列を表示したいなら、そのような変換作業を自前で記述する必要があります。 phpなら if( is_null($data) ) $data = 'NULL'; といった構文, JavaScriptにも似たような関数はあるだろう。普段使ってないので割愛。
>trance_missionjpさん2016/7/2819:09:46 >HTMLであれば表示されるのですが、HTAでは埋め込めないのでしょうか？ 埋め込むの意味合いによっては可能です。
おはこんばんにちゎo(＾▽＾＊ 少し前に、 この質問のケースと同じような機能について回答しました♪ たぶん、 それと同じ方法で実装できると思うので、 よければ読んでみてくださいなっm(__)m [ 参考 : スクロールに合わせて画像が左右するには ] http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1216195473...
IE11はローカルファイルに対する$.ajaxができないようになっています。 ローカルで jQuery の Ajax を動作させたいが IE11 で動かない時にこうする - Corredor http://neos21.hatenablog.com/entry/2016/06/22/000748 ただし、上記ページに記載されているIE10モードでの動作をさせるには、jQueryをver1系に落とす必要があります。 Chromeも同様ですが、Chromeは--allow-file-access-from-filesのオプションを付けて起動するという方法があります。 Google ChromeでローカルファイルのAjax読み込みができない件: 永遠ログ http://eien.seesaa.net/article/302127165.html こちらは、ver2系のままでも問題ありません。
else if(cnt<=7)myMess="危険"; ここで、cntが7以下になっているので、全て危険になっちゃってると思います。 (cnt>=7)で７以上が想定している判定になるかと。
$.cssで値を取得する際、複数の要素があったとしても、値を得られるのは最初の1つだけですので、1回でまとめて判定することはできません。 sample: check red color elements with jQuery - JSFiddle https://jsfiddle.net/sii_side/bum5of56/ 1つ1つの要素をチェックして、1つでも該当があればフラグをtrueにするという処理をし、最後にフラグで分岐させるという形になるかと思います。
おはこんばんにちゎo(＾－＾＊ element.classList は「DOMTokenList」というタイプのオブジェクトで、 このタイプのオブジェクトは、 IE9 以下では対応していないので、 これとまったく同じものを扱うことは出来ません。 ただ、 element.classList は、 element に指定されているクラス名のリストなので、 ▼──────── element.className.split(" "); ────────▲ で代用して、「配列（Array オブジェクト)」として取得できます。 「classList」の「DOMTokenList」と、 「className.split(" ")」の「配列」では、 使えるプロパティやメソッドなどが違っていることに注意が必要です。 また、 ▼──────── element.classList.add("test"); ────────▲ については、 element にクラス名「test」を追加する処理なので、 単純に、 ▼──────── element.className += " "+"test"; ────────▲ っていうふうに実現できますが、 追加しようとしているクラス名をすでに element がもっている場合は そのクラスを追加しないようにしないといけませんね。 そのチェックをいれると、 ▼──────── element.className += ( element.className.match(/(\s|^)test(\s|$)/) ) ? "" : " "+"test" ; ────────▲ っていう感じになりますヽ(゜▽＾＊
divのCSSに display:inline-block; を指定してください。
sample: css transition with jQuery addClass - JSFiddle https://jsfiddle.net/sii_side/Lu2huarq/ 色の無い状態と色のある状態の、2つの画像をぴったり重ねあわせ、手前に来る色のある状態の画像を、透明度0（全く見えない）→1（完全に見える）とアニメーションさせています。 中核となるアニメーションの処理にはjQueryを使っておらず、CSSのtransitionで行っています。 葉の画像は1枚ごとに独立しており、葉ごとにアニメーションの開始を少しずつずらすことで、連続したアニメーションに見せています。 jQueryはアニメーションを自動的に開始させるため、classを付与しているだけだと思われます。
引数（ここでいうabeとかのことな）が同じなら当然上書きされるんよ(´・ω・`) $a [0] =1; $a [0] =5; って書いたらとうぜん $a [0] には5が上書きされるのは理解できるかね？ あなたのやりたいことの意図がハッキリせんのやが、もし別々の値を入れたいならば $arr[abe] [0] => ichiro; $arr[abe] [1] => jiro; みたいに、添字そのものを変えるしかないやでー。
1. フォーム ad の最後のエレメントは、「ボタン」だからです。 ボタンを除くため -1 してます。 2. myMess は、単なる「変数」です。文字列が入っています。
CSSのposition:absoluteを適用してSVGの上にvideoを重ねると良いでしょう。
ここを参考に、効かないかなぁ・・・ http://alphasis.info/2011/07/jquery-ui-show/ ※このページの下部の関連記事も参考になるかもです。 ※古い記事なのでそこはご注意ください。
sample: create img elements by for, while, and forEach - JSFiddle https://jsfiddle.net/sii_side/hs9vytf7/ forで可能です。が、forでなければならないというわけでもありません。
サイトでは見たこと無い現象ですが、Yahoo!アプリでたまにそんな感じになってる時がありますね。 深刻なニュースの見出しの横の画像がベッキーになってたりとか。 キャッシュじゃなければ画像が大き過ぎるとかは無いですかね。 支給された画像をちゃんと確認せずに使うと、実は解像度が300dpiとかでかなり大きいサイズだったという事もあったりします。 解像度が問題なければTinyPNGとかで全ての画像のファイルサイズを極力小さくしてみてはどうでしょう。 サーバーとかよりも端末とかブラウザ側の問題ではあると思います。
何の為のJavaScriptなのか分かるかな?? ページURLやページファイル名をifで条件分岐したらいいだけの話では?? ①ページURLを取得 ②取得した文字列を正規表現でファイル名のみを取り出す ③switch文でファイル名ごとに処理を変える END
ジャバスクリプトがあなたのブラウザで使えるかどうか調べてみましょう。 Source is too largeが気になりますが。 なにか大きいファイルがダウンロードされているのかも知れません。
簡素ですがscriptタグを生成しdefer属性を利用したサンプルです。 http://high.s1.xrea.com/qa/q14162150569.html q14162150569.htmlを呼び出し元として hoge0.jsもしくは hoge1.jsを呼び出すボタンを生成します。 ボタンをクリックした場合は、ページは切り替わらず HTMLを動的に変更したうえ、配置されたbackボタンを押すと q14162150569.htmlの初期状態に戻るといった内容です。参考まで。 メインとなるページのHTML（上記html)--- <script type=text/javascript><!-- function init(){ document.getElementById('o').innerHTML =''; for(var i=0,tmp;i<2;i++){ var b=document.createElement('input'); b.setAttribute('type','button'); b.setAttribute('value','goto hoge'+i); b.setAttribute('id','hoge'+i); window['xhoge'+i] = new s(i); b.addEventListener('click',function(){ window['x'+event.srcElement.id].r(); }); document.getElementById('o').appendChild(b); } } function s(){ this.src = './hoge'+arguments[0]+'.js'; this.r = function(){ var s=document.createElement('script'); s.setAttribute('src',this.src ); s.setAttribute('defer','defer'); s.setAttribute('type','text/javascript'); document.getElementById('so').appendChild(s); } } window.addEventListener('load',init); //--></script> <style type=text/css><!-- .hoge0{background:#f0f0ff;} .hoge1{background:#fff0f0;} //--></style> <div id=so></div> <div id=o></div> -------------------------------- hoge0.js /hoge1.js 同じ記述 var b=document.createElement('input'); b.setAttribute('type','button'); b.setAttribute('value','back'); document.getElementById('o').innerHTML ='page - hoge * <hr><div class=hoge*>aaaaaaa</div>' b.addEventListener('click',window['init']); document.getElementById('o').appendChild(b); document.getElementById('so').innerHTML='';
HTMLの使い方として間違っています。 ulタグの直下におけるのはliタグのみです。テキストを置くことは出来ません。
jQueryは確かに「どのブラウザでも正しく表示されるようにする」ために作られましたが、 もうそれから何年も経っており、ブラウザ間の差は極めて少なくなってきています。 正直この手のスタンスについては長年考えていますがハッキリ言えることは見つかっていません。 ですが一つ言えることとして、別の回答者さんがおっしゃっていることを踏まえましても、 「なぜそうしてそうなるのか分からないけれど、決まりだからそうする」 ということはできるだけ少ない方がいいとは思います。 まあ、質問者さんが「Webサイトで簡単な動的な動作をとりあえずできるようになりたい」と考えているのであれば、「jQueryを覚える」のでいいでしょう。 しかし「プログラミング言語を覚えたい」という気持ちが少しでもあるのなら最初から依存するのは避けるべきです。
おはこんばんにちゎ♪ URL を文字列としてクォーテーション '' で囲んでいないので、 「B.html」や「A.html」を変数名として認識してしまっています。 ▼──────── <button type="submit" data-role="none" onclick="addItem(); location.href=B.html">決定</button> ────────▲ を、 URL を '' で囲んで、 ▼──────── <button type="submit" data-role="none" onclick="addItem(); location.href='B.html'">決定</button> ────────▲ に直しましょうヽ(・ω・＊
JavaScript でデータを次のページへ持ち越す方法は、cookieを使う、ローカルストレージを使う、URLにパラメータを付けるのいずれかが簡単な方法です。
display:noneのテキストボックスを使うなら、<input type="hidden"/>でいいと思います。（わざわざCSS指定しなくても、未表示の為）
リファレンスを読むといいです。 下記ページの "bSortable" のところ。 http://legacy.datatables.net/usage/columns datatablesのリファレンスはサンプルコードが多く、英語苦手でもわかりやすくなっていると思うので日本語の情報探すよりきちんと読んでみるといいと思いますよ。
ほぼ丸投げ状態の質問ですね。。。 簡単なルール説明以外書かず，ほとんど 0 の状態で， HTML から全てを回答者に考えさせるような質問をしても その回答の解析にてこずる上，応用できないのが落ちですよ。 他人が作ったプログラムコードを全て理解するのは そのコードの作者以上の能力が必要なのですから。。。 なるべくコメント行を入れてわかりやすくした上で 極力，簡単(シンプル)な例にしたつもりですが↓。 <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>10個の数の足し算</title> <script type="text/javascript"> //指定時間(ミリ秒)を代入する変数 var ms = 0; //問題を代入する配列を作成 var arr = new Array(); //指定時間(ミリ秒)を代入する関数 function setMS(num){     ms = num; } //計算をスタートさせる関数 startCalc の定義 function startCalc(){     //指定時間(ミリ秒)が 0 であれば     if(ms == 0){         //秒数指定を促し この関数を抜ける         alert("秒数を選択してください。");         return;     }     //スタートボタンを非活性にする     document.my_frm.sta_btn.disabled = true;     //問題を代入する配列を初期化     arr.length = 0;     //関数 makeQuestion を実行     makeQuestion(); } //問題を作成する関数 makeQuestion の定義 function makeQuestion(){     //問題を代入する配列の要素数が 10 未満であれば     if(arr.length < 10){         //配列の要素に 1～9 のランダムな整数を追加         arr.push(Math.floor(Math.random()*9)+1);         //配列の最終要素を「足し算する数」の欄に表示         document.my_frm.qes_txt.value = arr[arr.length-1];         //指定時間(ミリ秒)に関数 waitTime を実行         setTimeout("waitTime()",ms);     }else{         //que_ara を非表示にする         document.getElementById("que_ara").style.display="none";         //ans_ara を表示する         document.getElementById("ans_ara").style.display="block";     } } //関数 waitTime の定義 function waitTime(){     //「足し算する数」の欄を空白にする     document.my_frm.qes_txt.value = "";     //200ミリ秒後に関数 makeQuestion を実行     setTimeout("makeQuestion()",200); } //関数 judgAnswer の定義 function judgAnswer(){     //回答メッセージの作成     var msg = "あなたの答え…";     msg += document.my_frm.ans_txt.value + "\n";     msg += "出題と解答…";     msg += arr.join("+") + "=";     for(var i=0, ans=0; i<arr.length; i++){         ans += arr[i];     }     msg += ans + "\n";     if(ans == parseInt(document.my_frm.ans_txt.value)){         msg += "○：正解！"     }else{         msg += "×：不正解!!"     }     //回答メッセージを表示     alert(msg);     //「足し算した結果」欄の初期化     document.my_frm.ans_txt.value = "";     //que_ara を表示する     document.getElementById("que_ara").style.display="block";     //ans_ara を非表示にする     document.getElementById("ans_ara").style.display="none";     //スタートボタンを活性状態にする     document.my_frm.sta_btn.disabled = false; } </script> </head> <body> <h2>10個の数を足し算せよ。</h2> <hr> <form name="my_frm"> <div id="que_ara" style="display: block;"> <label><input type="radio" name="tim_rdo" onclick="setMS(2000)">2秒</label> <label><input type="radio" name="tim_rdo" onclick="setMS(1000)">1秒</label> <label><input type="radio" name="tim_rdo" onclick="setMS(500)">0.5秒</label> <br> <input type="button" value="スタート" name="sta_btn" onclick="startCalc()"> <br> 足し算する数:<input size="4" name="qes_txt" readOnly> </div> <div id="ans_ara" style="display: none"> 足し算した結果:<input size="4" name="ans_txt"> <input type="button" value="OK" onclick="judgAnswer()"> </div> <br> </form> </body> </html>
重複投稿の規約違反で通報しました。 同じ内容で３件は悪質です。
バグがあるとのことです。 jquery.aw-showcase.jsの227行目にある if (myInterval) { pause_loop = true; clearInterval(myInterval); } を if (myInterval) { if (options.stoponclick) {pause_loop = true; clearInterval(myInterval); }} とすることでクリックしても停止しないようになります。 参考サイト http://www.awkwardgroup.com/sandbox/awkward-showcase-a-jquery-plugi...
この辺のページ↓をご参考にされれば良いかと。。。 「円・円弧を描く－JavaScript入門（HTML5編）」 http://www.pori2.net/html5/Canvas/040.html しかし， -(1/2)≦sin≦1 と書かれても 数学の座標と HTML など PC 上の多くのソフトでの座標とでは 上下が逆(y軸が逆)ですからね。。。 PCではモニタ画面の左上が (0,0) でしょう？ ですからイラレなど極一部のソフトを除いて 普通は上下が逆なんです。 ◎ 数学的な見た目ではこんな感じ↓でしょうか？ <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>Sample 1</title> </head> <body> <canvas id="cvs" width="400" height="400" style="border: 1px solid;"></canvas> <script> var cv = document.getElementById("cvs").getContext("2d"); cv.beginPath(); cv.arc(200, 200, 150, -Math.PI/2, Math.PI/6, false); //↓先頭の「//」を削除すれば円弧ではなく扇型になる //cv.lineTo(200,200); //cv.closePath(); cv.stroke(); </script> </body> </html> ◎ PCの画面的に見ればこんな感じ↓でしょうか？ <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>Sample 2</title> </head> <body> <canvas id="cvs" width="400" height="400" style="border: 1px solid;"></canvas> <script> var cv = document.getElementById("cvs").getContext("2d"); cv.beginPath(); cv.arc(200, 200, 150, -Math.PI/6, Math.PI/2, false); //↓先頭の「//」を削除すれば円弧ではなく扇型になる //cv.lineTo(200,200); //cv.closePath(); cv.stroke(); </script> </body> </html> そもそも根本的に良くわかっていないのですが 例えば sin が 1/2 というのは 1：2：√3 の三角形が描ける 1/12 回転ですよね？？ つまり 2π/12 = π/6 ラジアン...？？？ 私は数学を離れて数十年になるので この辺からして非常にアヤシイです。 その他は この回答の最初に書いたページでも参考にしてみてください。
＞potyomukin300さん ＞JavaScriptの変更の仕方が分からなくて困っています。 テーマとか関係なく、テーマの編集で必要な部分を修正する。
おはこんばんにちゎo(＾－＾＊ スコープ外でローカル変数にアクセスする方法としては、 ｢クロ―ジャ｣を利用した方法がまず考えられますが、 具体的に、 どういう処理でスコープ外の参照をしようとしていますか？ 「クロージャ」を使う方法でいちばん簡単な例は、 まず、 関数 myFunc() の中に、 もう一つ関数を定義してその関数を return します。 ▼──────── function myFunc(){ var a = 1; return localFunc; function localFunc(){ return a; } } ────────▲ この myFunc() を実行すると、 myFunc() 内で定義された関数 localFunc が返されます。 ▼──────── var func = myFunc(); ────────▲ こうすると、 グローバル変数 func に、 myFunc() 内でローカルに定義した関数 localFunc() が代入されるので、 ▼──────── func(); ────────▲ のようにすると、 ローカルで定義された localFunc() をグローバルで実行できます。 さらに、 ▼──────── var value = func(); ────────▲ のように func() の戻り値をグローバル変数 value で受け止めれば、 func() は、 myFunc() のなかで定義したローカル変数 a の値を return しているので、 グローバル変数 value で、 myFunc() のローカル変数 a の値を参照することができます'd(・ω・＊ ▼──────── function myFunc(){ var a = 1; return localFunc; function localFunc(){ return a; } } var func = myFunc(); var value = func(); alert( value ); // ローカル変数 a の値 ────────▲ こういう仕組みを、 その場その場にあった形に変えて組み込んでいくと、 スコープ外の変数への参照ができます。
$(セレクタ).on("load", function(){ }); で、対象の要素が読み込み完了した時点で処理ができます。 が、$.ajaxが完了した時点で要素ができていないって方に問題あるような気もするんですが。 読み込んだ結果で色をつけるんだったら、 $.ajax({ }).done(function(){ // ここで、要素を生成しつつ色つけ }); でいい気がするんですけど。
widthのスペルじゃないですか
サーバサイドで日付を埋め込むしかないんじゃないかな？
sample: loto7 simulator - JSFiddle https://jsfiddle.net/sii_side/2evsw833/
JavaScriptだけでは難しいでしょう。 最低でもJavaScriptを元にするならば、HTMLとCSSも必要です。
<script> addEventListener("contextmenu", function(e){ e.preventDefault(); }); </script> これだけでオッケーです。 質問のコードはかなり古いです。 右クリックを禁止しても、コピペする方法はいくらでもあります、念のため。
404 なので、対象のURLがないと言われています。 http://〜〜/favicon.ico が存在しないかURLが間違っています。
とりあえず、コードコピペして、確認してみましたが、 当方のIE11ではアコーディオンが正常に動作しました。 （colorbox.cssは、sample1からとったもの） ブラウザの種類によるものかもしれません。（手元にブラウザIEしかないので、確認できずすいません...）
>tenshi1406さん >何か良い方法を教えてください。 会社の情報や使っているものも開示せずにここで聞いても無理なので 良い方法は会社のかかりつけの業者に相談する事になります。
②のようなもの、は・・・書かれている内容、理屈は間違ってないのですが、このままだと結構問題でます。というか、コレ系のスクリプトは結構大変です。 また、jqueryもバージョンによって書き方が違う（1系でもちょいちょい違う）ので、モノによってはこれでは動かないと思います。 で。 結果的には、スマホ時のみ、横開きメニューを実現したいワケですよね。 であれば、jqueryで（だけで）実現しようとせずに、 css使う方がラクです。 css media max-width あたりで検索してもらって。 jqueryと似た感覚で、「モニター幅900px以下の時だけ効くcss」を設定できます。 あとはどうとでもできるはず。
リクエスト感謝（＊＾人＾＊） ■■■ name の命名規則について ■■■ まず、 name 属性の付け方が不正なので、 そこから説明しますね♪ name 属性は、 半角アルファベットから開始して、 /──────── ・半角の英数字 ・ハイフン（-） ・アンダースコア（_） ・コロン(:) ・ピリオド(.) ────────/ 以外は使ってはいけないことになっているので、 /──────── name="hoge[0]" ────────/ のような命名はルールから外れてしまいます。 あと、 管理のしやすさを考えると、 ひとかたまりのフォームは <form> で囲っておく方がイイでしょう。 この回答では、 以下の HTML コードを使って回答してきますヽ(＾－＾＊ /──────── <form name="frmInputs"> <input type="text" name="hoge_0"> <input type="text" name="hoge_1"> <input type="text" name="hoge_2"> <input type="text" name="hoge_3"> <input type="text" name="hoge_4"> <input type="submit" name="ok"> </form> ────────/ ■■■ フォームのコントロール ■■■ すべてのテキストボックスが入力されていて、 入力に重複がない場合だけ送信ボタンを表示する、 という処理なので、 各テキストボックスの value の重複をチェックして、 その結果によって送信ボタンの type を、 "hidden" と "submit" で切り替える、 っていう形になると思います'd(・ω・＊ アルゴリズムとして分かれるのは、 「重複チェック」の部分ですが、 何を理想とするかによって、理想のアルゴリズムは変わりますね。 あたしの場合は、 /──────── コーディングが簡単で、処理内容が見て分かりやすい ────────/ っていうのを理想とすれば、 各テキストボックスを、 その value をオブジェクトのキーに追加しながらスキャンしていき、 /──────── value in オブジェクト ────────/ が true だった場合に「重複あり」として判別しますね。 /──────── var input = (テキストボックスのリスト); var keys = new Object(); for(var i=0;i<input;i++){ if( input[ i ].value in keys ){ alert("同一の情報が入力されています"); } keys[ input[ i ].value ] = true; // value を keys のキーに追加 } ────────/ 未入力があったら「すべて入力してください」のアラートを出す処理は、 入力の段階で実行してしまうと、 テキストボックスを１つずつ順に入力していくときに、 最後のテキストボックスにたどり着くまで毎回アラートが出てしまうので、 入力の段階ではアラートしない方がイイですねヽ(・ω・＊ あと、 入力をチェックして条件を満たしたときに、 はじめて送信ボタンを表示するので、 <input name="ok"> はデフォルトで「type="hidden"」にしておきます。 すると、以下のようなコードになります＊＾－＾)o⌒★ /──────── <!--── 入力フォーム ──--> <form name="frmInputs"> <input type="text" name="hoge_0"> <input type="text" name="hoge_1"> <input type="text" name="hoge_2"> <input type="text" name="hoge_3"> <input type="text" name="hoge_4"> <input type="hidden" name="ok"> </form> <!--── スクリプト ──--> <script type="text/javascript"> //----] テキストボックスのリスト var input = document.querySelectorAll("form[name=frmInputs] input[type=text]"); //----] イベントセット for(var i=0;i<input.length;i++){ input[ i ].onchange = check } /*---- 関数 : 入力チェック ----*/ function check(){ var ok = true; var keys = new Object(); for(var i=0;i<input.length;i++){ if( ! input[ i ].value ){ ok = false; continue; } if( input[ i ].value in keys ) { alert("同一の情報が入力されています"); ok = false; break; } keys[ input[ i ].value ] = true; } document.frmInputs.ok.type = ok ? "submit" : "hidden"; } </script> ────────/ jQuery を使って記述しても、 処理内容がシンプルなだけにそんなに変わりませんね。 /──────── ～ 省略 ～ <!--── スクリプト ──--> <script type="text/javascript"> //----] テキストボックスのリスト var input = $("form[name=frmInputs] input[type=text]"); //----] イベントセット $( input ).on( "change", check ); /*---- 関数 : 入力チェック ----*/ function check(){ var ok = true; var keys = new Object(); $( input ).each( function( i, elem ){ if( ! elem.value ){ ok = false; return true; } else if( elem.value in keys ){ alert("同一の情報が入力されています"); ok = false; return false; } keys[ elem.value ] = true; } ); $( document.frmInputs.ok ).attr( "type", ok ? "submit" : "hidden" ); } </script> ────────/
http://phpjavascriptroom.com/?t=html5&p=tag_embedded_content video、embedあたりですかね。 JavaScriptでは、jQuery使えば簡単で、 $(function(){ $.ajax({ url : "hogehoge.html", /* その他パラメータいろいろ */ }).done(function(data){ $("#frame").append(data); }); }); <div id="frame"></div> みたいに（ざっくりとですが）やれば、ajaxで読み込んで、div要素内に追加できます。
if(array.join("").length > 0) { window.alert('存在する'); } arrayの中身が文字列に限定されているのであれば、空文字で連結して長さが0より大きい場合、という判定が可能かと思います。 if(array.toString().match(/[a-z]/)) { window.alert('存在する'); } toStringで文字列化した後に正規表現にかけるという方法もありそうです。
>tomiyuna_0626さん2016/7/2223:47:21 >htmlでマリオの走るときのはやさ歩いているように画像を切り替える方法を教えてくださいjavascriptも得意です HTMLではできないので、javascriptが得意ならjavascriptでやってみるといいと思います。
＞②Javascriptで、ExcelやLibreOfficeのスプレッドシートを利用して 印刷させたりしています。 具体的にどういうプログラムを組んでいるのか実例を載せた方が良いです。
http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1411219314... 変数の変更なら恐らくこれで出来ますが、「関数の値」とは何でしょうか？ どこがわからない（難しい）のかわからないので、そこを詳しく説明してもらえると解説しやすいです。
paiza(パイザ) 利用規約 第３章第１１条に違反しています
おはこんばんにちゎ♪ 詳細の返信、ありがとでした（＾▽＾＊ やりたい事が分かった気がするので、回答しますね。 返信でもいいと思ったけど、 見づらくなりそうなので、再回答します♪ ■■■ リストの管理について ■■■ まず、 シャッフルする画像、リンク先、テキストのリストだけど、 いまのやり方だと、 それぞれのリストが別々に管理されているので、 あとあと管理がしにくい気がします。 連想配列を使うと、 リストアイテムごとに、 画像、リンク先、テキストをセットにして管理できるので、 メンテナンスがしやすくなると思いますょ♪ 連想配列とは、 「キー」と「値」をセットにしてを保持する、 データのセットのようなものです。 例えば、 名前「ひろし」、年齢「37」、趣味「独り酒」というデータを "who" という名前の連想配列に入れて管理すると、 /──────── who = { "名前": "ひろし", "年齢": 37, "趣味": "独り酒" }; ────────/ っていう感じになります。 今回かきだそうとしている、 画像、リンク先、テキストを連想配列にして、 それを、配列で管理するわけですね。 配列の名前を shuffleList とすれば、 /──────── var shuffleList = [ { "src": "画像URL(1)", "href": "リンク先URL(1)", "text": "テキスト(1)" }, { "src": "画像URL(2)", "href": "リンク先URL(2)", "text": "テキスト(2)" }, { "src": "画像URL(3)", "href": "リンク先URL(3)", "text": "テキスト(3)" }, …, { "src": "画像URL(N)", "href": "リンク先URL(N)", "text": "テキスト(N)" } ] ────────/ っていう感じになります。 リストから値を取り出す時は、 例えば n 番目のアイテムの画像 URL であれば、 /──────── shuffleList[ n ].src または shuffleList[ n ][ "src" ] ────────/ のようにアクセスします。 ■■■ 要素の書き出し ■■■ さて、 このリストを使ってランダムに番号を選び、 あとは書き出すだけなので、 以下のようになります。 /──────── var n = Math.floor( Math.random()*shuffleList.length ); document.write("<a href='"+shuffleList[ n ].href+"' target='_blank'>"); document.write("<img src='"+shuffleList[ n ].src+"' style='border:solid 1px #333;' width='300' >"); document.write("<div class='jstext'>"+shuffleList[ n ].text+"</div>"); document.write("</a>"); ────────/ これで完了です*゜▽＾)b' この場合は、 /──────── <a href="～" target="blank"> <img src="～" style="border:solid 1px #333" width="300"> <div class="jstext">～</div> </a> ────────/ ってなります。 /──────── <a href="～" target="blank"> <img src="～" style="border:solid 1px #333" width="300"> </a> <div class="jstext">～</div> ────────/ にしたい場合は、 /──────── var n = Math.floor( Math.random()*shuffleList.length ); document.write("<a href='"+shuffleList[ n ].href+"' target='_blank'>"); document.write("<img src='"+shuffleList[ n ].src+"' style='border:solid 1px #333;' width='300' >"); document.write("</a>"); document.write("<div class='jstext'>"+shuffleList[ n ].text+"</div>"); ────────/ のように入れ替えればイイだけですね♪ ■■■ もう一つのやり方 ■■■ あと、 document.write() で書いてもいいのだけど、 DOM を使って要素を追加していく方法もあるので、 紹介しておきますねヽ(＾－＾＊ まず、 コンテンツを書き出したい場所に <div> 要素などを置いておきます。 /──────── <div id="shuffle_content"></div> ────────/ そして、 この直後に <script> タグを配置して、 書き出すための Javascript を書いていきます。 /──────── <div id="shuffle_content"></div> <script type="text/javascript"> </script> ────────/ リストの作成と、 ランダム番号の取得まではまったく同じですが、 要素を書き出すところで document.write() を使わず、 document.createElement() で要素オブジェクト elem を生成し、 それを親要素 parent に追加する、 っていう方法で書き出していきます。 /──────── var elem = document.createElement("要素名"); parent.appendChild( elem ); ────────/ このコードは、 下記のように１本にまとめることも出来ます。 /──────── var elem = parent.appendChild( document.createElement("要素名") ); ────────/ この方法の実施例が、以下のようになります＊゜▽゜)o⌒☆ /──────── <div id="shuffle_content"></div> <script type="text/javascript"> var shuffleList = [ { "src": "画像URL(1)", "href": "リンク先URL(1)", "text": "テキスト(1)" }, { "src": "画像URL(2)", "href": "リンク先URL(2)", "text": "テキスト(2)" }, { "src": "画像URL(3)", "href": "リンク先URL(3)", "text": "テキスト(3)" }, …, { "img": "画像URL(n)", "href": "リンク先URL(n)", "text": "テキスト(n)" } ]; var n = Math.floor( Math.random()*shuffleList.length ); //----> 親要素を取得 var shuffle_content = document.getElementById("shuffle_content"); //----> 親ブロックに <a> を追加 var a = shuffle_content.appendChild( document.createElement("a") ); a.setAttribute( "href", shuffleList[ n ].href ); a.setAttribute( "target", "_blank" ); //----> <a> に <img> を追加 var img = a.appendChild( document.createElement("img") ); img.src = shuffleList[ n ].src; img.width = 300; img.style.border = "solid 1px #333"; //----> <a> に <div> を追加して、テキストを書き入れる var jstext = a.appendChild( document.createElement("div") ); jstext.className = "jstext"; jstext.innerHTML = shuffleList[ n ].text; </script> ────────/ この場合は、 /──────── <div id="shuffle_content"> <a href="～" target="blank"> <img src="～" style="border:solid 1px #333" width="300"> <div class="jstext">～</div> </a> </div> ────────/ っていう構造になります。これを /──────── <div id="shuffle_content"> <a href="～" target="blank"> <img src="～" style="border:solid 1px #333" width="300"> </a> <div class="jstext">～</div> </div> ────────/ のようにしたい場合は、 /──────── var jstext = a.appendChild( document.createElement("div") ); ────────/ を /──────── var jstext = shuffle_content.appendChild( document.createElement("div") ); ────────/ に変えるだけです。 ■■■ どっちがいいの？ ■■■ どっちの方法でも大丈夫です。 document.write() の方が簡単な場合は document.write() でもいいし、 document.createElement() で追加する方が、 HTML の構造を管理しやすい場合はこっちを使うとイイと思います（＾－＾＊
>上記サイト様のサンプルではchromeでもカクカクしないのですが、考えられる原因は何かありますか？ JavascriptとCSSの差異がきちんと処理されていないのが原因だと思われます。
要素の順序から対象に辿り着くには、まず.faから.Aまで上り、次に.nextで隣（弟）に進むという手順になります。 .parent().parent().parent()と1つずつ上っていってもいいですし、.parents()でもいいです。ここでは、祖先要素のうち直近の要素を選択する、$.closestを使ってみます。 sample: traversing node tree by jQuery.closest - JSFiddle https://jsfiddle.net/sii_side/ehqd7hx3/ 【参考】 jQuery リファレンス：closest http://www.jquerystudy.info/reference/traversing/closest.html
おはこんばんにちゎ＊＾－＾)ﾉ ■■■ しくみ ■■■ 質問添付のサイトで、 中心から背景色が広がっていく演出は、 以下のような HTML の構成で成り立っています'd(・ω・＊ （ class 名などは実際と少し変えています ） /──────── <div class="box"> <div class="inner"></div> <div class="inner-text"></div> </div> ────────/ この状態で、 .box には背景の画像を設定し、 その中の .inner と .inner-text は、 「position:absolute」で重ね合わせています。 .inner は中心から広がる背景色のパーツとして機能し、 .inner-text は、 いちばん前面に /──────── Airbnb ホストの皆様 ホスト業務は 面倒 ではありませんか？ ────────/ のようなテキストを「背景画像」として表示させています。 さて、 マウスを乗せると背景が中心から広がるしくみは、 CSS の transition によるものです。 まず、 .inner を、 サイズを小さくして .box の中央に表示します。 中央に表示する方法としては、 width, height を適当な小さい値で設定し、 100% からそれらを引いた値を left や top に指定して、 中央に表示されるよう座標を調整しています。 あとは、 「opacity」を「0」にして透明にしたり、 「border-radius:50%」で円形にしたりと、 細かな表示の設定です。 /──────── .inner{ position: absolute; left: 45%; top: 45%; width: 10%; height: 10%; border-radius: 50%; background: #b0b0b0; opacity: 0; } ────────/ そして、 .box にマウスを乗せたときの .inner に対しては、 .box を埋めつくす程度に縦横を大きくし、 不透明度を設定して見えるようにします。 left, top も、 .inner が中央に来るように大きさに合わせて調整します。 /──────── .box:hover .inner{ left: -50%; top: -50%; width: 200%; height: 200%; opacity: 0.5; } ────────/ あとは、 「.inner」と「.box:hover .inner」の間を、 「transition」でアニメーションさせているだけですヽ(゜▽＾＊ /──────── .inner{ … transition: all 0.3s linear 0s; } ────────/ このケースでは、 背景色用に <div> 要素を使っていますが、 .box の :before 擬似要素を使えば、 HTML 側で <div> を使う必要が無くなります。 /──────── <div class="box"> <img class="inner-text" alt="" src="～"> </div> <style type="text/css"> .box{ position: relative; width: 240px; height: 320px; overflow: hidden; background: url("～背景画像 URL～"); } .box:before{ position: absolute; left: 45%; top: 45%; width: 10%; height: 10%; border-radius: 50%; background: #f69; opacity: 0; transition: all 0.3s linear 0s; } .box:hover:before{ left: -50%; top: -50%; width: 200%; height: 200%; opacity: 0.5; } .box .inner-text{ position: absolute; left: 0px; top: 0px; z-index: 20; width: 100%; height: 100%; } </style> ────────/ ■■■ 開発者ツールによる検証 ■■■ 閲覧中のページの機能が どうやって動いているのかは、 FireFox や Google Chrome、IE などのブラウザで F12 を押すと開く 開発者ツールから検証することができます'd(＾－＾＊ まず、 F12 を押して開発者ツールを開いたら、 この回答に添付の画像のようなマークがあるのでクリックします。 このマークをクリックしたあとに、 ページ上の調べたい要素をクリックすると、 開発者ツールの構造ツリーの中から、 クリックした要素のタグが選択されます。 選択されたタグは、 構造ツリー上には style 属性のスタイルシートが表示されていて、 style が書き換えられると、 その変化がリアルタイムで反映されるので、 スタイルシートの変化の様子を目で見ることができます。 Javascript で style を書き換えているような機能は、 この style 属性の変化をみれば、 どういう仕組みで動いているのか一目瞭然です。 Javascript で動かしていないアニメーションの場合は、 CSS の方をチェックすると仕組みが分かります。 前記のように、 開発者ツールの要素選択で調べたい要素を選択すると、 構造ツリーと別枠で、 選択中の要素の CSS 指定一覧が表示されます。 その中から、 「transition」などのアニメーション設定を探せば、 どんな仕組みで動いているかが分かります。 他にも、 Javascript で class 名を切替えているような機能は、 構造ツリー上に class 名の変化がリアルタイムで反映されるし、 Javascript で HTML 構造を変化させるような機能では、 構造ツリーにその変化もリアルタイムで表示されます。 以上のように 開発者ツールで調べたい要素を選択し、 構造ツリーのリアルタイムな変化と、 CSS 一覧の内容をみくらべることで、 いろいろな機能のしくみを検証することができます*゜▽＾)b'
①iが宣言されていない var i=0; 等の宣言がないにも関わらず、使用しているため、エラーが出ている。 ②whileループが無限ループ while (0 < tokyo.length) では、無限ループです。 ③ ②の為、tokyo[i].value;で、存在しない配列を参照する。 i=i+1でカウントアップしていきますが、whileが無限ループとなっているため、 var tokyo = document.getElementsByName('tokyo');で取得した tokyoの配列以上の添え字で参照しようとしてエラーとなります。 ④そもそも論 htmlとjavascriptを使って、簡易的なショッピングサイトを作成しています。 とありますが、ユーザーが入力した値について、どのようにサイト管理者は把握するつもりでしょうか。 HTMLとJavaScriptだけでは、ブラウザ上での動作だけですので、サイト管理者側では、ユーザー（客）側が、何を選んだか、何個選んだかを把握できませんよ。
おはこんばんにちゎ＊＾－＾)o 詳しく解説したら、 えっらい長くなりました……σ(＿＿;σ…ﾊﾟﾀ 時間のあるときに、覚悟して読んでみてください(＾－＾； ■■■ ホームページを公開する ■■■ ホームページの本体は、 HTML ファイル（HTML 形式のテキストファイル）で出来ています。 この HTML ファイルは、 ページの内容を HTML のコードで記述した、 ただのテキストファイルなので、 Windows パソコンに標準装備されている「メモ帳」とかでも作れます。 ページに画像や音声を載せるときは、 HTML ファイルのなかに、 画像ファイルや音声ファイルを読み込むコードを記述することで、 画像ファイルを表示したり、音声ファイルを再生したりします。 こうして作成した HTML ファイルと、 HTML で読み込む画像や音声などのファイル一式を、 インターネット上に設置された 「Web サーバー」っていうコンピュータに送信（アップロード）すれば、 作成したホームページがインターネット上に公開されます。 ファイルをアップロードするサーバーは、 自分で用意するのは経済的にも技術的にも大変なことなので、 通常は「レンタルサーバー」を利用します。 「レンタルサーバー」の運営サイトにアクセスして、 そこでアカウントを作成すると、 ファイルをアップロードするスペースを提供してもらえますヽ(・ω・＊ レンタルサーバーでアカウントを作成したら、 あとは、 作成したホームページのファイル一式をアップロードすれば、 公開完了です＊゜▽＾)b' ■■■ 作成ソフトを用意する ■■■ 「メモ帳」のような標準のテキストエディタでも作れますが、 HTML 編集用の「HTML エディタ」を使うと、 コードが色分けされて見やすかったり、 ページのプレビューがワンタッチでできたりと、 HTML のコーディング作業がしやすくなります。 現状、使いやすくてオススメなエディタは /──────── ・StyleNote5 [ http://sn.lowedge.com/ ] ・HTML Project2 [ http://beginners-hp.com/html_project2_about.html ] ・ezHTML [ http://www.w-frontier.com/software/ezhtml.html ] ────────/ あたりです。どれも無料で使えます♪ 使いやすさからいうと「 StyleNote5 」がベストなのだけど、 このソフトは最近バージョンアップしてから、 ちょっと致命的なバグが起きています。 [ HTML5 の不具合 ] http://support.lowedge.com/support/topic/ver-5-20-%E3%82%AF%E3%83%A... 使いやすさや機能性がずば抜けて優秀なソフトなだけに残念です。 「StyleNote5」を使う場合は、 実行ファイル「sn5.exe」をあらかじめ別の場所にコピーしておいて、 バグが起きたときは、 「タスクマネージャ」からソフトを強制終了してから、 実行ファイル「sn5.exe」を、 コピーしておいた「sn5.exe」で上書きするようにしましょう。 現状は「HTML Project2」がいちばん無難です。 ■■■ 白紙のページをつくる ■■■ ソフトを用意出来たら、 さっそくページを作ってみましょう。 ここでは、 とりあえずのコードの書き方だけを説明するので、 HTML、CSS、Javascript の基本的な知識については、 別途、各自で調べて身に着けてくださいm(__)m HTML は、 文書のパーツをタグで囲って記述することで、 囲われた部分に文書パーツとしての役割を与えます。 例えば、 大見出しのタグは <h1> というタグです。 大見出しにしたい部分を <h1>～</h1> で囲うと、 文書の構成のなかで、大見出しとしての役割を持ちます。 タグの種類はいろいろありますが、 /──────── ・段落 ： <p>文章</p> ・ハイパーリンク : <a href="リンク先URL">リンク文字</a> ・画像 : <img src="画像ファイルのパス"> ・汎用ブロック : <div>コンテンツ</div> ────────/ などが頻繁に使われるタグです。 HTML には、 最低限必要なコードやタグがいくつかあって、 それらのタグを記述した状態が、 HTML 文書としての「白紙の状態」です。 まずは、白紙のページを作りましょう。 ソフトを起動したら、 「新規作成」から新規ファイルを開きます。 最初に「文書型宣言（DOCTYPE 宣言）」を書きます。 これは、 記述する HTML のバージョンを宣言するコードで、 インターネットブラウザでページを表示するとき、 この宣言をもとにしてコードがページに変換されます。 文書型宣言は、 以前はすごく長くて面倒くさいコードでしたが、 最新の HTML5 になってから、すっきり簡単になりました。 /──────── <!DOCTYPE html> ────────/ これだけです。 そのあとに、 HTML 文書の外枠となる <html>～</html> を記述します。 /──────── <!DOCTYPE html> <html> </html> ────────/ <html> タグの中身を、 ページには表示されない設定情報などを記述する <head> 要素と、 ページに実際に表示される本文を記述する <body> 要素に分割します。 /──────── <!DOCTYPE html> <html> <head> </head> <body> ～ コンテンツ本文 ～ </body> </html> ────────/ 最後に、 <head>～</head> のなかに、 ページのタイトルを決める <title> タグを記述します。 /──────── <!DOCTYPE html> <html> <head> <title>ページのタイトル</title> </head> <body> ～ コンテンツ本文 ～ </body> </html> ────────/ はいっ♪ これで「白紙の HTML 文書」ができました。 どのページを作るときも、 この状態からページの内容を作っていくことになります。 「ファイル」メニューの「保存」から、 このファイルを「index.html」の名前で保存しましょう。 なお、 ホームページで使うファイル名やフォルダ名は、 半角英数字のみにしておきましょう。 保存したファイルを、 閲覧するページとして開くときは、 保存したファイルのアイコンをダブルクリックすることで、 インターネットブラウザが起動してページが表示されます。 編集するときは、 今回使った HTML エディタでファイルを開きます。 HTML エディタで編集中は、 ファイルのアイコンをいちいちダブルクリックしなくても、 エディタにはワンタッチの「プレビュー」機能が付いているので、 ワンタッチでプレビューが可能です。 プレビューのボタンなどは、 エディタによって違うので、各エディタの操作方法を参照してください♪ ■■■ 音声ファイルを再生する ■■■ ページで音声ファイルを再生するには、 HTML ファイルと一緒に、 音声ファイルを用意しないといけません。 音声ファイルの形式は、 現状では mp3 ファイルを用意すれば、 だいたいどのブラウザでも対応していて再生できます。 HTML ファイルが保存されているフォルダに、 音声ファイルを入れるフォルダを作って、 その中に音声ファイルを置いておきます。 /──────── [ ホームページ用のフォルダ ] . . ├─[ audio ] . . │ . . . └─ sample.mp3 . . └─ index.html ────────/ この状態で、 HTML ファイル [ index.html ] から、 音声ファイル [ sample.html ] を参照するためのパス（経路）は、 /──────── ./audio/sample.mp3 ────────/ っていうふうになります。 「./」は「同じフォルダ内」という意味で、 「audio」は [ audio ] フォルダを指しています。 「/」は「そのフォルダの中」っていう意味なので、 /──────── 同じフォルダ内にある [ audio ] フォルダの中の [ sample.mp3 ] ────────/ ってい意味ですね。 HTML ファイルでは、 ページ内で再生したい音声ファイルを、 パスを指定して読み込みます。 音声ファイルを読み込むタグは <audio> タグです。 /──────── <audio src="./audio/sample.mp3"></audio> ────────/ <audio> タグもページのコンテンツなので、 「白紙のページ」のなかの <body>～</body> のなかに記述します。 /──────── <!DOCTYPE html> <html> <head> <title>ページのタイトル</title> </head> <body> 音声ファイルを読み込むよっ♪ <audio src="./audio/sample.mp3"></audio> </body> </html> ────────/ ただし、 この <audio> タグは、 通常は音声ファイルを読み込むだけで、 ビジュアルとしてはページには表示されません。 <audio> タグに「controls」属性を指定すると、 オーディオプレイヤーの操作パネルが表示されます。 /──────── <audio src="～" controls></audio> ────────/ 読み込んだ音声を、 ページを開いたときに自動再生する場合は、 <audio> タグに「autoplay」属性を指定します。 /──────── <audio src="～" autoplay></audio> ────────/ ■■■ クリックして再生 ■■■ 読み込んだ音声ファイルを、 ボタンをクリックして再生するには、 <audio> 要素に対して、 Javascript を使って「再生」の指令をだします。 クリックしたときに Javascript の処理を発動させるには、 いろいろな方法がありますが、 ここでは、 ボタン要素 <button> の onclick 属性に、処理を指定します。 /──────── <button onlick="～再生するための Javascript コード～"> 音声を再生 </button> ────────/ Javascript で <audio> 要素の音声を再生するには、 /──────── ( <audio> 要素 ).play(); ────────/ というコードを書くのだけど、 ( <audio> 要素 )っていう部分に、 Javascript で <audio> 要素をオブジェクトとして取得したものが必要です。 <audio> 要素を Javascript で指名して取得するために、 <audio> タグに適当な id 属性を付けておきましょう。 /──────── <audio id="myAudio" src="./audio/sample.mp3"></audio> ────────/
イベントの発生源となった最深の要素は、event.targetで参照することができます。バブリング、またはキャプチャリング中の、現在通過中の要素はevent.currentTargetです。 sample: detecting event target from event object - JSFiddle https://jsfiddle.net/sii_side/9cmyqp55/ ですので、event.targetがa要素の場合とそうでない場合、という分岐が可能かと思います。 もちろん、逆にevent.targetがdiv要素である場合、という分岐のさせ方も可能です。a要素だけでなくp要素も含めたくないのであれば、こちらを選択することとなるでしょう。
子孫要素を基準にその祖先要素を選択する方法は、Selectors Level 4で策定中です。現在はまだ各ブラウザとも実装されていないようですので、CSSでは不可能ということかと思います。 実装が進めば、 li:has(.aaa) { display: none; } こんな感じで、そのうち書ける日が来るのではないかと思います（ブラウザで実際に試せないので「恐らく」です）。 そのため、今やるならGreasemonkeyとかTampermonkeyからユーザースクリプトで消すしか無いのではないでしょうか。
javax.scriptのjarファイルをlibフォルダにいれましたか？
基本的に列構造は一度決めたら変えません。 id date hoge ------------------------------- 1 2016/08/04 111111111 2 2016/08/04 222222222 3 2016/08/04 333333333 4 2016/08/05 000000000 5 2016/08/05 999999999 6 2016/08/05 888888888 みたいな構造にする、という方法はあります。
onclick等のイベントで、デフォルトでの動作（submit等）を発生させないときにreturn false;を指定します。(イベント自体を無効にする） <input type="submit" onClick="func();"/> function func(){ // aaaが0だったら、submitはしない if(aaa == 0){ return false; } } ということは、入れないと、イベント発生させたくないときにも、イベントが発生して、予定外の処理をするようなことになってしまいます。
おはこんばんにちゎo(＾－＾＊ ■■■ しくみ ■■■ やりたいことを一望してみると、 どうやら「あいさつ」と「野菜」のペアが /──────── (1) あいさつ=こんにちは, 野菜=トマト (2) あいさつ=ありがとう, 野菜=ピーマン (3) あいさつ=さようなら, 野菜=ニンジン ────────/ …と３通りあって、 ボタン A を押したときは (1) だけ、 ボタン B を押したときは (1)+(2) 、 ボタン C を押したときは (1)+(2)+(3)、 っていうふうに表示をコントロールするっていう内容ですね。 なので、 まずは「あいさつ」と「野菜」の組み合わせを連想配列にしてみます。 /──────── (1) { "greeting": "こんにちは", "vegetable": "トマト" } (2) { "greeting": "ありがとう", "vegetable": "ピーマン" } (3) { "greeting": "さようなら", "vegetable": "ニンジン" } ────────/ この３つの連想配列を、 配列にいれてデータのリストとして作っておきましょう＊・ω・)b' /──────── var DataList = [ { "greeting": "こんにちは", "vegetable": "トマト" }, { "greeting": "ありがとう", "vegetable": "ピーマン" }, { "greeting": "さようなら", "vegetable": "ニンジン" } ]; ────────/ …っはい♪ これで準備が完了しました'd(゜▽＾＊ このデータを使えば、 ボタンと表示を簡単に連動させられますね。 ボタン A を押したときは、配列 DataList の１番目だけを表示。 ボタン B を押したときは、配列 DataList を２番目まで表示。 ボタン C を押したときは、配列 DataList を３番目まで表示。 っていう処理をすればいいですね♪ ■■■ コードの作り方 ■■■ HTML で各要素を構成していきます。 まず、 A、B、C の３つのボタンを用意します。 ボタンは適当なブロックで囲っておくと、 周囲のコンテンツと分離できて扱いやすいです。 ここでは <form> 要素のなかに入れておきましょう。 /──────── <form name="buttons"> <input type="button" value="A"> <input type="button" value="B"> <input type="button" value="C"> </form> ────────/ その下に、 「あいさつ」と「野菜」の見出しと、 テキストを表示するためのブロックを用意します。 これも 見出しごとにブロックで区切っておくと、管理しやすいです。 テキストを表示するブロックには、 共通のクラス名をつけておくと Javascript で操作しやすいです。 /──────── <div id="greeting"> <h1>あいさつ</h1> <div class="output"></div> </div> <div id="vegetable"> <h1>野菜</h1> <div class="output"></div> </div> ────────/ 以上で HTML は出来上がり。 Javascript を記述する為の <script> タグを用意しましょう。 /──────── <script type="text/javascript"> ～ ここに Javascript のコードを記述していく </script> ────────/ まず、 先ほど説明した配列 DataList を定義しておきますね。 /──────── var DataList = [ { "greeting": "こんにちは", "vegetable": "トマト" }, { "greeting": "ありがとう", "vegetable": "ピーマン" }, { "greeting": "さようなら", "vegetable": "ニンジン" } ]; ────────/ あとは、 各ボタンを押したときに実行する処理を、 Javascript の関数として作っておきますヽ(・ω・＊ 各ボタンを押したときに実行する処理は、 /──────── 配列 DataList の内容を○番目まで表示する ────────/ っていう内容でしたね。 関数名を outputData() とでもしておくと、 /──────── function outputData( n ){ //----] テキストの出力先を取得 var output = { "greeting": document.querySelector("#greeting .output"), "vegetable": document.querySelector("#vegetable .output") }; //----] n 番目までのデータを取り出す var data = { "greeting": new Array(), "vegetable": new Array() }; for(var i=0;i<n;i++){ data.greeting.push( DataList[ i ].greeting ); data.vegetable.push( DataList[ i ].greeting ); } //----] 取り出したデータを連結して表示 output.greeting.innerHTML = data.greeting.join("、"); output.vegetable.innerHTML = data.vegetable.join("、"); } ────────/ これで関数は完成です。 あとは、 この関数を、各ボタンの onclick に仕込むだけ♪ /──────── <form name="buttons"> <input type="button" value="A" onclick="outputData(1)"> <input type="button" value="B" onclick="outputData(2)"> <input type="button" value="C" onclick="outputData(3)"> </form> ────────/ 以上で完成ですo(＊＾▽＾＊)o ■■■ 実施例 ■■■ 以上をまとめて、 全体のソースの実施例を示します＊・ω・)o⌒★ /──────── <!DOCTYPE html> <html> <head> <title>ページタイトル</title> </head> <body> <!--── ボタン ──--> <form name="buttons"> <input type="button" value="A" onclick="outputData(1)"> <input type="button" value="B" onclick="outputData(2)"> <input type="button" value="C" onclick="outputData(3)"> </form> <!--── 出力先 ──--> <div id="greeting"> <h1>あいさつ</h1> <div class="output"></div> </div> <div id="vegetable"> <h1>野菜</h1> <div class="output"></div> </div> <!--── スクリプト : データ表示 ──--> <script type="text/javascript"> /*---- データリスト ----*/ var DataList = [ { "greeting": "こんにちは", "vegetable": "トマト" }, { "greeting": "ありがとう", "vegetable": "ピーマン" }, { "greeting": "さようなら", "vegetable": "ニンジン" } ]; /*---- 関数 : n 番目までのデータを出力 ----*/ function outputData( n ){ var output = { "greeting": document.querySelector("#greeting .output"), "vegetable": document.querySelector("#vegetable .output") }; var data = { "greeting": new Array(), "vegetable": new Array() }; for(var i=0;i<n;i++){ data.greeting.push( DataList[ i ].greeting ); data.vegetable.push( DataList[ i ].vegetable ); } output.greeting.innerHTML = data.greeting.join("、"); output.vegetable.innerHTML = data.vegetable.join("、"); } </script> </body> </html> ────────/
文法の間違いが多すぎると言われています。 考えられるのは ・根本から間違えて理解している → はじめから勉強しなおす ・前の方の間違い(それ自体は文法上正しい)のせいで 後ろの文が多数間違いとみなされてしまっている → プログラムを最初から1行1行見直す
>hana0meibokuさん 他のJSが干渉しているとおもいます。 まずは、他のプラグイン等をはずして試して原因を特定してみると良いと思います・
if( x === undefined){ } で、undefined判定できます。（否定の場合は!==)
>tenkuzitakeru_ghostさん2016/7/2009:00:01 >どういうプログラムにしたらいいですかわかる方至急教えてください 至急必要ならやったものの提示くらいは必要です。 それ以外で至急必要な場合は業者に頼むべきです。
一定間隔で表示する方法は、setIntervalを使用します。 また、ラジオボタン選択での切り替えは、ラジオボタンごとに、setIntervalで指定する時間を変化させます。 合計の確認部分はありませんが、一定間隔表示と、ラジオボタン切り替えの処理を作成してみましたので、ご参考ください。 <html> <head> <meta charset="UTF-8"> <style type="text/css"> div#disp{ width : 100px; height : 100px; text-align : center; vertical-align : middle; display : table-cell; border : 2px solid black; font-size : 40px; } </style> <script type="text/javascript"> /* 変数 */ var timer_id = undefined; var sum = 0; var count = 0; var MAX_COUNT = 5; // 最大表示回数 /* 文字表示開始 */ function showDisp(timer){ // 動作中の場合は、動作を止める if(timer_id !== undefined){ clearInterval(timer_id); count = 0; } // 一定間隔起動 timer_id = setInterval( function(){ // 最大回数に達したら終了 if(count == MAX_COUNT){ document.getElementById("disp").innerText = ""; count = 0; sum = 0; clearInterval(timer_id); return; } // 乱数から0～9の数字を生成 var rand = Math.floor( Math.random() * 10 ) ; // 画面に表示 document.getElementById("disp").innerText = rand; // 合計を計算 sum = sum + 1; // カウントアップ count = count + 1; }, timer ); } </script> </head> <body onLoad="showDisp(1000)"> <!-- 数字表示部分 --> <div id="disp"></div> <!-- 表示速度選択 --> <table border="0"> <tr> <td><input type="radio" id="srow" onClick="showDisp(1000);" checked>低速</td> <td><input type="radio" id="middle" onClick="showDisp(500);">中速</td> <td><input type="radio" id="fast" onClick="showDisp(250);">高速</td> <td><input type="radio" id="veryfast" onClick="showDisp(100);">超高速</td> </tr> </table> </body> </html>
>supernova_osafuさん >フォームから送信された画像データを$_FILEではなく、$_POSTで受け取り、テキストファイルに書き込むということなどは可能でしょうか？ 可能ですね。
HTMLはjavasciptでCSSのdisplayをnone⇔blockに切り替えています。 オッズデータは http://race.netkeiba.com/ に非同期のPOST送信でリクエストを投げています。 送信しているフォームデータは、ブラウザの開発者ツール⇒ネットワーク、で確認できます。
>kazuyan774さん >設定の何かが間違っているとは思うのですが、いかんせんスキルがない・周りにもいないということでこちらに質問することとなりました。 設定ではありません。プログラムになります。
まず、jQuery UI用のCSSファイルが読み込まれていません。 CSSを読み込まないと、想定した画面が表示されません。 以下の行を追加してください。（なお、cssファイルはダウンロードして、jssフォルダに入れてください） <link rel="stylesheet" href="jss/jquery-ui.css"/> 上記CSSを導入しても、スライドバーが表示されない場合は、フォルダの構成があっていない可能性があります。（JSファイル、CSSファイルが読めてない）
Wikipedia - JSON https://ja.wikipedia.org/wiki/JavaScript_Object_Notation 「JSONはJavaScriptにおけるオブジェクト表記法のサブセット」 サブセットはこの場合「一部制限が課されたもの」という意味ですが，具体的に何が違うのかというと… ・コメントを書けない ・文字列リテラルは ' " のどちらかではなく，" で括るように統一しなければならない ・オブジェクトのキーも必ず " で括らなければならない ・最後の要素の後に , をつけてはならない などの違いがあります．
２つの数値間の総和を求めるでいいのかな？（10と25だったら、10～25の合計） function sums(start, end){ var sum = 0; for(num=start;num<=end;mum++) { sum += num; } return sum; }
このタグをhtml中に入れるだけのような気もしますが...
公式ではjQuery1.x系を使ってるようですので、そちらで試してみては。 jQueryは、新しければ良いというものではなく、1.x系、2.x系、3.x系で互換性がない部分も多いです。
var Array = form.v1.value.split(","); Arrayは、配列を扱うオブジェクトして予約されているので、使用してはいけません。 var arr = form.v1.value.split(","); あたりに直してください。 そのうえで、 var s=0; var arr= form.v1.value.split(","); for(var i = 0; i < arr.length; i++) { // 配列の長さ分の繰り返し s+=Number(arr[i]); // 文字列を数値に変換 } とすればいいかと。 splitメソッドはあくまで「文字列」を分割しますので、 分割してできた配列の値はすべて文字列となります。 その文字列を +=していくと、末尾に追加されているだけとなるので、 数値に変換したうえで、計算していきます。
ChromeエクステンションとかならJavaScriptで余裕でできますね FetchAPI使ってもいいですが，従来通りjQueryでも全然構いません 私はTwitterの公式Webをエクステンションで改造して正規表現ミュート機能つけてます↓ http://qiita.com/mpyw/items/ef54c27c9c54fbb360bd
おはこんばんにちゎ（＾－＾＊ いま、 テーブルが以下のような状態だったとします。 /──────── <table id="myTable"> <tr><td>A1</td><td>A2</td><td>A3</td><td>A4</td></tr> <tr><td>B1</td><td>B2</td><td>B3</td><td>B4</td></tr> <tr><td>C1</td><td>C2</td><td>C3</td><td>C4</td></tr> <tr><td>D1</td><td>D2</td><td>D3</td><td>D4</td></tr> <tr><td>E1</td><td>E2</td><td>E3</td><td>E4</td></tr> <tr><td>F1</td><td>F2</td><td>F3</td><td>F4</td></tr> <tr><td>G1</td><td>G2</td><td>G3</td><td>G4</td></tr> </table> ────────/ このテーブルで、 「チェックのついた行」っていうのが [ 1, 2, 4 ] 行目だとして、 その２列目と、４列目の内容を取り出すんですよね。 それを「多次元配列にいれる」っていのは、 結果として下記のような２次元配列をつくるっていうことで合っていますか？ /──────── ( ２次元配列 ) = [ [ B2, B4 ], [ C2, C4 ], [ E2, E4 ] ]; ────────/ その前提で回答するので、 違っていたら、補足または、この回答への返信で教えてくださいm(__)m まず、 チェックのついた行のリストを targetRow として、 /──────── targetRow = [ 1, 2, 4 ]; ────────/ のように取得できているとします。 この配列 targetRow に格納されている行番号の行で、 ２列目、４列目のセル内容を取り出すので、 取り出す列のリストも配列で作って置きましょう。 番号は 0 からカウントするので、 ２、４行目の番号は 1、3 になります。 /──────── var targetCol = [ 1, 3 ]; ────────/ 多次元配列として値をいれる配列も、 空っぽの状態で用意しておきましょう。 /──────── var list = new Array(); ────────/ さて、 for() ループでテーブルの中のセルをスキャンしていくのだけど、 すべてのセルを見る必要はないですね。 行については、targetRow に格納されている番号の行だけを、 列については、targetCol に格納されている番号の列だけを、 それぞれ見ていけばＯＫです。 なので、 /──────── for( var r=0, rowlen=targetRow.length ; r<rowlen ; r++ ){ for( var c=0, collen=targetCol.length ; c<collen ; c++ ){ … } } ────────/ のように、 targetRow と targetCol の範囲だけでループを回せばいいですね♪ 配列 list の中身は、 各行ごとの要素をさらに配列にして２次元配列にするので、 行をスキャンする for() 文の最初に、その行の配列を用意します。 /──────── for( var r=0, rowlen=targetRow.length ; r<rowlen ; r++ ){ list.push( new Array() ); for( var c=0, collen=targetCol.length ; c<collen ; c++ ){ … } } ────────/ あとは、 ２重になった for() 文の中で、 各セルの内容を２次元配列 list に格納していけばいいですね。 /──────── for( var r=0, rowlen=targetRow.length ; r<rowlen ; r++ ){ list.push( new Array() ); for( var c=0, collen=targetCol.length ; c<collen ; c++ ){ var value = table.rows[ targetRow[ r ] ].cells[ targetCol[ c ] ].innerHTML; list[ list.length-1 ].push( value ); } } ────────/ 以上をまとめると、 ソースコードの実施例は以下のようになります。 /──────── <!--── テーブル ──--> <table id="myTable"> <tr><td>A1</td><td>A2</td><td>A3</td><td>A4</td></tr> <tr><td>B1</td><td>B2</td><td>B3</td><td>B4</td></tr> <tr><td>C1</td><td>C2</td><td>C3</td><td>C4</td></tr> <tr><td>D1</td><td>D2</td><td>D3</td><td>D4</td></tr> <tr><td>E1</td><td>E2</td><td>E3</td><td>E4</td></tr> <tr><td>F1</td><td>F2</td><td>F3</td><td>F4</td></tr> <tr><td>G1</td><td>G2</td><td>G3</td><td>G4</td></tr> </table> <!--── スクリプト ──--> <script type="text/javascript"> //----] チェックされたテーブルセルの内容を取得 var table = document.getElementById("myTable"); var targetRow = [ 1, 2, 4 ]; var targetCol = [ 1, 3 ]; var list = new Array(); for( var r=0, rowlen=targetRow.length ; r<rowlen ; r++ ){ list.push( new Array() ); for( var c=0, collen=targetCol.length ; c<collen ; c++ ){ var value = table.rows[ targetRow[ r ] ].cells[ targetCol[ c ] ].innerHTML; list[ list.length-1 ].push( value ); } } //----] 取得結果を確認 var str = ""; for(var i=0;i<list.length;i++){ for(var ii=0;ii<list[ i ].length;ii++){ str += list[ i ][ ii ]+", " } str += "\n"; } alert( str ); </script> ────────/
id="order"を name="order" に変更すればブラウザ問わず動きます。 --------------------------- idでフォームを参照する場合(id="order") document.getElementById("order")を使いましょう。 --------------------------- nameでフォームを参照する場合(name="order") document.forms["order"]とするか、document.orderでも動きます。 --------------------------- 補足ですが ifを2つ使わずとも以下の記述で動作します。参考まで。 function choice_goods(){ c=!document.order.a1.checked document.order.a1_1.disabled = c document.order.a1_2.disabled = c }
実戦にまさる学びなし。 本やサンプルで100時間やるより、 お金をもらってホンモノのWEBサイトを作る作業を20時間やるほうが、はるかに学びになりますし身につくものも多いです。 もちろん、個人差はありますけど。 あと、同じお金をもらう、でも アルバイトよりは正社員、 正社員よりはフリーランス、 フリーランスよりは役員 とかの方が勉強になります。 要するに、生活かかってるくらいのプレッシャーがある方が真剣に勉強する、ってコトですね。
とりあえず、feed.publishedやfeed.updatedを使用してフィルターをかければ良いだけです。 具体的な方法としては、まずは feed.published は feed.published_parsedに、 feed.updated は feed.updated_parsedに time.struct_time 形式で日時データが格納されておりますので、これを利用してDateTimeクラスを作成します。 これは time.struct_time の先頭6個のデータをtzinfo=<UTC> としてをコンストラクタに渡すことで行えます。更に tzinfo=<JST> で時間を取得すると 日本での published/update時刻 を表すDateTimeクラスが得られます。 import pytz from datetime import datetime, date, timedelta JST = pytz.timezone('Asia/Tokyo') UTC = pytz.timezone('UTC') ... time = datetime(*feed.entries[i].updated_parsed[:6], tzinfo=UTC).astimezone(JST) print(time) DateTimeクラスが得られたら、あとは希望の日時との比較処理を行うだけです。 yesterday = date.today() - timedelta(days=1) if time.date() != yesterday: ____continue まとめるとこんな感じです。 #!/usr/bin/env python # -*- coding: utf-8 -*- import feedparser from datetime import datetime, date, timedelta import pytz #RSSのURL RSS_URL = "http://news.yahoo.co.jp/pickup/computer/rss.xml" #RSSの取得 feed = feedparser.parse(RSS_URL) #TimeZoneの定義 LOCAL_TZ = pytz.timezone('Asia/Tokyo') UTC = pytz.timezone('UTC') #RSSのタイトル print(feed.feed.title) for entry in range(len(feed.entries)): ____#RSSの内容を処理 ____title = feed.entries[entry].title ____link = feed.entries[entry].link ____time = datetime(*feed.entries[entry].updated_parsed[:6], tzinfo=UTC).astimezone(LOCAL_TZ) ____yesterday = date.today() - timedelta(days=1) ____if time.date() != yesterday: ________continue ____print(title) ____print(time) ____print(link)
OVER_QUERY_LIMITのエラーが出ていますので、リクエスト回数が多すぎます。 （参考：https://groups.google.com/forum/#!topic/google-maps-api-japan/z-Gwr...）
>>「小計を自動的」 そんなの計算式さえ分かれば小学生でも出来る マークアップエンジニアって事は要するに文書構造化でしょ? 本来であればHTMLさえ出来れば十分ですけど、現場ではHTMLが使える存在はそんなに戦力になりません。HTML/CSSが出来て使えるって程度でしょうね。 JavaScriptはプログラマーの仕事になり、マークアップエンジニアではありません。 あとですね。プログラミングで「どの程度のプログラムが組めればいいか?」ですが、普通に入門後ならそれでいいと思います。 入門してもどう組めばいいのか全然分からなく、自己解決出来ない人は向いていないと自分は思います。正直プログラミング上でスキルのゴールはありません。努力すれば前へ進めますが、努力しない人はコピペで限られた範囲でしかプログラムを組めないと思いますよ。 因みに個人的には普通にjQueryが使えればいいと思いますよ。 jQueryのメソッド名と引数等全て覚えろとは誰も言わないと思います。調べて自己解決出来れば十分だと言う会社がほとんどです。 現役のプログラマーさんも普通にネットでjQueryのライブラリとか探して、それのサンプルを見てやりたい事が近かったら利用したりしてますね。ただ、自分で既存のライブラリの仕様を変更したり出来る力があれば結構活躍すると思います。
>march113_drum113さん >以上２つのプログラムを作ることは可能ですか？ 要件によっては可能ですね。
> data1のみに追加で項目を書き込む方法 この意味がよく分からないのですが、 同じ名前で書き込めば修正されますし、 新しい名前で書き込めば追加されます。 書き込む場合 data1 = "データ1"; data2 = "データ2"; data1 = encodeURIComponent(data1); data2 = encodeURIComponent(data2); document.cookie = "data1="+data1; document.cookie = "data2="+data2; 読み込む場合 cook = document.cookie+";"; cStart = cook.indexOf("data1=",0); if(cStart != -1){ cEnd = cook.indexOf(";",cStart); data1 = cook.substring(cStart+6,cEnd); data1 = decodeURIComponent(data1); } 修正する場合 data1 = "データ1改"; data1 = encodeURIComponent(data1); document.cookie = "data1="+data1; 追加する場合 data3 = "データ3"; data3 = encodeURIComponent(data3); document.cookie = "data3="+data3; 念の為にエスケープ処理を行っています。 もしも的外れな回答であればコメントして下さい。 自分に発行されたCookieの話ではないですよね？ 自サイトの閲覧者に発行するCookieの話ですよね？
JavaScriptのコードがどのようになっているかわからないのでなんとも言えませんが、HTMLタグがまだ読み込まれる前にJavaScriptが実行されている可能性があります。 なので、 <script type='text/javascript'> function fnc(){ var a = document.getElementById("a"); var b = document.getElementById("b"); var c = document.getElementById("c"); alert(a); alert(b); alert(c); } </script> のように、関数化して、 <body onload="fnc()"> で、onloadイベント時に関数を呼ぶようにしてみてください。
やりたいことがさっぱりわかりません。 Javaに送るリクエストは何で、どんなテーブル定義のテーブルを、どんなルールで変更するのか詳しく書いていただけませんか。
http://mae.chab.in/archives/2351 http://qiita.com/su_mi/items/ef13418d5a179a039c24 住所から検索してgoogle mapを表示させるサンプルです。
最初から<a>テスト</a>が１０個ある場合。 var i = 1; $("a").each(function(){ $(this).addClass("test"+i); i++; }); <a>テスト</a>がそもそも存在しない場合。 ※<body>の中に追加する場合 for(var i=0;i<10;i++){ $("body").append('<A class="test' + (i+1) + '">テスト</a>'); }
jQuery 以下のコードを追加します。 $("#kokodayo").text("移動しました"); java viewの対象部分に以下のコードを追加します。 <div id="kokodayo">移動しました</div>
おはこんばんにちゎ（＾－＾＊ できますよ、ふつうに…；・ω・) 単純に、 ページ内の <a> 要素をすべて取得して、 その中から、 href に "ranking" が含まれる <a> 要素だけを選んで、 その href を window.open() でひらけばいいだけです'd(・ω・＊ /──────── //----] すべての <a> を取得。 var a = document.getElementsByTagName( "a" ); //----] href に "ranking" 含まれるものだけ開く。 for(var i=0;i<a.length;i++){ var href = a[ i ].getAttribute("href"); if( ( href || "" ).match("ranking") ){ window.open( href, "_blank" ) } } ────────/
IEの開発ツール（F12）で確認したところ、 HTML1509: 終了タグが対応しません。 ファイル: aziro.html、行: 72、列: 2 HTML1523: 終了タグが重複しています。タグの構造は "<b><i></b></i>" ではなく "<b><i></i></b>" のようにする必要があります。 ファイル: aziro.html、行: 191、列: 223 HTML1523: 終了タグが重複しています。タグの構造は "<b><i></b></i>" ではなく "<b><i></i></b>" のようにする必要があります。 ファイル: aziro.html、行: 191、列: 227 HTML1523: 終了タグが重複しています。タグの構造は "<b><i></b></i>" ではなく "<b><i></i></b>" のようにする必要があります。 ファイル: aziro.html、行: 191、列: 324 HTML1523: 終了タグが重複しています。タグの構造は "<b><i></b></i>" ではなく "<b><i></i></b>" のようにする必要があります。 ファイル: aziro.html、行: 191、列: 328 とでますので、まず、HTMLのタグを確認してください。
さきほどはどうもです。 HTMLの閉じタグ（</head>）等は、ブラウザが良きに計らってくれたりしますが、明示的に閉じタグつけないと、JavaScriptそのものを認識しないときもあります。（このへんはブラウザ依存） また、JavaScript中でも「多少」良きに計らってくれるところもあったりします。 あとは、ブラウザのキャッシュが効いていて、修正したJavaScriptが適用されない場合もあったりします。 で、うまく動かないな～って思ったときは、開発者ツールを使うと、エラーになっている場所を表示してくれるので、便利ですよ^^ 開発者ツール：http://news.mynavi.jp/column/wc/011/
clientHeightで高さ、 clientWidthで幅を調べることができます 以下、少し強引ですが divタグをクリックした場合に HTMLを動的に変化させて1行にし、 1行の高さを取得し、実際の高さをもとに改行数を判別します。 firefox・Chrome・IE7などでも動きます。 <script type=text/javascript> <!-- function gc(t){ var tmp = t.clientHeight;//元の高さを保持 var tmp2= t.innerHTML;//元のHTMLを退避 t.innerHTML=tmp2.charAt(0) || 'あ'; //1行当りの高さを得るためテキストを1文字に var tmp3=t.clientHeight;//一時的に1行当りの高さを取得 t.innerHTML = tmp2;//HTMLを保持した状態に戻す return tmp/tmp3 || null;// 元の高さを1行当りの高さで割った数が行数 } //--></script> <div id=hoge style=width:80px;cursor:hand onclick='alert(gc(this))'>きょうは、晴れですか。いいえ曇りです</div>
<input type="button" id="btn" value="Click!"/> をHTMLに追加して、 // 下記２行を追加 $(function(){ $("#btn").on("click", function(){ $.getJSON( "https://app.rakuten.co.jp/services/api/IchibaItem/Search/20120723?c...", {keyword:"AKB48",applicationId:"YOUR_APPLICATION_ID",imageFlag:"1"}, function(data){ $.each(data.Items, function(i,item){ $("<a>").attr("href", item.Item.itemUrl).appendTo("#images") .append($("<img/>").attr("src", item.Item.mediumImageUrls[0].imageUrl)); }); } ); // 下記２行を追加 }); }); で、HTMLに追加したボタンクリックで、Ajaxを実行するようになります。 ※jQueryを使用するのでしたら、必ず $(function(){ }); の中に記述するようにしてください。 上記記述がない場合、HTMLのタグを読み込む前にjQuery(JavaScript)を実行しようとして、エラーになる場合があります。
ソース眺める限りでは ホームページビルダー独自の画像事前読み込み用の関数のようですね。 HpbImgPreloadは引数により画像の事前読み込み、 HpbImgFindは引数で指定された画像の検索、 HpbImgSwapは引数に指定した名前の 画像を切り替えるような目的であると思いますが pleloadは htmlに表示される画像の読み込みと キャッシュの作成を補助的に行うものなので 消しても問題はないと思いますが 画像の切り替えに関連するFindとSwapは画像に マウスをのせた場合に呼び出すとすれば 不具合がでると思います。 スクリプトだけでは憶測となるので html全体のソースがわかれば もう少し確実な回答が得られるかと。
>peace3265さん >どなたか教えていただけませんか？宜しくお願い致します。 右にあるテックなんとかと言う所で教えて貰えるようです。
それはもう大人の歯じゃないですか? その奥の3本連なったみたいな歯もゴロっと抜け落ちますよ ただし、猫は7割の確率以上くらいで飲み込んで処理しますので飼い主は気がつきません この犬歯は透明感といい質感といい小ささといい「大人の歯」だと思います きっと3ヶ月最初のころに生えかわってますよ 猫の歯の素晴らしいのは 「抜ける前に下に既に大人の歯が生えている」事です なんというか・・・ 上のカバーがスポット抜ける感じ(カニの脱皮みたいな感じ)で抜けてしまうから 飼い主が気づかないのです
timeTextという変数（Text型）は存在しないんですよね？ 操作したいのが「time」というTextなら、当然ながら time.text = "TIME: " + t; というコードにする必要があります。
var test = [2, 2, 0, 1]; var max = Math.max.apply(null, test); var result = test.filter(function(num) { return num === max; }); console.log(result); Array.filterを使う（自力で書いてもいいかと思います）とか。最大値の要素が1つのとき配列にしたくないのであれば、 result.length > 1 ? result : max; とすることもできます。 【参考】 Array.prototype.filter() - JavaScript | MDN https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Glob...
効率は分からんけど、とりあえず ブロック番号[j]を算出して割り振り してみる。 [printはconsole.logなど適宜修正で] //ideone.com/jWAzS7# var arr = [   01,02,03,04,05,06,   11,12,13,14,15,16,   21,22,23,24,25,26,   31,32,33,34,35,36,   41,42,43,44,45,46,   51,52,53,54,55,56 ], arr2 = [], i, w=3, h=3, b=2; for(i=0; i<arr.length; ++i){   j=(i/(h*w*b)|0)*b+(i/w|0)%b;   if(!arr2[j])arr2[j]=[];   arr2[j].push(arr[i]); } for(i=0; i<arr2.length; ++i)   print(i+":"+arr2[i]);
はい、セキュリティーの問題で、ユーザー操作でないプログラムによるフルスクリーンモードは、禁止されています。 Firefox の場合、 about:config で、 full-screen-api.allow-trusted-requests-only を false に設定すると出来る様になります。
sample: convert strings to html - JSFiddle https://jsfiddle.net/z7hL7ym7/ 文字列を先頭から順に見て、 } が出てきたら、その直前の { と合わせて置換する、という考え方で処理していくのが良いかと思います。 なお、blockquoteだけ要素名もblockquoteになるというのは、ルールとしてかえって組みづらいように思いますので、勝手ながら 要素名.class名 という文法に変えています。
wheelzoom.js のコードを確認してみたところ、object タグは使用できません。 以下に、svg を img タグで表示する例を書いておきます。 <!-- HTML --> <div id="sheet-box"> <button class="button prev-button">Prev</button> <div class="image-box"></div> <button class="button next-button">Next</button> </div> /* CSS */ .button { border: none; outline: none; background-repeat: no-repeat; } .prev-button { background: url('image/Prev_out.gif') } .prev-button:hover { background: url('image/Prev_over.gif') } .next-button { background: url('image/Next_out.gif') } .next-button:hover { background: url('image/Next_over.gif') } // JavaScript 'use strict'; var currentIndex = 0; var imageFiles = [ 'image/NoImage.png', 'image/page44_45.svg', 'image/page46_47.svg', 'image/page48_49.svg', 'image/page50_51.svg', 'image/page52_53.svg', 'image/page54_55.svg', 'image/page56_57.svg' ]; var imageChanger = function(type) { switch (type) { case 'prev': if (--currentIndex < 0) currentIndex = imageFiles.length - 1; break; case 'next': if (++currentIndex > imageFiles.length - 1) currentIndex = 0; break; } imageRenderer(); } var imageRenderer = function() { var img = new Image(); img.src = imageFiles[currentIndex]; img.addEventListener('load', function render() { var box = document.querySelector('.image-box'); if (box.firstChild) { box.replaceChild(img, box.firstChild); } else { box.appendChild(img); } img.removeEventListener('load', render); wheelzoom(img); }); } document.querySelector('.prev-button').addEventListener('click', imageChanger.bind(this, 'prev')); document.querySelector('.next-button').addEventListener('click', imageChanger.bind(this, 'next')); imageRenderer();
こんにちは alert("hello,world")；の「；」を「;」に変更しましょう。 全角と半角の違いです。
リクエスト感謝っ（＾人＾） ソースコードのミスが２つかありますね。 ■■■ （１）<font> の閉じタグ ■■■ [ 検索 ] ボタンの動作には無関係ですが、 ３か所だけ <font> の閉じタグが抜けています。 /──────── <font size="4.5"><b>佐賀本社</b></font><br> <font size="4.5"><a href="～">大和空港線</a>( ここ！ )<br> <font size="4.5"><a href="～">富士線</a>( ここ！ )<br> <font size="4.5"><a href="～">佐賀線</a></font>( ここ！ )<br> ────────/ ■■■ （２）配列の区切りの「,」 ■■■ これが、[ 検索 ] ボタンを押しても動かない原因です。 「date.js」の路線リスト Rosen で、 駅のリスト "st" の配列要素を区切るカンマ「,」がありません。 カンマ「,」を入れれば動きます。 /──────── var Rosen = [ { "id":["yamato","yamato"], "type":"Sample", "st":[ {"name":"長崎","type":"pu"}, ←ここ {"name":"真崎","type":""}, ←ここ {"name":"肥前鹿島","type":""}, ←ここ {"name":"広島","type":"pu"}, ←ここ {"name":"福川","type":""}, ←ここ {"name":"山口","type":"pb"}, ←ここ {"name":"小野田","type":""}, ←ここ {"name":"新下関","type":""}, ←ここ {"name":"門司","type":""}, ←ここ {"name":"黒崎","type":""}, ←ここ {"name":"陣原","type":""}, ←ここ {"name":"折尾","type":"pb"}, ←ここ {"name":"篠栗","type":""}, ←ここ {"name":"福岡空港","type":"pb"}, ←ここ {"name":"博多","type":"pu"}, ←ここ {"name":"西鉄平尾","type":""}, ←ここ {"name":"堤北","type":""}, ←ここ {"name":"堤南","type":"p"}, ←ここ {"name":"脇山","type":""}, ←ここ {"name":"西","type":""}, ←ここ {"name":"藤原北","type":""}, ←ここ {"name":"藤原南","type":""}, ←ここ {"name":"鹿路","type":""}, ←ここ {"name":"千布","type":""}, ←ここ {"name":"三瀬","type":"pu"} ←末尾の要素のあとは「,」不要 ] } ←末尾の要素のあとは「,」不要 ]; ────────/ 配列の１つ１つの要素の区切りには「,」が要ります。 /──────── 配列 = [ 要素, 要素, 要素, 要素, 要素 ]; ────────/ これを、 ソースを見やすくするために改行して書くと、 /──────── 配列 = [ 要素, 要素, 要素, 要素, 要素 ←末尾は「,」不要 ]; ────────/ ってなります。 今回は、 Rosen っていう配列のなかに、 １つ１つの路線データが連想配列で入っていて、 連想配列のなかには、 さらに "st" っていう配列が入っています。 なので、 カンマ「,」の打ち場所は、以下のような感じです。 /──────── var Rosen = [ //<<○○線>> { "id": [ ～ ], "type": "～", "st": [ { ～ }, { ～ }, … { ～ } ←─ 末尾は「,」不要 ] }, //<<××線>> { "id": [ ～ ], "type": "～", "st": [ { ～ }, { ～ }, … { ～ } ←─ 末尾は「,」不要 ] }, …, //<<××線>> { "id": [ ～ ], "type": "～", "st": [ { ～ }, { ～ }, … { ～ } ←─ 末尾は「,」不要 ] } ←─ 末尾は「,」不要 ] ────────/
Jsは分かりませんが、見た感じ１つ気になったところ。Raycastの第2引数にoutが抜けていると思われます。 というのも本来引数は値を初期化させるためにあるものなんですが、この第二引数は特別でRaycast関数の別の返り値、RaycastHit構造体が別に初期化されます。
jsファイルをダウンロードしてjsフォルダに入れれば使えます。
良く知りませんし推測混じりの回答ですが，，， AS3 では var j = 0; var j = 1; こんな↑ことをすると 「1151:定義 j (名前空間 internal) にコンフリクトが存在します。 var j = 1;」 と言うエラーを吐いて コンパイル(パブリッシュ)不可能になるのです。 var j = 0; j = 1; これ↑だと大丈夫です。 var j; j = 0; j = 1; これ↑でも大丈夫です。 つまり for(var i = 0; i <=1; i++){     var j = i; } こんな↑ことはしてはならないことで var j; for(var i = 0; i <=1; i++){     j = i; } こう↑書かなければならないということになるのです。 もっとも for文 などで 動的に同じ変数を宣言した場合は コンパイラは見逃してくれるので for(var i = 0; i <=1; i++){     var j = i; } とした場合はコンパイル(パブリッシュ)は可能です。 コンパイル可能ですが「すべきではないこと！」なのです。 (「できる/できない」と「して良い/悪い」とは別ですよね。) JavaScript ではマス目とか作るときに for(var i = 0; i <10; i++){     for(var j = 0; j <10; j++){         ○○;     } } こんな二重ループなどよく見ると思います。 しかしこれも本来ダメなことです。 こういうことが平気でできる JavaScript は 柔軟で使いやすいとは思います。 (素人が好い加減にコーディングしても動くという利点が満載) 私の勝手な推測ですが こういう JavaScript の「柔軟性重視」の一環なのではないかと思います。 逆にこれは良いことばかりではなく var j = 0; var j = 1; を var j; j = 0; j = 1; と読み替えてしまうのですから 変になることも出てきます。 良い思いをすれば 逆にそれで痛い目にも遭う 「ドラえもんの出す道具」ようなものでしょう。
作ろうと思えば作れるんじゃないでしょうか。 いろいろと面倒そうですけど。
１．Textコンポーネントの付いたオブジェクトを画面の外（右側）に配置 ２．Textコンポーネントに表示させたい文字を入れる。 ３．アニメーションで１のオブジェクトを画面左端まで移動させる。 これだけで出来るので、Assetを入れるまでもないでしょう。 「uGUI アニメーション」などで調べてみてください。 既に文字表示の仕組みがある場合、そこから改変するのは初心者には難しいと思うので一から自作した方が早いと思います。 ちなみに「アナグラム」って文字を入れ替える言葉遊びのことですが、「アルゴリズム」の間違いでしょうか？
何をどうしたらそんなエラーが出たのか？ このような状況を全く書かれていらっしゃらない状態で わかるわけないでしょう？ 回答者はニセ超能力者じゃないんですよ。 「痛いのです！ どうすれば良いのでしょうか？」 こんな質問と同レベルです。 逆に上のような好い加減な質問を聞いて 「それは膵臓がんです！ 早急な手術をお薦めします。」 などというヤツは， 超超超々…ヤブ医者か，ペテン師の超能力者です。 ペテン師にでも引っかかりたいのですか？ 例えば(あくまでもの一例)， 次のような HTML を用意したとします。 <html> <head> <meta charset="utf-8"> <title>Test</title> <script type="text/javascript"> google++; </script> </head> <body></body> </html> 上記 HTML を ブラウザ Firefox を使ってデバッグしても 下の【添付図】のようなエラーが出ます。 google なんて変数を どこにも定義していないのですからエラーが出て当然です。 (出ない方がおかしいです。)
目指すもクソも今すぐ作りましょう。 JavaだのCだの一言で言ってますが、開発ツールによって別物になりますので、勉強してもあんま意味ないです。 特にPC系は言語の勉強しても本当に意味がないです。実戦経験と流行りのアンテナの高さだけがものを言います。 昨日まで必要だった知識が今日はもう要らなくなってたりするのですから。。 また、言語でどう違うかという話ですが、 言語が違うのでなく、開発ツールが違うのです。 アンドロイドアプリは公式でない開発ツールも死ぬほどありますので、まずは自分でもできそうなヤツから始めてください。 プログラムを一行も書かなくていいツールもありますよ。 まぁ、手段は何でもいいから、まずは何か作りましょう。 プログラムのやり方よりも、作るものと、作るプロセスを考える事が大事なのです。
おはこんばんにちゎ♪ その表示を実現する方法はいくつかありますが、 いちばん簡単な方法で解説してみますね（＾－＾＊ 解説のあとで、ソースコードの実施例を示します。 ■■■ しくみ ■■■ 全ての画像の <img> 要素を 「position:absolute」で１枚に重ね合わせておき、 各画像の表示／非表示の切替えを <img> 要素のクラス名の切替えによって行います。 例えば、 クラス名がついていない <img> 要素は非表示の状態 クラス名 show を指定した <img> 要素は表示の状態、 っていう感じです。 クラス名の切替えは Javascript によって行い、 表示／非表示のスタイルに関する設定はすべて CSS で行います。 画像切り替え時のフェードイン・アウトは「opacity」を、 画像のズームアウトは「transform:scale()」を、 それぞれ「transition」でアニメーションさせるだけで実現できます。 では、 ソースコードの作り方を順に解説します＾－＾)ゝ ■■■ HTMLを記述 ■■■ まず、 スライドショーを表示するためのブロックを、 <div> などで用意して id を付けておきましょう。 /──────── <div id="photobox"></div> ────────/ 記述する HTML はこれだけo(・ω・＊ この <div> のなかに、 手打ちで <img> を１つ１つ書いてもいいのだけど、 あとあと管理がしやすいように、 ここでは、 あとで Javascript を使って自動的に書き出しますようにします♪ ■■■ CSS の設定 ■■■ スライドショーに必要なスタイルシートを設定しておきます。 まず、 スライドショーを画面いっぱいに表示するため、 ページの余白をなくしておきましょう。 /──────── html, body{ width: 100%; height: 100%; margin: 0px; padding: 0px; } ────────/ スライドショーの表示領域 #photobox を、 画面いっぱいのサイズに広げておきます。 また、 その中には <img> を「position:absolute」で重ねるので、 座標原点が #photobox になるように #photobox には「position:relative」を指定しておきます。 #photobox からはみ出した部分が表示されないように、 「overflow:hidden」も指定しておきましょう。 /──────── #photobox{ position: relative; width: 100%; height: 100%; overflow: hidden; } ────────/ #photobox に入れる <img> 要素は、 「position:absolute」で重ね合わせます。 デフォルトでは非表示の状態にしておくので、 「opacity:0」で透明にしておきます。 表示状態に切り替えたとき徐々にズームアウトさせるので、 非表示の状態では、 「transform:scale()」で少し拡大された状態にしておきます。 /──────── #photobox img{ position: absolute; left: 0px; top: 0px; z-index: 0; opacity: 0; transform: scale( 1.2 ); } ────────/ さらに、 「opacity」と「transform」に、 「transition」によるアニメーションを設定しておくことで、 画像切り替え時のフェード効果や、ズームアウト効果をつけられます。 画像切り替えの間隔を仮に 4 秒として、 「opacity」の変化時間は、それよりも十分に短く、 「transition」の変化時間は、切り替えの間隔と同じくらいに、 それぞれ設定します。 /──────── #photobox img{ position: absolute; left: 0px; top: 0px; z-index: 0; opacity: 0; transform: scale( 1.2 ); transition: opacity 1s linear 0s, transform 4s linear 0s; } ────────/ クラス名 show を指定された <img> は、 「opacity:1」で表示状態にして、 「transform: scale(1.0)」でズームアウトさせます。 また、 表示状態の <img> がいちばん手前にくるように、 「z-index」に大きい値を指定しておきましょう。 /──────── #photobox img.show{ opacity: 1; transform: scale( 1.0 ); z-index: 100; } ────────/ CSS は以上で完了です。 ■■■ 画像のリストを作成 ■■■ 画像のリストを管理しやすいように、 画像の URL を Javascript で配列にしておきます。 配列の名前は photos でもしておきましょう。 /──────── var photos = [ "画像のURL", "画像のURL", … "画像のURL" ]; ────────/ ■■■ 画像をフィットさせる ■■■ スタイルシートでは、 #photobox 内の <img> 要素に横幅、高さを指定していないので、 このままでは、 表示領域のサイズに関係なく 画像本来の大きさで表示されてしまいますね'd(・ω・＊ スタイルシートで「width:100%」にすれば、 画像はページの横幅いっぱいに広がってフィットしますが、 画像の高さが足りないと、 画像の上下に余白ができてしまいます。 いっぽう、 「height:100%」にすれば高さがフィットしますが、 横幅が足りない場合には左右に余白が空いてしまいます。 横幅を 100% にするか、 高さを 100% にするかは、 表示領域のアスペクト比（縦横の比）によって変わります。 画像に比べて表示領域が横長の場合には「width:100%」、 画像に比べて表示領域が縦長の場合には「height:100%」、 というふうに、条件によって CSS の指定を変える必要があります。 それと同時に、 画像の中心が表示領域の中心に来るように、 表示領域のアスペクト比にあわせて スタイルシートの「left」や「top」も調節しないといけません。 このようなフィッティングは、 CSS でするよりも Javascript で行う方が簡単ですヽ(・ω・＊ そこで、 画像をフィットさせる関数 photoFit() を作っておきましょう。 /──────── function photoFit(){ ～ 処理内容 ～ } ────────/ まず、 画像のアスペクト比を変数 photoasp に保持しておきます。 640 × 480 の画像であれば、 /──────── var photoasp = 640/480; ────────/ ってなりますね。 つぎに、 表示領域のアスペクト比 asp を取得します。 /──────── var photobox = document.getElementById("photobox"); var width = photobox.offsetWidth; var height = photobox.offsetHeight; var asp = width / height ; ────────/ あとは、 #photobox 内の <img> 要素１つ１つを、 アスペクト比によってスタイルシートを分岐させて、 表示領域にフィットさせればいいだけです♪ /──────── var photoimg = photobox.getElementsByTagName("img"); for(var i=0;i<photoimg.length;i++){ //----] 大きさをフィットさせる photoimg[ i ].style.width = ( asp>photoasp ) ? "100%" : "auto"; photoimg[ i ].style.height = ( asp>photoasp ) ? "auto" : "100%"; //----] 中心位置を合わせる photoimg[ i ].style.left = ( asp>photoasp ) ? "0px" : ( ( width-height*photoasp )/2 )+"px"; photoimg[ i ].style.top = ( asp>photoasp ) ? ( ( height-width/photoasp )/2 )+"px" : "0px"; } ────────/ 以上をまとめると、 画像を表示領域にフィットさせる関数 photoFit() の全貌は、 以下のようになります。 /──────── function photoFit(){ var photoasp = 640/480; var photobox = document.getElementById("photobox"); var width = photobox.offsetWidth; var height = photobox.offsetHeight; var asp = width / height ; var photoimg = photobox.getElementsByTagName("img"); for(var i=0;i<photoimg.length;i++){ photoimg[ i ].style.width = ( asp>photoasp ) ? "100%" : "auto"; photoimg[ i ].style.height = ( asp>photoasp ) ? "auto" : "100%"; photoimg[ i ].style.left = ( asp>photoasp ) ? "0px" : ( ( width-height*photoasp )/2 )+"px"; photoimg[ i ].style.top = ( asp>photoasp ) ? ( ( height-width/photoasp )/2 )+"px" : "0px"; } } ────────/ 画像をフィットさせる必要があるのは、 /──────── ・ページの読み込み完了時 ・ウィンドウがリサイズされたとき ────────/ ですね＊・ω・)b' なので、 この関数 photoFit() は、 window オブジェクトの 「load」イベントと「resize」イベントに仕込むことになります。 ■■■ スライドショーを開始する ■■■ ページの読み込みが完了した時点で、 スライドショーを開始させます。 スライドショーを開始する関数を photoStart() として、 その中身を作っていきしょう。 /──────── function photoStart(){ ～ 処理内容 ～ } ────────/ まず、 画像リスト photos を使って、 <div id="photobox"> のなかに <img> 要素をセットします。 /──────── window.photobox = document.getElementById("photobox"); for(var i=0;i<photos.length;i++){ var img = document.createElement("img"); img.setAttribute( "src", photos[ i ] ); img.setAttribute( "alt", "" ); photobox.appendChild( img ); } ────────/ 変数 photobox は、 他の関数内でも使えるようにグローバル変数として定義します。 明示的にグローバル変数として定義するために、 ここでは「window.photobox = ～」のように定義しています。 セットした <img> 要素のリストも、 グローバル変数 photoimg に取得しておきましょう。 /──────── window.photoimg = photobox.getElementsByTagName("img"); ────────/ つぎに、 セットした <img> 要素を表示領域にフィットさせます。 作っておいた関数 photoFit() を実行するだけですね♪ /──────── photoFit(); ────────/ あとは 一定時間おきに <img> のクラス名を切り替えていけば、 スライドショーの再生が始まります。
書籍： http://qiita.com/axross/items/1fc342c04aa88d48c713 まぁ、有名どころになっちゃいますね。 Webサイト： http://www.tohoho-web.com/www.htm Web関連情報満載です。
> この、ｏｐｔｉｏｎタグの任意の位置に > selected を追加して、初期値にしたいです。 と書かれていらっしゃいますが その「任意の位置」の判断基準がわかりません。 任意は任意でも任意なりのルールが必要です。 ・option の「上から○番目」を基準にした任意の位置 ・option の「value」を基準にした任意の位置 ・option の「表示文字」を基準にした任意の位置 など...。 例えば value(西暦の数字) を基準にして その任意を "1940" にでもしますか？ その場合のコード例↓ <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>Test</title> </head> <body> <select id="yob" value=""> </select> <script> // BD age options var newDt = new Date(); var thisYear = newDt.getFullYear(); // "今年" を取得 var dateYear = []; //西暦を代入する配列を生成 console.log(thisYear); var varAno = 1920; //西暦の初期値 var slcAno = 1940; //★初期選択年を指定 var yob = document.getElementById('yob'); //ID yobを取得 console.log(yob); for(var i = 0; varAno< thisYear; i ++ ){     varAno +=1; //初期値に１を加算     //dateYear[i] = thisYear;     dateYear[i] = varAno; //初期値+1を配列に代入     console.log(dateYear[i]);     var options = document.createElement('option'); // optionタグを生成     options.setAttribute('value',dateYear[i]); //     options.innerHTML = dateYear[i];     //★もし potion の value が 指定初期選択年と同じであれば     if(varAno == slcAno){         //★その option を選択状態にする         options.selected = true;     }     yob.appendChild(options); } </script> </body> </html> ※ 結局 JavaScript 中の    ★を付けた部分のみを変更(追加)しました。
>recooriiさん2016/7/3115:29:26 >OnsenUIは、Webアプリケーションを開発するのにも適していますか？ 適しているかどうかは開発スタイル次第なので、それに必要な機能が有るのなら質問者にとっては適していると判断して構いません。
リクエスト感謝っo(＊＾▽＾＊)o さきほどは、返信ありがとでした♪ ページを開いたあとノーアクションでテキストファイルに保存ができれば、 ブラウザからでも問題ないってことで、 ブラウザから実行する方法で解説しますね'd(＾－＾＊ 返信でもいいかな、と思ったけど、 途切れ途切れだと見づらくなるので、再回答します♪ ここで紹介する方法は、以下のブラウザ対応です。 /──────── ・IE10 ～ 11 ・Chrome ・FireFox ・Opera ・Comodo IceDragon ────────/ Safari だけ対応していません。 ■■■ しくみ ■■■ Javascript では、 FileAPI を使うことでローカルファイルの読み書きができます。 IE9 以下などではまだ未対応ですが、 Blob オブジェクトを使った書き出しが、現状いちばん現実的です。 Blob（ Binary Large Object ）は、 ブラウザーの内部オブジェクトとして、 ファイルを扱えるくらい大きなオブジェクトを生成する仕組みです。 ファイルとして書き出したいデータを、 ブラウザー内部で Blob オブジェクトとして形成し、 それをローカル環境に「ダウンロード」する形で保存します。 IE の場合、 msSaveBlob() や msSaveOrOpenBlob() といった、 Blob オブジェクトを直接ダウンロード保存できるメソッドが用意されています。 /──────── Blob オブジェクトを生成 . . ↓ msSaveBlob() でダウンロード開始 ────────/ それ以外のブラウザでは、 Blob オブジェクトから、 Blob オブジェクトにアクセスするための URL を生成し、 その URL をユーザーにダウンロードさせることになります。 そのため、 ダウロード用の <a> 要素を生成し、 右クリックメニューから「対象にファイルを保存」を選択してもらわないといけない という不便さがあります。 /──────── Blob オブジェクトを生成 . . ↓ Blob へのアクセス URL を生成 . . ↓ <a> 要素を生成し、Blob の URL をセット . . ↓ [ ユーザー ] 右クリックメニューから保存 ────────/ これでは、ユーザー側にとっても不便ですね（ノω｀； そんなときは、 HTML5 で追加定義されている「download」属性と、 Javascript の click() を使うと、 IE の msSaveBlob() と同じように自動ダウンロードができます。 /──────── Blob オブジェクトを生成 . . ↓ Blob へのアクセス URL を生成 . . ↓ <a> 要素を生成し、Blob の URL をセット . . ↓ <a> 要素に「download」属性を指定 . . ↓ ( <a> 要素 ).click() で自動的にクリック発動 ────────/ download 属性を指定された <a> は、 リンク先の URL をすべてダウンロードするようになるので、 あとは click() でクリックを発動すれば、 そのままダウンロードが開始される、っていう仕組みですヽ(・ω・＊ ■■■ 関数の作り方 ■■■ 前回の質問で、 /──────── alert( str ); ────────/ のようにアラート表示していたものを、 ファイルに書き出す関数 toFile() を作成して、 /──────── toFile( str ); ────────/ っていう感じにできるようにします。 関数 toFile() の引数には、 Blob に書き出すテキストを引数として用意しておきます。 /──────── function toFile( text ){ … } ────────/ では、関数 toFile() の中身を作っていきましょう＊゜▽＾)9 まずは Blob オブジェクトの生成です。 ブラウザが window.Blob に対応していれば簡単。 出力する内容 text と、MIME タイプを与えるだけで Blob オブジェクトができます。 /──────── var blob = new Blob( [ text ], { "type": "text/plain" } ); ────────/ wndow.Blob に対応していない場合は、 window.BlobBuilder を経由して出力内容を設定し、 getBlob() で Blob オブジェクトを取得します。 ただし、 BlobBuilder はブラウザごとに「プレフィックス」が必須なので、 少しめんどいです。 /──────── var builder = ( "MozBlobBuilder" in window ) ? new MozBlobBuilder() : ( "WebKitBlobBuilder" in window ) ? new WebKitBlobBuilder() : null ; if( builder ){ builder.append( text ); var blob = builder.getBlob(); } ────────/ さて、 Blob オブジェクトが生成できたら、 今度はそれをファイルとしてダウンロードを開始します。 IE の場合は簡単♪ msSaveBlob() メソッドに、 Blob オブジェクトと、保存ファイル名を指定するだけです。 /──────── window.navigator.msSaveBlob( blob, "保存ファイル名.txt" ); ────────/ IE 以外のブラウザでは、 まず、Blob へのアクセス URL を取得します。 /──────── var url = ( window.URL || window.webkitURL ).createObjectURL( blob ); ────────/ URL を取得できたら、 あとは、例のアレですよ、アレ'd(￣ω￣＊ <a> に download 属性を仕込んで自動クリックです。 /──────── var a = document.body.appendChild( document.createElement("a") ); a.style.display = "none"; a.setAttribute( "href", url ); a.setAttribute( "download", "保存ファイル名.txt" ); a.click(); ────────/ これで、関数 toFile() が出来上がりo(＊＾▽＾＊)o この関数が実行された時点で、 引数 text に指定された内容が、 テキストファイルとして自動的にダウンロードされます。 ■■■ 関数の実施例 ■■■ 以下が、関数 toFile() の全貌ですヽ(゜▽＾＊ /──────── function toFile( text ){ //----] 保存ファイル名 var fname = "保存ファイル名.txt"; //----] Blob オブジェクトを生成 var blob = ( "Blob" in window ) ? new Blob( [ text ], { "type": "text/plain" } ) : ( function(){ var builder = ( "MozBlobBuilder" in window ) ? new MozBlobBuilder() : ( "WebKitBlobBuilder" in window ) ? new WebKitBlobBuilder() : null ; if( builder ){ builder.append( text ); return builder.getBlob(); } else{ return null } } )(); //----] Blob をファイルに出力 if( ! blob ){ alert("ご利用の環境では、ファイル出力できません。"); return; } else if( "msSaveBlob" in window.navigator ){ window.navigator.msSaveOrOpenBlob( blob, fname ); } else{ var url = ( window.URL || window.webkitURL ).createObjectURL( blob ); if( ! url ){ alert("ご利用の環境では、ファイル出力できません") } var a = document.body.appendChild( document.createElement("a") ); a.style.display = "none"; a.setAttribute( "href", url ); a.setAttribute( "download", fname ); a.click(); } } ────────/
var data = [01,02,03,04,05,06,07,08,09,10,11,12,13,14,15]; var result = new Array(); data.forEach(function(n){result.push(("00" + n).substr(-2));}); console.log(result); これで配列resultに2桁合わせになった数値が入ります
sample: convert from label element to JavaScript object - JSFiddle https://jsfiddle.net/sii_side/expf2n09/ 考え方としては、 var obj = {}; 空のオブジェクトを用意しておいて、 obj.A = "a"; obj.B = "b"; obj.C = "c"; このように処理しますが、ドット記法だとプロパティ名に変数を使えないので、 obj["A"] = "a"; このようにブラケット記法で表します。これをループで処理するため、 obj[labelのtext] = labelのfor; として回しています。
結果は同じですが、setDateというメソッドもあります。 -------------------- var date = new Date("2016/7/26"); //テキストボックスの扱いは省略 var date2 = new Date(date.setDate(date.getDate() + 10)); //getDateして日付を取得し10を加える //その数字をsetDateに渡す //そのままだと使えないので再度new Dateする var y = date2.getFullYear(); var m = date2.getMonth(); var d = date2.getDate(); console.log(y + "/" + (m + 1) + "/" + d); -------------------- Dateオブジェクトの良いところは、日付や時間の繰り上がりや繰り下がりを内部で上手いこと処理してくれることです。 setDateに渡される日付も、例えば負の数や31より大きな数が出てきても構いません。その分、自動的に月を遡ったり進めたりしてくれます。 なお、7月26日の10日後は8月6日ではなく8月5日ですので、念のため…。 【参考】 Date.prototype.setDate() - JavaScript | MDN https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Glob...
こんばんは ＜h2）の場所にjavascriptで作ったデータを貼りたいのですが DOMを利用すると簡単です。 #2個目のdivにidを指定します。 ＃document.getElementById("div1").style.backgroundColor = "lavender"; で2個目のdivだけ背景色を変更できます。 <!DOCTYPE html> <html> <head> <title>jqueryにてテキストをhtml画面上に挿入したいです。</title> <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"> </script> <style type="text/css"> div.fix{ display:table; border:1px black solid; } div.cel{ display:table-cell; border:1px black solid; } </style> </head> <body> <div class="fix"> </div> <div class="cel">左側のdiv</div> <div id="div1" class="cel"><h2>右側のdiv</h2></div> <script type="text/javascript"> document.getElementById("div1").style.backgroundColor = "lavender"; </script> </body> </html>
elementはjQueryのセレクタが指定されていると思われます。 validate()の中でどういう処理になっているかわからないですが、 closestを使用しているので、おそらくテキストのクラス「form-grouping」あたりが指定されているのではと思います。 （closestは、現要素からさかのぼって要素をマッチングしていくので。） 参考：http://js.studio-kingdom.com/jquery/traversing/closest
javascriptのソースからtest文字列を検索して、変数にセットしている箇所を目視で調べるのが一番早いと思います。
その下のjsfiddleに書いてありますよ。。
おはこんばんにちゎ（＾－＾＊ Javascript でプレーンテキストファイル「～.txt」を読み込むには、 HTML5 で新しく実装されかけている FileReader を使わないといけないのだけど…… この FileReader、 まだ対応できていない閲覧環境の人がたくさんいるので、 使うにはまだ時期尚早なかんじです。 つまり、 「～.txt」を読み込んで処理するのは、まだやめた方がいいです。 じゃぁ、どうするか？ ってことですが、 Javascript でそういう辞書式の機能を使う場合には、 JS ファイル「～.js」のなかに、 連想配列のようなオブジェクト形式でデータを作っておいて、 ページを表示するときに、 その JS ファイルで作っておいたオブジェクトからデータを取り出します。 ■■■ JS ファイルの作り方 ■■■ 例えば、 ひとつの配列を用意します。 /──────── var Rosen = []; ────────/ この配列に、 路線ごとのデータのオブジェクトを入れていきます。 /──────── var Rosen = [ { 路線０のデータ }, { 路線１のデータ }, { 路線２のデータ }, … { 路線Ｎのデータ } ]; ────────/ こんな感じです。 こうしておくと、 ｎ番目の「路線ｎ」のデータには、 /──────── Rosen[ n ] ────────/ でアクセスできるようになります。 配列の中に入れた各路線のデータは「連想配列」にしておきます。 「連想配列」は、 「キー : 値」のように「キー」と「値」をセットにしたデータを、 ひとまとめにして格納しておくオブジェクトです。 例えば、 /──────── var data = { "title":"火花", "author":"又吉直樹" }; ────────/ のように連想配列データを作っておくと /──────── data.title ⇒ 火花 data.author ⇒ 又吉直樹 ────────/ のように、 データの「キー」を使って対応する「値」を取り出すことができます。 このように、 配列と連想配列を使ってデータを JS ファイルに作っておけば、 そのデータを検索して表示することができます'd(＾－＾＊ 連想配列は、 {} で囲って定義できるので、 路線ごとのデータを連想配列で作ると、 路線のリストは下記のような形式になるわけです。 /──────── var Rosen = [ { 路線０のデータ }, { 路線１のデータ }, { 路線２のデータ }, … { 路線Ｎのデータ } ]; ────────/ さて、 質問のケースでは、 路線ごとのデータの連想配列の「キー」としては、 /──────── ・平日と休日の路線 ID をいれる「id」 ・路線の種別をいれる「type」 ・駅のリストをいれる「st」 ────────/ この３つが必要です。 /──────── { "id" : ～, "type" : ～, "st": ～ } ────────/ こんな感じヽ(・ω・＊ "id" については、 平日の id と休日の id を入れるために、 配列の形にしておくとイイです。 /──────── { "id": [ "平日 ID", "休日 ID" ], "type": ～, "st": ～ } ────────/ こうしておくと、 ｎ番目の路線の平日 ID は Rosen[ n ].id[ 0 ] 、 休日 ID は Rosen[ n ].id[ 1 ]、 のように取り出せます。 "type" については、 種別をそのまま文字列で入れればイイですね。 /──────── { "id": [ "平日 ID", "休日 ID" ], "type": "種別の文字列（ pu など ）", "st": ～ } ────────/ これで、 ｎ番目の路線の種別は Rosen[ n ].type で取得できます。 駅のリスト st は、 これも配列で用意しておくとイイでしょう♪ /──────── { "id": [ "平日 ID", "休日 ID" ], "type": "種別の文字列（ pu など ）", "st": [ "駅名０", "駅名１", "駅名２", … ]; } ────────/ こうしておくと、 ｎ番目の路線の m 番目の駅名は、 Rosen[ n ].st[ m ] で取り出すことができます。 でも、 それぞれの駅には、駅タイプもある、ってことでしたね。 その場合は、 /──────── { "id": [ "平日 ID", "休日 ID" ], "type": "種別の文字列（ pu など ）", "st": [ { "name": "駅名０", "type": "種類" }, { "name": "駅名１", "type": "種類" }, { "name": "駅名２", "type": "種類" }, … , { "name": "駅名Ｘ", "type": "種類" } ]; } ────────/ っていう感じに、 それぞれの駅を連想配列にしておくといいです。 これで、 ｎ番目の路線の m 番目の駅について、 駅の名前は Rosen[ n ].st[ m ].name で、 駅の種類は Rosen[ n ].st[ m ].type で、 それぞれ取得することができます。 このような連想配列を、 おおもとの配列 Rosen[] のなかにに入れていくので、 データ用の JS ファイルに記述するコードは /──────── var Rosen = [ { "id": [ "平日 ID", "休日 ID" ], "type": "種別の文字列（ pu など ）", "st": [ { "name": "駅名０", "type": "種類" }, { "name": "駅名１", "type": "種類" }, { "name": "駅名２", "type": "種類" }, … , { "name": "駅名Ｘ", "type": "種類" } ]; }, { "id": [ "平日 ID", "休日 ID" ], "type": "種別の文字列（ pu など ）", "st": [ { "name": "駅名０", "type": "種類" }, { "name": "駅名１", "type": "種類" }, { "name": "駅名２", "type": "種類" }, … , { "name": "駅名Ｘ", "type": "種類" } ]; }, … ]; ────────/ っていう感じに記述していきます。 このままだとコードが見づらいので、 実際に作成するときは、 「 //コメント行 」を使って以下のように記述すれば見やすいです。 /──────── var Rosen = [ // << ○○線 >> { "id": [ "平日 ID", "休日 ID" ], "type": "種別の文字列（ pu など ）", "st": [ { "name": "駅名０", "type": "種類" }, { "name": "駅名１", "type": "種類" }, { "name": "駅名２", "type": "種類" }, … , { "name": "駅名Ｘ", "type": "種類" } ]; }, // << ××線 >> { "id": [ "平日 ID", "休日 ID" ], "type": "種別の文字列（ pu など ）", "st": [ { "name": "駅名０", "type": "種類" }, { "name": "駅名１", "type": "種類" }, { "name": "駅名２", "type": "種類" }, … , { "name": "駅名Ｘ", "type": "種類" } ]; }, … ]; ────────/ ■■■ 実装方法 ■■■ 上記のような JS ファイルを作ってもらえば、 以下のように JS ファイルを読み込むだけで、 ページ内で路線データを使えるようになります＊゜▽＾)b' /──────── <script type="text/javascript" src="JS ファイルのパス"></script> ────────/ あとは、 フォームを用意して、 <form> 要素の action に、 検索処理の Javascript を仕込めば完成ですね♪ /──────── <form name="search" action="javascript:～検索処理～"> ～ 各フォームを設置 ～ <input type="submit" value="検索"> </form> ────────/ 普通は、 action に仕込む Javascript 処理は長くなるので、 別途、関数として作成しておきます。 /──────── <form name="search" action="javascript:search()"> ～ 各フォームを設置 ～ <input type="submit" value="検索"> </form> <script type="text/javascript"> function search(){ ～ 検索処理 ～ } </script> ────────/ ■■■ 全体の実施例 ■■■ 全体のコードを記述すると、 以下のような感じになると思いますヽ(・ω・＊ 路線データの JS ファイルの内容については上記で提示済みなので、 ここでは省略します♪ /──────── <!DOCTYPE html> <html> <head> <title>時刻表検索</title> <!--── 駅データ読み込み ──--> <script type="text/javascript" src="JS ファイルのパス"></script> <head> <body> <!--── 入力フォーム ──--> <form name="search" action="javascript:search()"> 駅名 : <input type="text" name="stname"> <br> ダイヤ : <lable><input type="radio" name="wh" value="w">平日</label> <lable><input type="radio" name="wh" value="h">休日</label> <br> 方向 : <lable><input type="radio" name="ud" value="1">下り</label> <lable><input type="radio" name="ud" value="2">登り</label> <br> <input type="submit" value="検索"> <!--── スクリプト：検索 ──--> <script type="text/javascript"> /*---- 関数 : 検索 ----*/ function search(){ //----] 入力された駅名を取得 var stname = document.search.stname.value; //----] 未入力ならエラー if( !stname ){ alert( "駅名が未入力です" ); return false; } //----] データを検索 for(var n=0;n<Rosen.length;n++){ for(var m=0;m<Rosen[ n ].st.length;m++){ if( stname==Rosen[ n ].st[ m ].name ){ //----]----] 一致するデータ発見 //----]----]----] wh を取得 for(var i=0;i<document.search.wh.length;i++){ if( document.search.wh[ i ].checked ){ var wh= document.search.wh[ i ].value; break; } } //----]----]----] ud を取得 for(var i=0;i<document.search.ud.length;i++){ if( document.search.ud[ i ].checked ){ var ud = document.search.ud[ i ].value; break; } } //----]----]----] 未選択の場合エラー if( ( ! wh ) || ( ! ud ) ){ alert( "未設定の項目があります" ); return false; } //----]----]----] パラメータを決定 var r = ( wh=="w" ) ? Rosen[ n ].id[ 0 ] : Rosen[ n ].id[ 1 ] ; var t = 2; var s = m; var c = Rosen[ n ].type; //----]----]----] ジャンプ var url = "eki.html?r="+r+"&t="+t+"&ud="+ud+"&s="+s+"&c="+c+"&wh="+wh; location.href = url; return; }// if(stname) }// for(m) }// for(n) alert("一致する駅がありません"); } </script> </body> </html> ────────/
$.load()を使用しているということは、jQueryを使っているという前提で回答いたします。 [読み込み元HTML&JS] <html> <head> <meta charset="UTF-8"> <script type="text/javascript" src="jquery.min.js"></script> <script type="text/javascript"> $(function(){ $(".click").on("click", function(){ $(".insert").load("include.php", function(){ $(".insert").on("click", ".box", function(){ $(this).css("display", "none"); }); }); }); }); </script> </head> <body> <div class="click">クリック</div> <div class="insert"></div> </body> </html> [$.loadで読み込まれるソース] <div class="box">ボックス</div> $.loadなどで後から追加される要素にイベントを割り当てる場合は、 (親要素セレクタ).on(イベント名,対象セレクタ,function) で割り付けをします。
具体的に どこにどんなドロップダウンメニューを表示させたいのかわかりませんし わかったとしても JavaScript で動的生成をするのは面倒なので 最初からドロップダウンメニューは作成しておいた上で非表示にしておき 画像のクリックで表示させるようにすれば良いのではないのでしょうか？ 要するに動作②の方 つまり ドロップダウンメニューの onchange で 何かを alert 表示させるようなものの方を 先に作成するのです。 (と言うか，それができないと何にもできないでしょう？) そして動作①の方の 画像のクリックで ドロップダウンメニュー の display を block 状態にしたり ドロップダウンメニュー の visibility を visible 状態にするというわけです。 「displayとvisibilityの違い - Qiita」 http://qiita.com/ma_me/items/a5249693c0b21836126b 「表示・非表示－JavaScript入門」 http://www.pori2.net/js/DOM/7.html
ソースを調べてみたら、いくつか問題が見られました。 まず、htmlから、説明します。 DOCTYPE宣言・ルート要素についてですが、質問者が掲示してくださったhtmlソースはhtml5なので、 <!DOCTYPE html> <html lang="ja"> <head> <meta charset="UTF-8" /> ・ ・ ・ でOKです。 <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>を削除して、 <title></title>の次行に <meta charset="utf-8" />を上記のように位置に変更してください。 それと、<html>を<html lang="ja">に変更してください。 次に 2行の<script>〜</script>の位置が間違っています。 <!DOCTYPE html> <html lang="ja"> <head> <meta charset="UTF-8" /> <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script> <script type="text/javascript" src="scripts/JavaScript.js"></script> <title></title> ・ ・ ・ のように位置を変更してください。 さらにstyle.cssが見当たりませんね〜 これがないと、外部スタイルシートを読み込みができません。 <link rel="stylesheet" type="text/css" href="style.css">を下記のように入れましょう。 <title></title> <link rel="stylesheet" type="text/css" href="style.css"> </head> ・ ・ ・ htmlはここまでで、次はcss ＞リストの黒点が表示される style.cssの最初(1行目)に下記を追加してください。 li { list-style: none; } そうすれば、黒点が消えます。 cssはここまでで、次はJavaScript.jsの中身 質問者は、例のサイトからそのままコピペして保存したと思いますが、 それだと、カーソルを当ててもメニューが表示されません。 <div class="zentai"> <ul class="tyuukan"> <div class="nakami"> ↑ クラス名を変えていますので、JavaScript.jsも変える必要があります。 3行目の var li = $('.mod_categorynav > ul > li'); を var li = $('.zentai > ul > li'); に変更します。 8行目の $(target).find('.mod_submenu').slideDown(200); を $(target).find('.nakami').slideDown(200); さらに11行目の $('.mod_submenu').hide(); を $('.nakami').hide(); 全部で3か所を変更してください。 これで質問者が思っている〝理想通りの表示〟が出来るようになると思います。
         ◆          ◆          ◆◆◆          ◆          ◆ ◆◆◆◆◆◆◆◆
①MyDBという名前のデータベースは作成していますか？ データベースがないと接続できません。 ②ポート5435がファイアウォールでブロックされていませんか？ セキュリティソフトや、Windows ファイアフォールでポートがブロックされていると、つながりません。 上記２点をご確認ください。 データソースODBCのテストでつながるようになれば、あとすこしです。
カンマにかぎらず、そのプログラムには問題があります。 htmlspecialchars()を利用してください。 //php.net/manual/ja/function.htmlspecialchars.php
うまくシートを特定できていないというか、単一のシートしか選択できていないような気がします。まず全シートを配列に格納しないとまずいように思います。 var ss = SpreadsheetApp.getActiveSpreadsheet(); // シートを配列に格納する sh = ss.getSheets(); function myFunction() { // 配列の数だけ同じ処理を実行する for (var i=0; i<sh.length; i++) { sh[i].getRange(1,1).setValue(""); sh[i].getRange(2,2).setValue(""); sh[i].getRange(5,7).setValue(""); } } .setValue("")は.clear()でも適当にやってみてください。
そういうことは、ご教授とは言わずに、「ご教示」と言います。日本語はきちんと使いましょう。
ボイスチャットの仕様がよーわかりませんけど javascriptで取得したらよいのではないでしょうか。 keyupとかが効くかは不明ですが 効かないなら一定時間ごとに取りに行くとかにすれば良いのでは。
変数とid名を変えて同じように並べてしまえば良いと思います。 ↓をvar map = new google.maps.Map(mm,opt);の下に追加 var p2 = new google.maps.LatLng(XX,XX); var opt2 ={zoom:13, center:p2, mapTypeId:google.maps.MapTypeId.ROADMAP }; var mm2 = document.getElementById("mymap2"); var map2 = new google.maps.Map(mm2,opt2); ↓をHTMLの好きな所に追加 <div id="mymap2" style="width:600px; height:400px"></div>
おはこんばんにちゎ＊＾－＾)o [アクセス] ボタンの onclick イベントに、 入力フォームの中身を取得して、 それを URL とするページに移動する処理を仕込みます。 /──────── <input id="url" type="text"> <button type="button" onclick="location.href=document.getElementById('url').value;" >アクセス</button> ────────/ onclick に仕込む処理は、 長くなるとソースが混乱するので、 あらかじめ関数として作って置くのが一般的ですね'd(・ω・＊ /──────── <script type="text/javascript"> function toURL(){ var url = document.getElementById("url").value; location.href = url; } </script> <input id="url" type="text"> <button type="button" onclick="toURL()">アクセス</button> ────────/ なお、 関数 toURL() の中で、 テキストボックスに入力された値が URL として適切かを判別して、 不適切な値の場合はエラーメッセージを表示する、 みたいな処理を追加しておく方がイイと思います。 例えば、 /──────── function toURL(){ var url = document.getElementById("url").value; alert(url); if( url.match(/^https?\:\/\/[\d\/\.\-\_\#\?\&\=a-zA-Z]+/) ){ location.href = url; } else{ alert("入力が不適切です。"); } } ────────/ こんな感じ♪
上記のパターンだけなら、二つ記述すれば良いでしょう。 div img:nth-child(2n){ outline: 1px solid red; } div a:nth-child(2n) > img{ outline: 1px solid red; }
おはこんばんにちゎo(＾▽＾＊ $(".foo") でセルのリストを取得して、 $.each() でリストの中身１つ１つを設定すればイイです。 if() 文でもいいけど、 今回のように条件によって値を切り替える場合は、 ３項演算子を使う方がきれいです＊＾－＾)b' /──────── $( function(){ $.each( $(".foo"), function( i, elem ){ $(elem).html()=="日" ? $(elem).css("color","#f00") : $(elem).html()=="土" ? $(elem).css("color","#00f") : $(elem).css("color","#666") ; } ); } ); ────────/ 条件判定文のところで、 取得するのは "日" とか "土" のようなテキストだけなので、 .html() ではなく .text() でもいいです。 /──────── $( function(){ $.each( $(".foo"), function( i, elem ){ $(elem).text()=="日" ? $(elem).css("color","#f00") : $(elem).text()=="土" ? $(elem).css("color","#00f") : $(elem).css("color","#666") ; } ); } ); ────────/ ただ、 この程度の処理のためにわざわざ jQuery を導入するのも、 ちょっとばかばかしい感じがしますね…（＾－＾； テーブルの直後に、 普通に Javascript の生コードで処理した方が効率いいと思います。 /──────── <table> <tr> <td class="foo">日</td> <td class="foo">月</td> <td class="foo">火</td> <td class="foo">水</td> <td class="foo">木</td> <td class="foo">金</td> <td class="foo">土</td> </tr> </table> <script type="text/javascript"> var td = document.querySelectorAll(".foo"); for(var i=0;i<td.length;i++){ td[ i ].style.color = td[ i ].innerHTML.match("日") ? "#f00" : td[ i ].innerHTML.match("土") ? "#00f" : "#666" ; } </script> ────────/ あと、 セルの順番で色分けしてもいいのなら、 Javascript を使わずに CSS だけでも色分けできますね。 /──────── <table id="data"> <tr> <td>日</td><td>月</td><td>火</td><td>水</td><td>木</td><td>金</td><td>土</td> </tr> </table> <style type="text/css"> #data td{ color: #666 } #data td:nth-child( 7n+1 ){ color:#f00 } #data td:nth-child( 7n ){ color: #00f } </style> ────────/
Javascriptには、色々な手法があり、数あるプログラミング言語の中でもとても柔軟性の高い言語です。変態言語という人も居ます。 おそらくは、配列であるArrayのforEachというものかと思いますが、詳しい詳細は https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Glob... こちらに記載されていますが、難解かと思いますので簡単に書きます。 ============================== 配列はこのような書き方をします。 var list = new Array(1,2,3,4,5); => list[0]=1 , list[1]=2 , list[2]=3 , list[3]=4 , list[4]=5 これの中身を取り出すには、昔は次のようにしていました。 for(var i=0;i<list.length;i++){ var num = list[i]; } これだと、 i という変数を使う必要があり、この中でさらに処理を行っていくと、二回目のiを書いてしまうなど事故になりかねず、色々と面倒です。これの代わりとして forEach を使うことができるようになりました。 ============================== list.forEach(function(num){}); このように書くことで、 var num = list[i]; のような書き方をすることなく、listの中身が順番に、numに入ってくるので、順番に処理ができるようになるのです。 forEach(function(ここの文字){}); に当たる、「ここの文字」は、変数のルールに従っていればなんでもよいです。function(1){}等変数のルールに背いているとダメです。 このとき、Array型のlistの中身は、1,2,3,4,5と数字なので、特別な意味は持ちません。 ============================== では次の場合はどうでしょうか。 var list = new Array( new Array(1,2,3) ,new Array("A","B","C") ,new Array("X","Y","Z") ); このlistはArray型ですが、その中身もArrayが入っています。このとき list.forEach(function(l){}); とした場合、 function(l) の l には、new Array(1,2,3) 、次に new Array("A","B","C")・・・というように、l にはlistの中身である配列が入ってきます。 list.forEach(function(l){ var count = l.length; console.log(count); //F12を押したときに出るテスト画面(console)に表示する、という意味 }); こうすると、count にはそれぞれの配列の長さが入ってきます。 このとき使った、 l.length の length は、listの中に入っていた配列 Array に含まれるプロパティです。 ============================== つまり、 list.forEach(function(e){});等としたときに、listの中身が e に順番に入ってくるので、その中身に合った処理ができる、という事になります。 参考になされた、 e.render(); も、 .render() という機能を持った何かを配列に入れていたため使えるようになった、ということです。 ============================== 分からなければごめんね
Javascriptそのものには用意されていません。拡張が必要です。 幸いWebは広く検索て探しやすいものです。自前で用意したものを公開されてる方が居ます。 【JavaScript】日付を自由にフォーマットする 2010年9月28日 http://www.ilovex.co.jp/blog/system/distributionsystem/javascript-5... 用意されたdate.jsを読み込ませるだけで、Dateが拡張される、という仕組みです。
PC内にサーバーを立ち上げておいて、そこにwebwriteでデータを送信 ↓ サーバーサイドスクリプトでデータを受け取る ↓ JavaScriptを使い、websocketやajaxでデータを受信、ブラウザに表示 回りくどいですが、この三段構えで実現できます。 webwrite()はブラウザに直接データを送ることはできませんので、裏側で仲介してやるサーバーが必要になるわけです。
javascriptに記述ミスがあります。 $('.slider').bxSlider(); は $('.slider').bxSlider({ になります。また、最後に }); がもう１つ必要になります。 {から}までがオプションの指定です。 まとめると以下のようになります。 $(document).ready(function(){ $('.slider').bxSlider({ startSlide:0, speed: 1000, mode: 'fade', controls: false, pager: false }); }); ただし、このオプション指定だと画像が切り替わらなので、「auto: true」を追加する、または「controlsまたは pagerをtrueにする」必要があると思います。
おはこんばんにちゎ（＾－＾＊ 「全てのタグ」について、 タグ内の文字の色をしらべるってことですが、 いくつかのタグは親子になっていますよね？ その場合、 タグのなかに含まれるのは単純なテキストだけでなく、 HTML のタグを含んでたりします。 例えば、 /──────── <div style="color:red"> テキスト１ <span style="color:blue">テキスト２</span> </div> ────────/ みたいなとき、 <div> と <span> は別々にその中のテキストと色情報を取得するのでしょうか？ あと、 「css定義、タグ中に定義の両方」 ってありますが、 これは、 CSS と style 属性の両方が指定されている要素では、 その両方を取得するってことですか？ 最終的に適用されている色っていうことですか？ その辺りが曖昧で分かりにくいのだけど、 ひとまず、 「適用されている色」ってことでやってみると、 /──────── window.onload = function(){ var elems = document.querySelectorAll("*"); for(var i=0;i<elems.length;i++){ var style = elems[ i ].currentStyle || document.defaultView.getComputedStyle( elems[ i ], "" ) ; alert( elems[ i ].innerHTML+"\n"+style.color ); } } ────────/ こんな感じです。 中に子要素をふくむ要素を除外するなら、 /──────── window.onload = function(){ var elems = document.querySelectorAll("*"); for(var i=0;i<elems.length;i++){ if( elems[ i ].innerHTML.match("<") ){ continue } var style = elems[ i ].currentStyle || document.defaultView.getComputedStyle( elems[ i ], "" ) ; alert( elems[ i ].innerHTML+"\n"+style.color ); } } ────────/ こんな感じですねヽ(・ω・＊ 取得したいモノが違っていたら、返信か補足くださいm(__)m
document.getElementById("output").innerHTML = todo todoが配列となっているため、,が追加されています。 配列を文字列にするために document.getElementById("output").innerHTML = todo.join(""); として、配列を結合してください。 del関数内でも、 document.getElementById("output").innerHTML = todo.join(""); としてください。 削除ボタンが効かないのは、 onclick="del(n);" がそのまま適用されるため、nの数値をdelに渡す形となってしまってます。 （送信ボタンを押した回数） ですので、 todo[n]=id_form1.id_textBox1.value + '<input type="button" value="削除" onclick="del(' + n + ');" /><br>'; として、HTMLに追加されるときに、 onclick="del(0);" onclick="del(1);" ・ ・ ・ となるようにしてください。
onload = profInit(); これをコメントアウトし、 <body onLoad="profInit()"> としてください。 タグが読み込まれる前に、profInit()が実行されているため、エラーとなっています。
「上手くいきません」と書かれましても 何がどうなれば「上手く行った状態」で 何がどうなっているのが「上手く行ってない状態」なのか？ これが全くわかりません。 JavaScript ではなく ActionScript の参考 URL ですが↓ 「番外編-質問NGワード集- クニカルノート」より 【うまくいきません】 http://www.fumiononaka.com/TechNotes/NGWords.html#U ～引用～ > 【うまくいきません】 > ですから、ご質問をされたのでしょう。 > それはわかっています。 > わからないのは、具体的に何がどうしたのかです。 > 110番に電話する人たちの第一声が「大変です!」だといいます。 > けれど、「大変」でなければ、普通110番しません。 > 具体的に何がどう大変なのかを聞かないかぎり、 > 警察は出動のしようがありません。 > > 「うまくいかない」というのは、 > 目的とそぐわない結果が発生しているという > 主観的な感情しか伝えません。 > つまり、赤ん坊がむずかって泣くのと同じ情報量といえます。 > このご説明から解決を導ける専門家は、占い師と精神科医だけです。 上手く行く行かないは置いておいて 本題に入りたいところですが 結局やはり何がしたいのか全然わかりません。 とりあえず次のような 単純化した HTML でも作成してみて 検証されてみてはいかがでしょうか？ . <!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>Test</title> <script type="text/javascript"> //クエリ情報(=送信された内容)を表示(※確認用) alert(location.search); function checkboxCheck(){     //「ファイル削除」チェック値に変換     //チェックボックス有無確認     var chkFDel;     //★↓「id="chkFDel" エレメントが存在すれば」以下を実行     if(document.getElementById("chkFDel")){         chkFDel = document.getElementById("chkFDel").checked;         if(chkFDel){                 //チェック有セット             document.getElementById("chkFDel").value = "1";         }else{             //(★↓セットは自由ですが送信はされません(無意味))             //チェック無セット             document.getElementById("chkFDel").value = "0";         }     //★↓「id="chkFDel" エレメントが存在しなければ」以降を実行     }else{         //Ctrl無（FileUpLoadになっている）セット(★意味不明)         document.getElementById("chkFDel").value = "2";     }     //form 内のHTMLを表示(※確認用)     alert(document.getElementById("fo").innerHTML);     document.getElementById("fo").submit(); } </script> </head> <body> <form id="fo" method="get" action=""> <input type="checkbox" value="" name="boxVal" id="chkFDel"> </form> <input type="button" value="チェック" onclick="checkboxCheck()"> </body> </html> . まず上記の     //★↓「id="chkFDel" エレメントが存在すれば」以下を実行     if(document.getElementById("chkFDel")){ の部分ですが， これは このページ内に <input type="checkbox" ～ id="chkFDel"> 自体が 存在するのかどうかを調べて もし存在すれば以下の if文 を実行せよ。 という意味ですよ。 <input type="checkbox" ～ id="chkFDel"> 自体は 作者(質問者さん)が作成したのではないのでしょうか？ ご質問を見る限り閲覧者の行動は関係しなと思われます。 なぜ自分が作ったものの有無を調べているのかわかりません。 そしてそれと対になる     //★↓「id="chkFDel" エレメントが存在しなければ」以降を実行     }else{ の部分ですが， この else文 が実行されるということは 「<input type="checkbox" ～ id="chkFDel"> 自体が存在しない！」 ということですよ。 存在しもしない物に対して     //Ctrl無（FileUpLoadになっている）セット(★意味不明)     document.getElementById("chkFDel").value = "2"; のようにして 何かの属性値をセットできるわけがないじゃないですか。 喩えれば    もしヨシ子ちゃんがこの世に存在しなければ    ヨシ子ちゃんに赤いリボンを付けてあげよう。 みたいなオカルト的プログラムに見えます。 コワイです。 そして     //(★↓セットは自由ですが送信はされません(無意味))     //チェック無セット     document.getElementById("chkFDel").value = "0"; この部分ですが これは     //form 内のHTMLを表示(※確認用)     alert(document.getElementById("fo").innerHTML); の部分によって チェックボックスの value に 0 がちゃんとセットされることが確認できると思います。 ただ...， value に 0 をセットしても チェックされていないのですから何も送信されませんよ。 document.getElementById("fo").submit(); でどこかに何かを送信するのが目的でしたら 何にも意味がない行動になると思います。 結局，結論は最初に戻って 「何がしたいのかも，何がどうなれば良いのかもわからない。」 ということになります。
おはこんばんにちゎ♪ 関数 calc() の中身で、 /──────── a=length.d1.value; ────────/ を /──────── a=document.length.d1.value; ────────/ に直してくださいヽ(・ω・＊ /──────── a=length.d1.value; ────────/ だと、 グローバル変数 window.length の d1 プロパティにアクセスしようとしていますが、 グローバル変数 window.length は定義されていないので、 エラーになっています。
コンソールを利用するものはJScript(WSH)とよばれ、JavaScriptとは別の物です。 https://msdn.microsoft.com/ja-jp/library/x85xxsf4(v=vs.90).aspx JavaScriptは、一般的にはHTMLで使用するスクリプト言語になりますので、 仕事で使うのは、HTML側ですね。
Date オブジェクトの getTime() を関数の前後で実行して引き算すればいいです。
「いつ」「何を」「どこに」「どのように」 このうち書かれていらっしゃることは「何を」のみです。 それも 漠然とした「セレクトボックスで選んだvalueの値を」のみです。 具体性に乏しく何を質問していらっしゃるのだか良くわかりませんが。。。 こんなところ↓でどうでしょう？ <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>Example</title> <script type="text/javascript"> function showValue(box){     var target = document.getElementById("output_txt");     target.value = box.options[box.selectedIndex].value; } </script> </head> <body> <select onchange="showValue(this)"> <option value="">磯野家</option> <option value="波平">父</option> <option value="フネ">母</option> <option value="サザエ">長女</option> <option value="カツオ">長男</option> <option value="ワカメ">次女</option> </select> <br> <input id="output_txt" readOnly> </body> </html>
そもそも HTML が間違っているので何とも...。 パッと見からして構造が変でしょう？ <select id="foo">      <select id="bar">      </select> ↑何コレ？？？ . 普通なら次のようにしますかね。 <select id="foo"> <optgroup label="group1"> <option value="0">hello</option> <option value="1">hello2</option> <option value="2">hello3</option> </optgroup> <optgroup label="group2" disabled style="display:none;"> <option value="0">sleep</option> <option value="1">sleeping</option> <option value="2">sleeper</option> </optgroup> </select> . > dom自体をremoveする以外で何か方法はございますでしょうか。 dom自体をremoveするの意味や効能がわかりませんが <select id="bar">を削除したくないのでしたら 次のようにするとか？？？ <select id="foo"> <optgroup label="group1"> <option value="0">hello</option> <option value="1">hello2</option> <option value="2">hello3</option> </optgroup> </select> <select id="bar"> <optgroup label="group2" disabled style="display:none;"> <option value="0">sleep</option> <option value="1">sleeping</option> <option value="2">sleeper</option> </optgroup> </select>
Javascriptを学びましょう ただ単に俺TUEEやりたいだけなら課金してやればいいんじゃないですかね
URLがhttp://www.yahoo.co.jpの場合もしくは タイトルがGoogleを含む場合 メッセージを表示するサンプルです。 Dim objShell, objWindow Dim objIE Set objShell = CreateObject("Shell.Application") Set objIE = Nothing For Each objWindow In objShell.Windows If TypeName(objWindow.document) = "HTMLDocument"Then If objWindow.document.URL = "http://www.yahoo.co.jp/" or Instr(1,objWindow.document.TITLE,"Google")<>0Then Set objIE = objWindow '存在する場合の処理----------- MsgBox "タイトルは:" & objIE.document.Title & vbCrLf & "URLは:" & objIE.document.URL MsgBox "bodyの内容:"& objIE.document.Body.InnerHTML '-------------------------------- End IF End If Next Set objShell = Nothing If objIE Is Nothing Then wscript.quit End If
一つ上の層であれば「../」で戻れます。 何層も戻る場合は層の数「../」をつければいい
Canvasはたしか、style属性のWidth、Heightを設定すると、元のサイズから、styleで指定したサイズになった倍率で、canvas内の画像が拡大されたと思います。 なので、 canvas.width canvas.height に直接設定したいサイズ（この場合はwindowのサイズ）を指定してください。
ざっと作ってみたので試してみてください。複数行を一気に編集したときに対応させる方法とかもありますが、とりあえず単純なパターンだけを提示しておきます。 最初のfunction myFuncition(){}は削除したうえで、下記をコピペして保存、そのままシートで値を入れてみてください。その勤怠表のシート名はシート1という名前だという前提です。もし異なる場合は下記コード中のシート1を変更して下さい。 // 現在のスプレッドシート特定 var ss = SpreadsheetApp.getActiveSpreadsheet(); // 現在のシート特定（シート1、シート2・・・） var sh = ss.getActiveSheet(); function onEdit(e) { // shName→編集されたシート名、row→編集されたセルの行、col→同じく列、val→編集された値 var shName = e.source.getActiveSheet().getName(); var row = e.range.getRow(); var col = e.range.getColumn(); var val = e.range.getValue(); // シート1のD列orE列が編集されたら・・・ if ((shName == "シート1") && ((col == 4) || (col == 5))) { // 始業時刻取得 var start = sh.getRange(row,4).getValue(); // 終業時刻取得 var end = sh.getRange(row,5).getValue(); // 始業就業時刻が埋められておりかつ0.5時間で割り切れれば・・・ if ((start >= 9) && (end <= 17) && ((end-start)%0.5 == 0)) { // 既存の色をリセット（上書きを考慮） sh.getRange(row,6,1,16).setBackground(""); // 色塗り開始列を取得 var i = (start - 9)/0.5; // 0.5時間で割って色塗りする数を取得 var j = (end - start)/0.5; // 同じ行のC列と同じ色をセットする sh.getRange(row,6+i,1,j).setBackground(sh.getRange(row,3).getBackground()); } else { Browser.msgBox("入力値が正しくありません"); } } }
> $("#tenki").text(data.forecasts[0].telop); > }) > }); ↓ $("#tenki").text(data.forecasts[0].telop); }) } > $.getJSON("http://weather.livedoor.com/forecast/webservice/json/v1?city=" + city, function(data) { ↓ var city = $("#city").val(); $.getJSON("http://weather.livedoor.com/forecast/webservice/json/v1?city=" + city, function(data) { しかしながら、この修正をしたとしても、通信は高い確率で失敗すると思われます。JavaScriptにはセキュリティ上の制限である、クロスドメイン制限があるからです。 例外はありますが、このサービスでは、サーバー側で例外を用意していないようなので、どうしようもありません。
IISなどのwebサーバ上で、mysql(データベース）から、SQLのSELECT文でデータを取得して、画面のinputタグに表示し、変更された内容をwebサーバ上で、SQLのUPDATE文やINSERT文でデータベースに保存します。
if文 とか言う前に， DOM の捕まえ方(名指しのしかた)とか その実行タイミングは OK なのですか？ つまり 例えばその if文 の直前(すぐ上)の行辺りに alert(document.waku_a.value); と書けば その waku_a エレメント の value 値が表示されるのですか？ if文 以前に，そこのところが最重要ですよ。 === === === === === === === 試しにコピペで HTML ファイルを作成してみて 動作確認をしてみてください↓。 <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>Sample</title> <script type="text/javascript"> function dataCheck(){     alert("チェックを開始します");     alert(document.waku_a.value); } </script> </head> <body> 枠A<input id="waku_a" name="waku_a" value="あ"> <hr> <input type="button" value="チェック" onclick="dataCheck()"> </body> </html> if文 以前に document.waku_a.value これ自体の意味がわからないという意味です。 こういうところから 着実に動作するように作成して行かないと。。。 スタート地点自体が間違っていると思います。 === === === === === === === 結局のところ， ご質問では書かれていらっしゃらない重要部分である HTML から作り替える必要がある可能性もありますし， JavaScript だけを根本から作成し直す必要があるのかもしれませんが とりあえずそれらしく動くもので ヒントとなるようなコードを書いておきます。 <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>Sample</title> <script type="text/javascript"> function dataCheck(){     var wA = document.getElementById("waku_a");     var wB = document.getElementById("waku_b");     var wC = document.getElementById("waku_c");     var wD = document.getElementById("waku_d");     if(!wA.value || wA.value=="0" || !wB.value || wB.value=="0"){         alert("枠A または 枠B が 空文字 または 0 です。")     }     if(!wC.value || !wD.value){         alert("枠C または 枠D が 空文字 です。")     } } </script> </head> <body> 枠A<input id="waku_a"><br> 枠B<input id="waku_b"><br> <br> 枠C<input id="waku_c"><br> 枠D<input id="waku_d"><br> <hr> <input type="button" value="チェック" onclick="dataCheck()"> </body> </html>
そもそもブックマークレットなのに なぜ改行が入っているのですか？ 改行など入れられないでしょう？ それと「最後のボタン」とは 一番下の「?」が表示されているボタンのことですか？ これは form と何の関係もないと思いますが。。。 何をしたいのでしょうか？？？ 何だか良くわかりませんが， その form とは何の関係もない「?」ボタンをクリックしたいのでしたら 次のようにするとかですか。。。 javascript:(function(d, i, v) {d[i]("username2")[v] = "NeosID";d[i]("password2")[v] = "NeosPassword";var e = document.getElementsByClassName("help-button fadeimg");e[1].click();})(document, "getElementById" ,"value"); それ以外にそのページに HTML コードがあれば変わりますが 書かれていらっしゃる HTML コードの中では クラス名「help-button fadeimg」のエレメントは２つあって， 「?」ボタンはその２つのうち１番目ではなく２番目です。 ですから e[0] ではなく e[1] になります。 「?」ボタンではなく 「Login」ボタンをクリックして 入力した form の内容を送信したいのでしたら e[1] ではなく e[0] になるので 次のようになりますか。 javascript:(function(d, i, v) {d[i]("username2")[v] = "NeosID";d[i]("password2")[v] = "NeosPassword";var e = document.getElementsByClassName("help-button fadeimg");e[0].click();})(document, "getElementById" ,"value"); 上にも書きましたが この e[0] や e[1] の数字は HTML の他の部分(上の部分)に影響されるので 変わる可能性が大きいですよ。 ========================= とりあえず下のような HTML を作成してみて 下部のリンクをクリックした後の URL 欄を確認してみれば良いのではないかと思います。 <html> <head> <meta charset="shift_jis"> <title>Test Page</title> </head> <body> <div class="login"> <!-- ↓ method="get" に変更してみて実験 --> <form method="get" action="?p=login"> <input type="text" id="username2" name="username2" placeholder="Username"> <input type="password" id="password2" name="password2" placeholder="Password"> <button type="submit" class="help-button fadeimg" name="login">Login</button> <input type="hidden" name="login" value="1" /> </form> <a href="?p=forgot"><button class="help-button fadeimg" type="button">?</button></a> </div> <br> <a href='javascript:(function(d,i,v){d[i]("username2")[v]="NeosID";d[i]("password2")[v]="NeosPassword";var e=d.getElementsByClassName("help-button fadeimg");e[1].click();})(document,"getElementById","value");'>「?」クリック</a> <br> <br> <a href='javascript:(function(d,i,v){d[i]("username2")[v]="NeosID";d[i]("password2")[v]="NeosPassword";var e=d.getElementsByClassName("help-button fadeimg");e[0].click();})(document,"getElementById","value");'>「Login」クリック</a> </body> </html> </body> </html>
> document.getElementById("t").value = document.getElementById("r1"); ここはなぜ、 document.getElementById("t").value = document.getElementById("r1").value; ではないのでしょうか？ 結果が違うのは、前者はvalueを参照せず、後者はvalueを参照しているからです。逆に言うと、それだけのことでしかないので…。
sample: convert specify string by string.replace - JSFiddle https://jsfiddle.net/sii_side/w2pfd8co/ 置換の条件が曖昧（「ああととああ」を「ああかかああ」なのか、「とと」を「かか」なのか（他にもパターンは考えられます）がよくわからない）なのと、画像と説明とが合っていない（textareaにHTMLを書き込んでも意味が無い）のとで、いくつか勝手に条件を設定しています。
最低限for文が書け関数の動きがわかるくらいになったのなら MDNのようなリファレンスサイトや個人のブログなどを巡って、 自分に不足している部分を埋めていきます。 その後、JSならプロトタイプチェーン、スコープチェーンのような言語の仕組みを把握し、いろいろなプログラミングパターンやスタイルを理解していきます。
自動生成でなくて、普通にタグを作ってCSSでdisplay:none;で非表示ではだめですか？それなら最初からnameもvalueも指定できますが。
それだと hoge達 や foo達 は 変数と言うよりも window オブジェクトのプロパティになるので (window という Object の キー になると考えれば良い)， this と [] 演算子でできるでしょう。 【例】↓ <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>Test</title> <script type="text/javascript"> hoge1 = "あいうえお"; hoge2 = "かきくけこ"; hoge3 = "さしすせそ"; for(var i = 1; i <= 3; i++){ this["foo" + i] = this["hoge" + i]; } </script> </head> <body> <!--検証 --> <script type="text/javascript"> document.write(foo1 + "<br>"); document.write(foo2 + "<br>"); document.write(foo3 + "<br>"); document.write("<hr>"); for(var i = 1; i <= 3; i++){ document.write(this["foo" + i] + "<br>"); } </script> </body> </html>
<a>のclassをclass="test"に統一して、 $(".test").on("click", function(){ }); で、a class="test"のクリックをすべて取得して、 $(".test").on("click", function(){ var obj = $("#id"); // jQueryオブジェクトとして取得 var tags = obj.html(); // });
作ろうとされているシステムは、恐らくHTML + Javascriptだけでは効率が悪い、ということを前提に、それでも実装する場合として回答します。本来は、サーバーサイドのプログラム(PHPやCGI)と、データベースを利用すべきの内容かと思います。 ●ターゲットは誰なのか 現在作られている辞書プログラムは、自分用、または使う人本人専用なのか、辞書をみんなで共有するのか、で色々異なってきます。 「自分専用」「使う本人専用」であれば、HTML + Javascript だけでも代案は有りますが、HTML+Javascriptのみではみんなで共有することは恐らく不可能です。 ●個人専用の場合 WebStorageと言う、Javascriptを使って、使っているパソコン（ブラウザ）にデータを保存する、という方法があります。 http://hakuhin.jp/js/storage.html window.localStorage.setItem("単語" , "意味"); とすると、単語というキーに対して、意味という中身で保存します。 "単語" = "意味" と言う様な解釈です。 var str = window.sessionStorage.getItem("単語"); とすると、上で "単語" = "意味" としましたが、その時に設定した 意味 が str に代入されます。 これが最も簡単な方法です。 ●並べ替えについて 色々と手法が有ります。ご確認下さい。 http://qiita.com/PianoScoreJP/items/f0ff7345229871039672
横槍です。JavaとJavaScriptは全く別のプログラミング言語です。 JavaScriptは大体どこのブラウザでも有効になっていますが、Javaアドオンは指定しなければ使えません。JavaとJavaScriptはインドとインドネシアほど違います。 参考https://divide-et-impera.org/archives/1597
var td = ~ で、tdのエレメントが取得できているならば、 td.children.lengthで、td直下にあるタグの数を取得できます。
<?php ～ ?> 外のことですから PHP は基本的に関係ありません。 var は生成される HTML(実体はテキストデータ) 内の JavaScript 内の var です。 JavaScript 内の var は 変数を宣言するときに使うキーワードです。 つまり var が変数なのではなくて var が PHP で言う $ のようなものです。 var i=0; この場合変数は i で その i の初期値として 0 を代入せよ。 という意味になります。
switchを使うときは、breakを忘れないようにしてください。 > case 0: var mtotal2 = Math.ceil('0' * m3); ↓ case 0: var mtotal2 = Math.ceil('0' * m3); break; 以下、10まで同様です。 なお個人的には、配列を使うなど工夫して、switchの使用を避けるようにしたほうが良いと思います。 今回のケースで言うならselectedIndex * 10でもいいと思いますし、 var freight = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]; var selindex = document.form1.country1.selectedIndex; var mtotal2 = Math.ceil(freight[selindex] * m3); 値を配列で持つ方法も良いのではないでしょうか。
おはこんばんにちゎ＊＾－＾)o NaN になるのは、 point[ i2 ] が初期化されていないためです。 具体的には、 /──────── point[ 0 ] += 1; ────────/ という処理を行なうとき、 もともと point[ 0 ] に値が入っていないと +1 できないので、 最初に /──────── point[ 0 ] = 0; ────────/ のように初期化していないと NaN になりますヽ(・ω・＊ 最初に配列 point を初期化しておきましょう。 /──────── var num = [1,1,1,2,3,3]; var point = [ 0, 0, 0 ]; for(var i = 0; i < num.length; i++) { for(var i2 = 0; i2 < 3; i2++) {//1, 2, 3 それぞれが何回登場するか if(num[i] == i2+1) { point[i2] += 1; } } } ────────/ 1, 2, 3 のようなポイントを加算する対象の数が多い場合は、 /──────── var point = [ 0, 0, 0, … ]; ────────/ のように初期化すると大変だし、 タイピングミスで数が合わなくなったりするケースも出るので、 /──────── var point = []; for(var i=0;i<3;i++){ point[ i ] = 0 } ────────/ のように初期化した方が安定だと思います♪ あと、 このケースの場合は、 1, 2, 3 という番号にたいしてポイントを加算する仕組みなので、 以下のようにソースを整理することもできますよっ＊゜▽＾)b' /──────── var num = [ 1, 1, 1, 2, 3, 3 ]; var point = [ 0, 0, 0 ]; for(var i=0;i<num.length;i++) { point[ num[ i ]-1 ] += 1 } alert( point ); ────────/
おはこんばんにちゎ（＾－＾＊ 実際のソースコードがないので、 プレイヤー移動と、スプライトアニメーションの処理が、 どんな Javascript コードで実行されているのか分かりませんが、 例えば、 プレイヤーの移動するスピードを、 移動するピクセル数 step で管理している場合は、 プレイヤーの位置 x は、 /──────── x += step; ────────/ っていう感じで変化させていると思います。 この step を、 そのままスプライトアニメーションの次のコマに進める速さとして、 使えばいいですヽ(・ω・＊ 例えば、 表示するアニメーションのコマ番号を N として、 プレイヤーの移動のときに、 N もいっしょに変化させるようにします。 /──────── N += step; ( N コマ目を表示 ); ────────/ x と N で変化の割合に差をつけるなら、 step に重み定数をかけて加算すればいいですね。 位置 x を、コマ数 N の 1/2 の速さで移動させるなら、 /──────── x += (step/2); ( キャラを座標 Math.round( x ) に移動する ); N += step; ( N コマ目を表示 ); ────────/ っていう感じになります。 あくまでこれは原理的なお話なので、 これを参考に、 いまの自分のスクリプトコードに合うように変形させて取り入れれば、 思うように動かせると思います＊・ω・)o
おはこんばんにちゎ♪ 実際、どんな JS を書いているか分からないので、 自前のコードで説明しますねヽ(・ω・＊ <select> の選択値を取得するのは、 /──────── ( select 要素 ).value ────────/ だけで取れます。 /──────── <form name="myForm"> … <select name="dropdown"" onChange="shokei()"> <option value="300">りんご</option> <option value="500">みかん</option> <option value="700">柿</option> </select> … </form> ────────/ のような HTML 構成なら、 /──────── var value = document.myForm.dropdown.value; ────────/ です。 ただし、 これで取得した値は、数値じゃなく文字列になっているので、 parseInt() とかで整数にしないといけませんね。 /──────── var value = parseInt( document.myForm.dropdown.value, 10 ); ────────/ これで、 選択されている <option> の value を数値として取得できるはずです。 これで正しく取得できていない場合は、 どこか他のコードで間違いがあると思います＊・ω・) 関数 shokei() の中身を見せてもらえると、 もうすこし正確に回答できると思います（＾－＾＊
sample: change "this" keyword reference with function.bind - JSFiddle https://jsfiddle.net/sii_side/8rmuxr20/ bindを使うと、thisの参照先を特定のオブジェクトに束縛することができます。 【参考】 Function.prototype.bind() - JavaScript | MDN https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Glob...
cocos2d-jsなどはどうでしょう。
(1) 直接関係ありません（多分）が、JSFiddleではJavaScript欄に、script要素のタグを書くことはできません。 外部スクリプトと同様に、スクリプトの中身だけ記載します。 －－－－－－－－－－－－ (2) JavaScriptの設定がonload時に実行となっています（デフォルトの動作）が、関数をHTMLのタグで仕掛けるタイプなので、順序が逆になっています。 そのため、JSFiddle上で動作を確認するには、「No wrap - in <head>」など別なものに変更する必要があります。 設定は「JAVASCRIPT」と書いてある箇所（フレーム枠の右上の歯車のマーク）をクリックするとできます。 －－－－－－－－－－－－ (3) > var option1 = document.buki1.options; > var Idx1 = document.buki1.selectedIndex; ↓ var option1 = document.forms[1].buki1.options; var Idx1 = document.forms[1].buki1.selectedIndex; 元の書き方ではフォームコントロールに辿り着けないと思います。もしかすると、古いブラウザでは大丈夫かもしれません。 －－－－－－－－－－－－ (4) 最後のほうでifの大群の後に行っている、変数への代入の方法が誤っています。 > elementaryAATK*((AAA+100)/100)=HHH; ↓ HHH = elementaryAATK*((AAA+100)/100); 代入するときは、代入先の変数を = の左側に書かなければなりません。 > result =KKK*2+MMM*(5/2) ; 唯一、これは大丈夫そうです。 －－－－－－－－－－－－ (5) > aaa = document.statas.IndividualAetherAATK.value; > BBB = BBB+(aaa.value); 先頭に出てくるこのような処理ですが、aaaの時点で既にvalueを参照しているので、aaa.valueとすることはできません（hoge.value.valueとしているのと同じなので）。 なので、 > aaa = document.statas.IndividualAetherAATK.value; ↓ aaa = document.statas.IndividualAetherAATK; このようにaaaの時点ではvalueを参照しないようにするか、 > BBB = BBB+(aaa.value); ↓ BBB = BBB+aaa; このように使うときにvalueを二重に参照しないようにするかのどちらかです。 それから、JavaScriptの+演算子には、数値の加算以外に、文字列の連結という役割があります。これは+だけが持っていて、-演算子や*演算子、/演算子にはありません。 どちらか一方が文字列だと連結としてはたらいてしまうため、注意が必要です。 例） 1 + 0 の結果は 1 （両方とも数値なので加算→結果は数値） 1 + "0" の結果は "10" （片方が文字列なので連結→結果も文字列） これはぜひ覚えておいていただきたいのですが、フォームにおいてvalueを参照した場合、内容が数字のみであっても、必ず文字列として値が得られます。 +の場合は数値に変換してから演算しないと、意図した結果が得られなくなります。 文字列を数値に変換する方法は色々ありますが、 > aaa = document.statas.IndividualAetherAATK.value; ↓ aaa = document.statas.IndividualAetherAATK.value - 0; こんな感じで0を引くだけでも文字列から数値になります。関数であればparseIntなど。 －－－－－－－－－－－－ とりあえず目に付いたところを羅列しました。 これだけで動くかどうかは、コードの量が多過ぎて試す気力が無かったので、申し訳ありませんがわかりません…。
下記サイトの「window.open - Web API インターフェイス MDN」をご覧ください。 https://developer.mozilla.org/ja/docs/Web/API/window.open
>> $('img').on('click', function() { img要素に対するイベントだと分かる >>$('img').addClass('unselected2') img要素に対してaddClassしているのが分かる 本来addClassする対象はそのクリックされた要素に対してやりたいんですよね?? でしたら$('img')の部分を変えないとだめです。 正直自分自身onメソッドでイベントを定義した事ないので分からないのですが、 $(this)辺りで出来ないですか?
>drawOvalの1つ目の値 まずはdrawOvalではなく長方形のdrawRectの方を試してみてはどうでしょうか
文字コードがあってないだけでしょ。
javascriptでの実装でしたら ベターですが <a href="#" onclick='url=["yahoo.co.jp","google.co.jp","youtube.co.jp"]; for(a in url){ window.open("http://"+url[a]+"/"); event.preventDefault();}'>リンク開く</a> でしょうか。 forで指定したurl（yahoo, google, youtube ）をwindow.openで開く。 最後に 同一内のページのアンカーを指定した#へリンクが飛ばないよう クリックイベントをpreventDefaultでキャンセルしています。
「お勧め」というわけではありませんが 「私の場合はどうしてるのか？」という意味の参考までに。。。 JavaScript と言っても様々なソフトで動作しますが， "ブラウザで動作させる JavaScript" の場合 『書く』と『見る』とは別ソフトになります。 (絶対に！ です。) 私の場合 「書く」方のソフトは 「秀丸エディタ」と「MS-IME または ATOK」です。 「『書く』ソフト」自体は何でも良いのです。 「メモ帳」でも「テラパッド」でも「サクラエディタ」でも その他「ドリームウィーバー」などでも とにかく テキストファイル が書いて保存できれば良いのです。 私は「秀丸エディタ」に使い慣れていることと "" 内などが色分けされるところが気に入っています。 (当然，別ソフトでも色分けされますよ。) 「MS-IME または ATOK」というのは結局 IME ですね。 例えば 「ｄ」と打って変換すれば <!DOCTYPE html> が出てきたり， 「ｈ」と打って変換すれば <html><head><title></title></head><body></body></html> が出てきたり 「ｊ」と打って変換すれば <script type="text/javascript"></script> が出てきたり， 「ｆ」と打って変換すれば for(var i = ; i < ;i++){} が出てきたり，… 書いていればキリがありませんが こんなのをたくさんたくさん辞書登録しています。 「見る」方のソフトは 「IE」や「Firefox」は当然のこと 「Chrome」や「Safari」など…，色んなソフトで見て動作検証します。 「見る」方のソフトは 決して１つに決められませんし，決めてはいけません。 また 各ブラウザでも色んなバージョンを揃える方が良いでしょう。
その通りです。 フルスクラッチで書けるようになるための勉強を続けていればいつかは書けるようになります。
https://codeiq.jp/q/2378 JSちゃんと遊べます。
var id = $(this).attr('href'); ここで、クリックした<a>タグ内のhrefに設定っされている値を取得 していますが、間違いないでしょうか？ 想定ですが、href="#top"とかになっているのかと思います。 そのうえで、 var top = $(id).offset().top; のところで、$(id)が示す対象が、offset()で値が取得できないようなことはないでしょうか。 たとえば、<a id="#top">のように、インライン要素の場合、offsetは取得できません。
var onLoad = function() { alert('Hello world!'); } というソースを http://dean.edwards.name/packer/ でやると以下のような出力結果となります（Base62 encodeにチェックをいれています） eval(function(p,a,c,k,e,r){e=String;if(!''.replace(/^/,String)){while(c--)r[c]=k[c]||c;k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('0 1=2(){3(\'4 5!\')}',6,6,'var|onLoad|function|alert|Hello|world'.split('|'),0,{}))
おはこんばんにちゎ♪ 以前に回答させて頂いた検索フォームですね（＾－＾＊ こんな感じのソースコードだったと思います。 /──────── <!---- 検索ボックス ----> <form name="search_dictionary0"> <input name="keyword" type="text"> <input type="button" value="検索" onclick="search_keyword()"> </form> <!---- データリスト ----> <div id="dictionbox"> <dl> <dt>りんご</dt><dd>赤い色をした丸い果物。</dd> <dt>バナナ</dt> <dd>黄色い色をした細長い果物。</dd> </div> </div> <!---- スタイルシート ----> <style type="text/css"> #dictionbox dt, #dictionbox dt+dd{ display: block } #dictionbox dt.hidden, #dictionbox dt.hidden+dd{ display: none } </style> <!---- スクリプト : 検索 ----> <script type="text/javascript"> function search_keyword(){ var item = document.querySelectorAll( "#dictionbox > dl > dt" ); for(var i=0;i<item.length;i++){ var list = document.search_dictionary0.keyword.value.split(" "); for(var ii=0,hit=0;ii<list.length;ii++){ if( item[ i ].innerHTML.match( list[ ii ] ) ){ hit++ } } item[ i ].className = hit ? "" : "hidden"; } } </script> ────────/ <form> ごとコピーして動かないのは、 関数 search_keyword() の 下記コードがエラーを起こしているからです。 /──────── var list = document.search_dictionary0.keyword.value.split(" "); ────────/ なぜエラーになるかというと、 「document.search_dictionary0」は <form> 要素を name 属性で取得していますが、 <form name="search_dictionary0"> がコピーされて２つになったため 「document.search_dictionary0」が配列になってしまったからです。 このエラーを回避するには、 フォーム別に、 /──────── var list = document.search_dictionary0[ 0 ].keyword.value.split(" "); ────────/ とか /──────── var list = document.search_dictionary0[ 1 ].keyword.value.split(" "); ────────/ のようにフォームごとに処理を分けないといけません。 でも、 フォームの数だけ search_keyword() に当たる関数を用意するのは、 かなり面倒くさいし、非効率ですね（・ω・； こんな時は、 関数 search_keyword() の引数で、 フォーム要素を特定してしまいましょう。 /──────── function search_keyword( form ){ … var list = form.keyword.value.split(" "); … } ────────/ これで、 関数 search_keyword() を実行するときに、 引数に <form> 要素を渡してあげれば、 フォームごとに関数を用意しなくてすみます。 さて、 どうやって引数に <form> 要素を渡すか…… じつは、 ボタン <input> の onclick 属性の中で、 「this.form」っていうコードを使うと、 その <input> 要素が所属している <form> 要素を 指名することができちゃうのです＊゜▽＾)b' これを使えば一発です♪ フォームを何個設置しようと、 押したボタンがある <form> を this.form だけで特定できちゃいます♪ この方法を使った実施例が下記ですヽ(・ω・＊ /──────── <!---- 検索ボックス１ ----> <form> <input name="keyword" type="text"> <input type="button" value="検索" onclick="search_keyword( this.form )"> </form> <!---- データリスト ----> <div id="dictionbox"> <dl> <dt>りんご</dt><dd>赤い色をした丸い果物。</dd> <dt>バナナ</dt> <dd>黄色い色をした細長い果物。</dd> </div> </div> <!---- 検索ボックス２ ----> <form> <input name="keyword" type="text"> <input type="button" value="検索" onclick="search_keyword( this.form )"> </form> <!---- スタイルシート ----> <style type="text/css"> #dictionbox dt, #dictionbox dt+dd{ display: block } #dictionbox dt.hidden, #dictionbox dt.hidden+dd{ display: none } </style> <!---- スクリプト : 検索 ----> <script type="text/javascript"> function search_keyword( form ){ var item = document.querySelectorAll( "#dictionbox > dl > dt" ); for(var i=0;i<item.length;i++){ var list = form.keyword.value.split(" "); for(var ii=0,hit=0;ii<list.length;ii++){ if( item[ i ].innerHTML.match( list[ ii ] ) ){ hit++ } } item[ i ].className = hit ? "" : "hidden"; } } </script> ────────/
https://teratail.com/questions/16720 これを見て「あれ？いけるんじゃない？」って思ったんですが，どうやらNode.js本体は自宅サーバ側においてあるようです．無ければ「インストールすればいいじゃん」と思いますが，ロリポップの共用サーバではroot権限は使えないので，apt-get等を用いてインストールすることはできません． そのためソースからコンパイルすることになりますが，これはなかなか困難を極めると思います．もしできたとしても，root権限なしでは80番ポートでリッスンができないという致命的な欠陥があります．(8080番等にしてもうまくいくかの保証はありません) 好きなツールをインストールしたいならVPS1択だと思います．
Google様のやる事なので、マイナスオプションを付けて検索するしかないと思います。
こんにちは あんまり詳しくないですが、先々週行ってきたばかりなので、少しでも参考になれば・・・。 私は夏休みに行ったので、そこそこ混雑してましたが、ハリポタの入場券は、午後３時頃まで発券してました。私は夜のハリポタエリアに入りたかったので、３時頃発券場所に行ったら、１８時台の入場券が発券できましたよ。とりあえず、貴方が入場されたらすぐに、ハリポタの発券場所に行って下さい。もし、お金をかけても良いのなら、エクスプレス・パスを買うという手もあります。ハリポタエリアに確実に入場でき、ジャーニーにも乗れます。スパイダーマンも乗れますよ。エクスプレス・パス５か７です。 行く日が迫ってると思いますので、一度公式HPで、チケット確認してみて下さいね。 あと、ゾンビですが・・・。私も大っ嫌いで、９月の連休で行きたかったですが、やめておきました。たしか、ゾンビが出るエリアは決まってたと思います。パーク全体がゾンビになったら、お子さんとか号泣ですよね。笑 ゾンビの時間はわかりません。HPに載ってないでしょうか？？ USJに詳しい方の回答が得られるといいですね。
具体的には $('.flexslider').flexslider({ animation: "slide", animationLoop:false, slideshow:false, slideshowSpeed:2000,//ここを追加。デフォルト値7000ms(ミリセカンズ) end: function(){ //end:オプションでは最後までスライドしたときに発生する処理を追加できる。 $('.flexslider').animate({"opacity": 0},2000); } }); こうします。 丁寧に言うと、$('.flexslider').flexsliderメソッドに渡す設定のオブジェクトに、slideshowSpeedを追加します。デフォルト値は7000になっているので、これを2000(2000ミリ秒、2秒間隔)に設定しなおします。 その他の設定、たとえばスライド方向やスライド時にフェードするなどの設定をすることが出来ます。 参考 http://on-ze.com/archives/409
既にあるスクリプトに対し、 ・新しい機能を追加する ・不要な機能を削除する ・バグを修正する ・高速化する などです。
レガシーASPで処理するならアラートはJavaScriptで表示するのでなく、アラートのページは遷移するように設計した方がシンプルです。 以前の案件は社内システムでしたが、JavaScriptはなるべく使わない方針でした。 これから勉強されるのでしたら、ASP.NETの方が良いと思いますが。
>orange_knlさん >このカクッと移動する現象を無くす為には、どのような対策方法を取れば良いでしょうか？ プラグインはソースで提供されているので、権利上問題が無ければ、ソースを改変して対策することになります。
おはこんばんにちゎ♪ Javascript で <iframe> を追加し、 その <iframe> に [ ex1.html ] を表示して、 欲しい値を取得すればいいと思いますo(・ω・＊ ただし、 <iframe> で読み込んだページへのアクセスは、 親ページと子ページがともに同じドメイン内のページじゃないと、 取得できないので注意です。 あと、 GoogleChrome だけは、 ローカルにおいてあるファイルは すべて互いに別ドメインとして判断されてしまうので、 サーバーにアップしないと動きません。 ローカルで実験するときは、 GoogleChrome 以外のブラウザで表示確認しましょう。 ざっと作ってみると、こんな感じになると思います♪ /──────── 【 ex1.html 】 <!DOCTYPE html> <html> <head> <title>ページ１</title> </head> <body> <a>test</a> </body> </html> 【 ex2.html 】 <!DOCTYPE html> <html> <head> <title>ページ２</title> </head> <body> <h1></h1> <script type="text/javascript"> var iframe = document.createElement("iframe"); iframe.src = "./ex1.html"; iframe.style.display = "none"; document.body.appendChild( iframe ); iframe.onload = function(){ var a = iframe.contentWindow.document.getElementsByTagName("a")[ 0 ]; document.getElementsByTagName("h1")[ 0 ].innerHTML = a.outerHTML; document.body.removeChild( iframe ); }; </script> </body> </html> ────────/
var reg = /xxx(\n.+)+/; var body1 = "xxx\naaa\nbbb\n\n"; var m1 = body1.match(reg); console.log(m1[0]); var body2 = "xxx\naaa\nbbb\nccc\n\n"; var m2 = body2.match(reg); console.log(m2[0]);
先頭に#があるか正規表現で調べる=>数字が3文字または6文字あるか正規表現で調べる
> var json = {kkk:vvv} このとき、vvvは変数が展開されますが、kkkは展開されません。 つまり、その前に出てくるkkk変数の値が何であったとしても、それに関係無くkkkという名前のプロパティになります。 var json = {}; json.kkk = vvv; こう書いたとしても同じです。このkkkも変数ではなく、オブジェクトのプロパティ名です。 プロパティ名に変数を使用したいのであれば、 var json = {}; json[kkk] = vvv; このようにブラケット記法を使った書き方をします。また、策定中の新しい規格では、 var json = { [kkk] = vvv; } このような書き方の導入が進んでいるようです。
JSファイル上でHTMLエレメントのボタンを作るという内容であれば 以下の内容が一例ですが、具体的にどういったことをされたいのでしょうか？ <body> <script src=hoge.js></script> </body> /*hoge.js */ var btn = document.createElement('input'); btn.value='ボタン'; btn.type = 'button' window.addEventListener('load',document.body.appendChild(btn)); //もしくは var str = "<input type=button value='ボタン'>"; document.write(str);
「クリック位置」とは具体的に何でしょうか？ セルの番地（行番号と列番号の組）、あるいはマウスカーソルの絶対的・相対的な位置など複数思い浮かぶので。ただ、いずれにせよ、csv2tableだから絶対無理ということは無いかと思います。 とりあえず、セルの番地のことだと仮定して…ソースが提示されていないので方法論だけですが、例えばセル（th要素やtd要素）に直接イベントハンドラを仕掛けて上手くいかないのであれば、イベントハンドラの仕掛け先はtable要素にしておき、どのセルでイベントが発生したかはevent.targetで調べる、とすれば意図どおりに動くかもしれません。 jQueryであれば、$.onの第2引数で発生源を限定できますので、 sample: get clicked cell address with jQuery - JSFiddle https://jsfiddle.net/sii_side/ax0tah85/ event.targetからではなくthisで直接セルを参照することも可能です。
> 最終的なゴールは、VBAにより、 > 選択されている画像を抽出したい この意味(関連性)が全くわかりませんが とりあえず無視ということで以下を続けます。 > 現在拡大表示された画像が何であるか > ～略～ > 選択された画像を把握する方法 「選択(クリック)された画像」と「拡大表示された画像」とは別物ですよ。 また， 「拡大表示された画像」は選択された画像で実行される関数の引数からわかるでしょう？ <img src="小さな画像ファイル名1" onClick="Imgche('大きな画像ファイル名1')"> 「小さな画像ファイル名1」がクリックされたときに 関数 Imgche が実行されその引数で指定された 「大きな画像ファイル名1」の画像が name="space" の部分に表示されるのです。 「小さな画像ファイル名1」がクリックされたときに 「小さな画像ファイル」が何であるかは 現状ではわかりませんね。 ですから 「小さな画像ファイル」が何であるかを知りたいときは それも引数で渡してやれば良いかと思います。 または クリックされたエレメント自体を this として引数で渡し， そのエレメントの src 属性を見るとか。 とにもかくにも 別関数を使うか， 今の関数の引数を変えるかのどちらかになるでしょう。 書かれていらっしゃるサイトのスクリプトを 拝借＆変更 させていただくことにします↓。 . ◎「小さな画像ファイル名」を引数として渡す方法例↓ <html> <head> <title></title> <script type="text/javascript"> <!-- function Imgche(ado, sml) { document.space.src=ado; alert("選択された画像のファイル名…" + sml); alert("拡大された画像のファイル名…" + ado); } // --> </script> </head> <body> <center> <p> <img src="小さな画像ファイル名1" onClick="Imgche('大きな画像ファイル名1','小さな画像ファイル名1')"> <img src="小さな画像ファイル名2" onClick="Imgche('大きな画像ファイル名2','小さな画像ファイル名2')"> <img src="小さな画像ファイル名3" onClick="Imgche('大きな画像ファイル名3','小さな画像ファイル名3')"> <img src="小さな画像ファイル名4" onClick="Imgche('大きな画像ファイル名4','小さな画像ファイル名4')"> <img src="小さな画像ファイル名5" onClick="Imgche('大きな画像ファイル名5','小さな画像ファイル名5')"> </p> 小さな画像をクリックすると額に大きな画像が表示されます。 <p style="border: ridge 10 #cccc66; width: 300; height: 300; background-color: #cccc66; "> <img src="最初に表示されている画像" width="300" height="300" name="space"> </p> </center> </body> </html> . ◎選択されたエレメントを引数として渡す方法例↓ <html> <head> <title></title> <script type="text/javascript"> <!-- function Imgche(ado, elm) { document.space.src=ado; alert("選択された画像のURL…" + decodeURI(elm.src)); alert("拡大された画像のURL…" + decodeURI(document.space.src)); } // --> </script> </head> <body> <center> <p> <img src="小さな画像ファイル名1" onClick="Imgche('大きな画像ファイル名1',this)"> <img src="小さな画像ファイル名2" onClick="Imgche('大きな画像ファイル名2',this)"> <img src="小さな画像ファイル名3" onClick="Imgche('大きな画像ファイル名3',this)"> <img src="小さな画像ファイル名4" onClick="Imgche('大きな画像ファイル名4',this)"> <img src="小さな画像ファイル名5" onClick="Imgche('大きな画像ファイル名5',this)"> </p> 小さな画像をクリックすると額に大きな画像が表示されます。 <p style="border: ridge 10 #cccc66; width: 300; height: 300; background-color: #cccc66; "> <img src="最初に表示されている画像" width="300" height="300" name="space"> </p> </center> </body> </html> ↑実際の画像は用意しなくても 上の HTML のみで，取得動作だけはすると思いますよ。 (画像を用意しなければ画像が表示されないだけのことです。) . または 「現在拡大表示された画像のURL」でしたら クリックするときとかに関わらず 知りたいときに document.space.src を取得すれば良いだけです。 ◎知りたいときに「現在拡大表示された画像のURL」を知る方法例↓ <button id="btn" onclick="alert(decodeURI(document.space.src))"> 拡大表示されている画像のURLを表示</button> <br> <button id="btn" onclick="alert(decodeURI(document.space.src.match('.+/(.+?)([\?#;].*)?$')[1]))"> 拡大表示されている画像のファイル名を表示</button> ↑コレを HTML の body 内の好きなところに貼り付ければ良いだけです。
for文っていったいどこにfor文を使うのでしょうか？ 使えなくもありませんが複雑になるだけのような？？ 例えば大筋のアルゴリズムとして   まず年齢カウンタとなる変数(初期値0)を作り   ループで       誕生日の１年後から１年ずつ加算した日を求め       もしその加算した日が指定日を越えたら           ループを抜け       もしその加算した日が指定日を越えなければ           年齢カウンタに 1 を加算する。 こんな感じ↑で行きますか？？？ 上の考え方で行く場合の JavaScript 入り HTML の全文例です↓。 <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>for文 サンプル</title> <script type="text/javascript"> //年齢を計算する関数 calcAge の定義 function calcAge(){     //誕生日の年月日の数を取得     var bY=parseInt(document.getElementById("birthY").value);     var bM=parseInt(document.getElementById("birthM").value)-1;     var bD=parseInt(document.getElementById("birthD").value);     //指定日の年月日の数を取得     var aY=parseInt(document.getElementById("appoY").value);     var aM=parseInt(document.getElementById("appoM").value)-1;     var aD=parseInt(document.getElementById("appoD").value);     //年月日が未入力であったり半角数字以外が入力されていたら     if(isNaN(bY * bM * bD * aY * aM * aD)){         //警告文を出して この関数を抜ける         alert("年月日には半角数字を入力してください");         return;     }     //指定日の経過ミリ秒を取得     aTime = (new Date(aY,aM,aD)).getTime();     //変数 ageCnt に 0～10000 を代入しながらループ     for(var ageCnt = 0; ageCnt <= 10000; ageCnt++){         //誕生日の１年後から１年ずつ加算した日の経過ミリ秒数が         //指定日の経過ミリ秒を過ぎれば この for文 を抜ける         if((new Date(bY+1+ageCnt,bM,bD)).getTime()>aTime) break;     }     //id が「age」のテキストボックスに年齢を表示     document.getElementById("age").value=ageCnt; } </script> </head> <body> 誕生日：西暦 <input size="5" value="2000" id="birthY">年 <input size="2" value="11" id="birthM">月 <input size="2" value="1" id="birthD">日 <br> <br> 指定日：西暦 <input size="5" value="2016" id="appoY">年 <input size="2" value="10" id="appoM">月 <input size="2" value="3" id="appoD">日 <br> <br> <hr> <br> <input type="button" value="年齢計算" onclick="calcAge()"> <br> <br> 指定日に<input readOnly size="5" id="age">歳になります。<br> (なお１万１歳を越す歳は計算されません。) </body> </html> === === === === === === === === ※なお 上のスクリプトでは 「満年齢では誕生日の前日に１つ歳をとる。」 という法律的な満年齢の計算方法は無視して 普通に「誕生日に１つ歳をとる」という 慣習的な年齢計算方法を取り入れています。 法律的で厳密な満年齢計算をする場合は 指定日に -1 日するなどの処理を入れてください。 「満年齢 - Wikipedia」 https://ja.wikipedia.org/wiki/%E6%BA%80%E5%B9%B4%E9%BD%A2 ～引用～ > 年齢計算にあっては例外的に初日（出生日）を起算日とする。 > この関係で誕生日前日を以て満了日となり、 > 誕生日前日に年を取ることになる。 「起算日」とは第1日とする日のことです。 結婚した日や何かを創立した日などなど… は， その当日を ○○0日目 ，次の日を ○○1日目 と計算するため 結婚記念日や，創立記念日ななどなど… の場合， 同月同日が ○○年満了日 になるのだけれども 生まれた日に限っては 生まれた日を 生後1日目 と計算するため 誕生日の前日に１つ歳をとるという意味です。 ※そもそも昔は 0 という概念が希薄でしたし。   昔は生まれたら１歳でその後元旦を迎えるごとに   みんな一斉に１つ歳をとるという時代もありました(数え年)。 「1．4月1日生まれの児童生徒の学年について：文部科学省」 http://www.mext.go.jp/a_menu/shotou/shugaku/detail/1309966.htm ～引用～ > 人は誕生日の前日が終了する時（午後12時）に > 年を一つとる（満年齢に達する）、とされています。 > これを4月1日生まれの子どもに当てはめると、 > 誕生日の前日である3月31日の終了時（午後12時） > に満6歳になることになります。 > よって、4月1日生まれの児童生徒の学年は、 > 翌日の4月2日以降生まれの児童生徒の学年より > 一つ上、ということになり、 > 一学年は4月2日生まれから > 翌年の4月1日生まれの児童生徒までで > 構成されることになります。 4月1日生まれの子は 小学校１年生などでは その学年で一番小さな子 (一番弱い子/いじめられっ子/できの悪い子/落ちこぼれ) になる可能性が高くなり その後の人生もそれを引きずって 歩み続ける可能性も高くなるため， 本当の誕生日は4月1日なのに 戸籍上の誕生日を4月2日と登録している人は多いです。 これは上記「満年齢」の計算方法に起因することです。 しかし こんなこと一般人は日頃意識していないと思うので 上のスクリプトでは「誕生日に歳をとる」という 一般的な概念を取り入れています。
各ファイルは、指定したurlの場所にありますか？ test.js ・・・ htmlと同じ場所 画像 ・・・ htmlのあるフォルダ/image の中
ブラウザのデベロッパーツール（または開発ツール、開発者ツール、Webインスペクタ）を使用すると、後から追加されたHTMLも見る事ができますよ。
基本的にはそのアニメーションが再生されて停止する時間を予測し、Timeout等で指定時間過ぎたら実行とかをします。 ただ趣味の範囲で未対応ブラウザを切り捨てたいならJavaScriptの新しい機能であるPromiseを使う事で非同期で処理を順序よくさせる事は出来ます。 最近リリースされた最新バージョンのブラウザであれば大抵対応してます。 IE10以下辺りは怪しいと思います。 http://qiita.com/koki_cheese/items/c559da338a3d307c9d88
その処理だとJSPファイルが2つ必要だと思うのですが、1つで無理やり書こうとしてるのですかね。 最初のJSPの方ではJavaScriptを使わず、最後のJSPの方でJavaScriptを使うようにすれば望む結果が得られると思います。
つまりは単純に こんな感じ↓のことでしょうか？ <!DOCTYPE html> <html> <head> <meta charset="shift_jis"> <title>Sample</title> <script type="text/javascript"> //関数 addStr(引数:文字列) の定義 function addStr(str){     //文字列を追加出力するエレメントの参照を取得     var target = document.getElementById("txt");     //そのエレメントに引数の文字列を追加     target.value += str; } </script> </head> <body> <input type="text" value="何か文字" id="txt" style="width:500px;"> <br> <input type="button" value="あ行" onclick="addStr('あいうえお')"> <br> <input type="button" value="か行" onclick="addStr('かきくけこ')"> <br> <input type="button" value="さ行" onclick="addStr('さしすせそ')"> <br> <input type="button" value="ア行" onclick="addStr('アイウエオ')"> <br> <input type="button" value="カ行" onclick="addStr('カキクケコ')"> <br> <input type="button" value="サ行" onclick="addStr('サシスセソ')"> </body> </html>
JavaScriptのソース見ないとなんともいえませんが、おそらく２つのテーブルの違いを判断できてないため、２こめが消えてしまってるのだと思います。 以下、確認ですが、 ・1~3のセルをクリックすると●と▲（▼）の部分が切り替わる、 というのは、列１～３のセル（▲が入っている<TD>）をクリックすると、 ●が入っているセル（１列目の<TH>の中身）が入れ替わるという 認識でいいでしょうか。 ・動作としては、テーブル１のセルを選択した場合は、テーブル１の選択された行 の１列目、テーブル２の場合はテーブル２の選択された行の１列目を入れ替える という動作でいいでしょうか。 上記動作でよろしければ、ロジック考えてみます。
